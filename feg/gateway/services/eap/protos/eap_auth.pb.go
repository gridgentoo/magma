// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/eap_auth.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/feg/gateway/services/aaa/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protos/eap_auth.proto", fileDescriptor_3e8f4f02288c4412) }

var fileDescriptor_3e8f4f02288c4412 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0x4d, 0x2c, 0x88, 0x4f, 0x2c, 0x2d, 0xc9, 0xd0, 0x03, 0xf3, 0x85, 0x98,
	0x53, 0x13, 0x0b, 0xa4, 0x38, 0x53, 0x13, 0x0b, 0x20, 0x7c, 0x23, 0x6b, 0x2e, 0x6e, 0x90, 0x8a,
	0xe2, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x1d, 0x2e, 0xb6, 0x8c, 0xc4, 0xbc, 0x94, 0x9c,
	0x54, 0x21, 0x7e, 0xbd, 0xc4, 0xc4, 0x44, 0x88, 0xa2, 0x62, 0x3d, 0x90, 0x26, 0x74, 0x01, 0x25,
	0x06, 0x27, 0xf5, 0x28, 0xd5, 0xdc, 0xc4, 0xf4, 0xdc, 0x44, 0xfd, 0xb4, 0xd4, 0x74, 0xfd, 0xf4,
	0xc4, 0x92, 0xd4, 0xf2, 0xc4, 0x4a, 0x7d, 0xa8, 0x51, 0x60, 0x9b, 0xf5, 0x21, 0xca, 0x93, 0xd8,
	0xc0, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xe5, 0xcc, 0x07, 0x95, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EapServiceClient is the client API for EapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EapServiceClient interface {
	Handle(ctx context.Context, in *protos.Eap, opts ...grpc.CallOption) (*protos.Eap, error)
}

type eapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEapServiceClient(cc grpc.ClientConnInterface) EapServiceClient {
	return &eapServiceClient{cc}
}

func (c *eapServiceClient) Handle(ctx context.Context, in *protos.Eap, opts ...grpc.CallOption) (*protos.Eap, error) {
	out := new(protos.Eap)
	err := c.cc.Invoke(ctx, "/eap.eap_service/handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EapServiceServer is the server API for EapService service.
type EapServiceServer interface {
	Handle(context.Context, *protos.Eap) (*protos.Eap, error)
}

// UnimplementedEapServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEapServiceServer struct {
}

func (*UnimplementedEapServiceServer) Handle(ctx context.Context, req *protos.Eap) (*protos.Eap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}

func RegisterEapServiceServer(s *grpc.Server, srv EapServiceServer) {
	s.RegisterService(&_EapService_serviceDesc, srv)
}

func _EapService_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Eap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EapServiceServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eap.eap_service/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EapServiceServer).Handle(ctx, req.(*protos.Eap))
	}
	return interceptor(ctx, in, info, handler)
}

var _EapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eap.eap_service",
	HandlerType: (*EapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handle",
			Handler:    _EapService_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/eap_auth.proto",
}
