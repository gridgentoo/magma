// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.

syntax = "proto3";

import "orc8r/protos/common.proto";

package magma.mconfig;
option go_package = "magma/feg/cloud/go/protos/mconfig";

//------------------------------------------------------------------------------
// FeG configs
//------------------------------------------------------------------------------
message DiamClientConfig {
    string protocol = 1; // tcp/sctp/...
    string address = 2; // server's host:port
    uint32 retransmits = 3;
    uint32 watchdog_interval = 4;
    uint32 retry_count = 5;
    string local_address = 6; // client's local address to bind socket to IP:port OR :port
    string product_name = 7;
    string realm = 8; // diameter realm
    string host = 9; // diameter host
    string dest_realm = 10; // server diameter realm
    string dest_host = 11; // server diameter host
    bool   disable_dest_host = 12; // don't include dest_host AVP in diameter requests
    bool   overwrite_dest_host = 13; // overwrite dest_host AVP in diameter requests even if the message includes it
}

message DiamServerConfig {
    string protocol = 1; // tcp/sctp/...
    string address = 2; // host:port
    string local_address = 3; // IP:port or :port
    string dest_host = 4; // diameter host
    string dest_realm = 5; // diameter realm
}

message S6aConfig {
    orc8r.LogLevel log_level = 1;
    DiamClientConfig server = 5;
    // Percentage of request failures considered to be unhealthy
    float request_failure_threshold = 6;
    // Minimum number of requests necessary to consider a metrics snapshot valid
    uint32 minimum_request_threshold = 7;
}

message GxConfig {
    DiamClientConfig server = 1;
    string OverwriteApn = 2;
    repeated DiamClientConfig servers = 3;
}

enum GyInitMethod {
    RESERVED = 0; // proto enums must start with 0
    PER_SESSION = 1;
    PER_KEY = 2;
}

message GyConfig {
    DiamClientConfig server = 1;
    GyInitMethod init_method = 2;
    string OverwriteApn = 3;
    repeated DiamClientConfig servers = 4;
}

message SessionProxyConfig {
    orc8r.LogLevel log_level = 1;
    GxConfig gx = 5;
    GyConfig gy = 6;
    // Percentage of request failures considered to be unhealthy
    float request_failure_threshold = 7;
    // Minimum number of requests necessary to consider a metrics snapshot valid
    uint32 minimum_request_threshold = 8;
}

message SwxConfig {
    orc8r.LogLevel log_level = 1;
    DiamClientConfig server = 2;
    // Flag to ensure that a user is authorized for Non-3GPP IP Access
    bool verify_authorization = 3;
    uint32 CacheTTLSeconds = 4;
     // Percentage of request failures considered to be unhealthy
    float request_failure_threshold = 5;
    // Minimum number of requests necessary to consider a metrics snapshot valid
    uint32 minimum_request_threshold = 6;
    // Flag to ensure that we send SAR with REGISTER following successful MAA
    bool register_on_auth = 7;
    // use returned maa.AAAServerName to derive Origin Realm from
    bool derive_unregister_realm = 8;
    // PLMN IDs served by HLR
    repeated string hlr_plmn_ids = 9;
}

message EapAkaConfig {
    orc8r.LogLevel log_level = 1;
    message Timeouts {
        uint32 ChallengeMs = 1;
        uint32 ErrorNotificationMs = 2;
        uint32 SessionMs = 3;
        uint32 SessionAuthenticatedMs = 4;
    }
    Timeouts timeout = 2;
    repeated string PlmnIds = 3;
}

message AAAConfig {
    orc8r.LogLevel log_level = 1;
    // Idle session TTL
    uint32 IdleSessionTimeoutMs = 2;
    // enable accounting & maintain long term user sessions
    bool AccountingEnabled = 3;
    // Postpone Auth success until successful accounting CreateSession completion
    bool CreateSessionOnAuth = 4;
}

message GatewayHealthConfig {
    repeated string required_services = 1;
    uint32 update_interval_secs = 2;
    uint32 update_failure_threshold = 3;
    uint32 cloud_disconnect_period_secs = 4;
    uint32 local_disconnect_period_secs = 5;
}

message HSSConfig {
    DiamServerConfig server = 1;

    // Operator configuration field for LTE.
    bytes lte_auth_op = 2;

    // Authentication management field for LTE.
    bytes lte_auth_amf = 3;

    message SubscriptionProfile {
        // Maximum uplink bit rate (AMBR-UL)
        uint64 max_ul_bit_rate = 1;
        // Maximum downlink bit rate (AMBR-DL)
        uint64 max_dl_bit_rate = 2;
    }
    // Maps from IMSI to SubscriptionProfile.
    map<string, SubscriptionProfile> sub_profiles = 4;

    // If an IMSI if not found in sub_profiles, the default profile is used instead.
    SubscriptionProfile default_sub_profile = 5;

    // Whether to stream subscribers from the cloud subscriberdb service.
    bool stream_subscribers = 6;
}

message RadiusdConfig {
    // Port the metrics server is running on
    uint32 radius_metrics_port = 1;
    // The path to access the prometheus metrics on the server
    string radius_metrics_path = 2;
    // Interval in seconds between fetching and updating metrics
    uint32 update_interval_secs = 3;
    // Hostname for prometheus metrics
    string radius_metrics_host = 4;
}


message SCTPClientConfig {
    string server_address = 1; // server's host:port
    string local_address = 2; // client's local address to bind socket to IP:port OR :port
}

message CsfbConfig {
    orc8r.LogLevel log_level = 1;
    SCTPClientConfig client = 2;
}

