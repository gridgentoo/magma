// Code generated by radius-dict-gen. DO NOT EDIT.

package xwf

import (
	"strconv"

	"fbc/lib/go/radius"
	"fbc/lib/go/radius/rfc2865"
)

const (
	_FacebookExpressWiFi_VendorID = 40981
)

func _FacebookExpressWiFi_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_FacebookExpressWiFi_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return nil
}

func _FacebookExpressWiFi_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _FacebookExpressWiFi_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _FacebookExpressWiFi_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _FacebookExpressWiFi_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return nil, false
}

func _FacebookExpressWiFi_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _FacebookExpressWiFi_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _FacebookExpressWiFi_AddVendor(p, typ, attr)
}

type XWFRestrictToWalledGarden uint32

const (
	XWFRestrictToWalledGarden_Value_True  XWFRestrictToWalledGarden = 0
	XWFRestrictToWalledGarden_Value_False XWFRestrictToWalledGarden = 1
)

var XWFRestrictToWalledGarden_Strings = map[XWFRestrictToWalledGarden]string{
	XWFRestrictToWalledGarden_Value_True:  "True",
	XWFRestrictToWalledGarden_Value_False: "False",
}

func (a XWFRestrictToWalledGarden) String() string {
	if str, ok := XWFRestrictToWalledGarden_Strings[a]; ok {
		return str
	}
	return "XWFRestrictToWalledGarden(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XWFRestrictToWalledGarden_Add(p *radius.Packet, value XWFRestrictToWalledGarden) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FacebookExpressWiFi_AddVendor(p, 1, a)
}

func XWFRestrictToWalledGarden_Get(p *radius.Packet) (value XWFRestrictToWalledGarden) {
	value, _ = XWFRestrictToWalledGarden_Lookup(p)
	return
}

func XWFRestrictToWalledGarden_Gets(p *radius.Packet) (values []XWFRestrictToWalledGarden, err error) {
	var i uint32
	for _, attr := range _FacebookExpressWiFi_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XWFRestrictToWalledGarden(i))
	}
	return
}

func XWFRestrictToWalledGarden_Lookup(p *radius.Packet) (value XWFRestrictToWalledGarden, err error) {
	a, ok := _FacebookExpressWiFi_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XWFRestrictToWalledGarden(i)
	return
}

func XWFRestrictToWalledGarden_Set(p *radius.Packet, value XWFRestrictToWalledGarden) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FacebookExpressWiFi_SetVendor(p, 1, a)
}

func XWFCaptivePortalToken_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FacebookExpressWiFi_AddVendor(p, 2, a)
}

func XWFCaptivePortalToken_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FacebookExpressWiFi_AddVendor(p, 2, a)
}

func XWFCaptivePortalToken_Get(p *radius.Packet) (value []byte) {
	value, _ = XWFCaptivePortalToken_Lookup(p)
	return
}

func XWFCaptivePortalToken_GetString(p *radius.Packet) (value string) {
	return string(XWFCaptivePortalToken_Get(p))
}

func XWFCaptivePortalToken_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _FacebookExpressWiFi_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XWFCaptivePortalToken_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _FacebookExpressWiFi_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XWFCaptivePortalToken_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _FacebookExpressWiFi_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XWFCaptivePortalToken_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _FacebookExpressWiFi_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XWFCaptivePortalToken_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FacebookExpressWiFi_SetVendor(p, 2, a)
}

func XWFCaptivePortalToken_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FacebookExpressWiFi_SetVendor(p, 2, a)
}

type XWFAllowedQuota uint32

var XWFAllowedQuota_Strings = map[XWFAllowedQuota]string{}

func (a XWFAllowedQuota) String() string {
	if str, ok := XWFAllowedQuota_Strings[a]; ok {
		return str
	}
	return "XWFAllowedQuota(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XWFAllowedQuota_Add(p *radius.Packet, value XWFAllowedQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FacebookExpressWiFi_AddVendor(p, 3, a)
}

func XWFAllowedQuota_Get(p *radius.Packet) (value XWFAllowedQuota) {
	value, _ = XWFAllowedQuota_Lookup(p)
	return
}

func XWFAllowedQuota_Gets(p *radius.Packet) (values []XWFAllowedQuota, err error) {
	var i uint32
	for _, attr := range _FacebookExpressWiFi_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XWFAllowedQuota(i))
	}
	return
}

func XWFAllowedQuota_Lookup(p *radius.Packet) (value XWFAllowedQuota, err error) {
	a, ok := _FacebookExpressWiFi_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XWFAllowedQuota(i)
	return
}

func XWFAllowedQuota_Set(p *radius.Packet, value XWFAllowedQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FacebookExpressWiFi_SetVendor(p, 3, a)
}

type XWFAuthorizeTrafficClasses struct {
	XWFAuthorizeClassName string
	XWFAuthorizeBytesLeft uint64
}

const (
	XWFAuthorizeTrafficClasses_XWFAuthorizeClassName_Type radius.Type = 1
	XWFAuthorizeTrafficClasses_XWFAuthorizeBytesLeft_Type radius.Type = 2
)

func newXWFAuthorizeTrafficClasses(value XWFAuthorizeTrafficClasses) (attribute radius.Attribute, err error) {
	var typedAttributes []radius.TypedAttribute
	var a radius.Attribute

	a, err = radius.NewString(value.XWFAuthorizeClassName)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{XWFAuthorizeTrafficClasses_XWFAuthorizeClassName_Type, a})

	a = radius.NewInteger64(value.XWFAuthorizeBytesLeft)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{XWFAuthorizeTrafficClasses_XWFAuthorizeBytesLeft_Type, a})

	attribute, err = radius.NewTLV(typedAttributes)
	if err != nil {
		return nil, err
	}
	return
}

func setXWFAuthorizeTrafficClasses(a radius.Attribute) (values []XWFAuthorizeTrafficClasses, err error) {
	var attributes radius.Attributes
	valuesLen := -1

	attributes, err = radius.TLV(a)
	if err != nil {
		return
	}

	if val, ok := attributes[XWFAuthorizeTrafficClasses_XWFAuthorizeClassName_Type]; ok {
		valuesLen = len(val)
		values = make([]XWFAuthorizeTrafficClasses, valuesLen)
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].XWFAuthorizeClassName = radius.String(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}

	if val, ok := attributes[XWFAuthorizeTrafficClasses_XWFAuthorizeBytesLeft_Type]; ok {
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].XWFAuthorizeBytesLeft, err = radius.Integer64(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}
	return
}

func XWFAuthorizeTrafficClasses_Add(p *radius.Packet, values []XWFAuthorizeTrafficClasses) error {
	var attribute radius.Attribute
	if len(values) < 1 {
		return radius.ErrEmptyStruct
	}
	for _, value := range values {
		_attr, _err := newXWFAuthorizeTrafficClasses(value)
		if _err != nil {
			return _err
		}
		attribute = append(attribute, _attr...)
	}
	return _FacebookExpressWiFi_AddVendor(p, 4, attribute)
}

func XWFAuthorizeTrafficClasses_Get(p *radius.Packet) (value []XWFAuthorizeTrafficClasses) {
	value, _ = XWFAuthorizeTrafficClasses_Lookup(p)
	return
}

func XWFAuthorizeTrafficClasses_Gets(p *radius.Packet) (values [][]XWFAuthorizeTrafficClasses, err error) {
	var value []XWFAuthorizeTrafficClasses
	for _, attr := range _FacebookExpressWiFi_GetsVendor(p, 4) {
		value, err = setXWFAuthorizeTrafficClasses(attr)
		if err != nil {
			return
		}
		values = append(values, []XWFAuthorizeTrafficClasses(value))
	}
	return
}

func XWFAuthorizeTrafficClasses_Lookup(p *radius.Packet) (values []XWFAuthorizeTrafficClasses, err error) {
	a, ok := _FacebookExpressWiFi_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	values, err = setXWFAuthorizeTrafficClasses(a)
	return
}

func XWFAuthorizeTrafficClasses_Set(p *radius.Packet, values []XWFAuthorizeTrafficClasses) error {
	var attribute radius.Attribute
	for _, value := range values {
		_attr, _err := newXWFAuthorizeTrafficClasses(value)
		if _err != nil {
			return _err
		}
		attribute = append(attribute, _attr...)
	}
	return _FacebookExpressWiFi_SetVendor(p, 4, attribute)
}

type XWFTrafficClassesAcct struct {
	ClassName     string
	InputOctets   uint64
	OutputOctets  uint64
	InputPackets  uint64
	OutputPackets uint64
}

const (
	XWFTrafficClassesAcct_ClassName_Type     radius.Type = 1
	XWFTrafficClassesAcct_InputOctets_Type   radius.Type = 2
	XWFTrafficClassesAcct_OutputOctets_Type  radius.Type = 3
	XWFTrafficClassesAcct_InputPackets_Type  radius.Type = 4
	XWFTrafficClassesAcct_OutputPackets_Type radius.Type = 5
)

func newXWFTrafficClassesAcct(value XWFTrafficClassesAcct) (attribute radius.Attribute, err error) {
	var typedAttributes []radius.TypedAttribute
	var a radius.Attribute

	a, err = radius.NewString(value.ClassName)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{XWFTrafficClassesAcct_ClassName_Type, a})

	a = radius.NewInteger64(value.InputOctets)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{XWFTrafficClassesAcct_InputOctets_Type, a})

	a = radius.NewInteger64(value.OutputOctets)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{XWFTrafficClassesAcct_OutputOctets_Type, a})

	a = radius.NewInteger64(value.InputPackets)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{XWFTrafficClassesAcct_InputPackets_Type, a})

	a = radius.NewInteger64(value.OutputPackets)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{XWFTrafficClassesAcct_OutputPackets_Type, a})

	attribute, err = radius.NewTLV(typedAttributes)
	if err != nil {
		return nil, err
	}
	return
}

func setXWFTrafficClassesAcct(a radius.Attribute) (values []XWFTrafficClassesAcct, err error) {
	var attributes radius.Attributes
	valuesLen := -1

	attributes, err = radius.TLV(a)
	if err != nil {
		return
	}

	if val, ok := attributes[XWFTrafficClassesAcct_ClassName_Type]; ok {
		valuesLen = len(val)
		values = make([]XWFTrafficClassesAcct, valuesLen)
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].ClassName = radius.String(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}

	if val, ok := attributes[XWFTrafficClassesAcct_InputOctets_Type]; ok {
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].InputOctets, err = radius.Integer64(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}

	if val, ok := attributes[XWFTrafficClassesAcct_OutputOctets_Type]; ok {
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].OutputOctets, err = radius.Integer64(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}

	if val, ok := attributes[XWFTrafficClassesAcct_InputPackets_Type]; ok {
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].InputPackets, err = radius.Integer64(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}

	if val, ok := attributes[XWFTrafficClassesAcct_OutputPackets_Type]; ok {
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].OutputPackets, err = radius.Integer64(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}
	return
}

func XWFTrafficClassesAcct_Add(p *radius.Packet, values []XWFTrafficClassesAcct) error {
	var attribute radius.Attribute
	if len(values) < 1 {
		return radius.ErrEmptyStruct
	}
	for _, value := range values {
		_attr, _err := newXWFTrafficClassesAcct(value)
		if _err != nil {
			return _err
		}
		attribute = append(attribute, _attr...)
	}
	return _FacebookExpressWiFi_AddVendor(p, 5, attribute)
}

func XWFTrafficClassesAcct_Get(p *radius.Packet) (value []XWFTrafficClassesAcct) {
	value, _ = XWFTrafficClassesAcct_Lookup(p)
	return
}

func XWFTrafficClassesAcct_Gets(p *radius.Packet) (values [][]XWFTrafficClassesAcct, err error) {
	var value []XWFTrafficClassesAcct
	for _, attr := range _FacebookExpressWiFi_GetsVendor(p, 5) {
		value, err = setXWFTrafficClassesAcct(attr)
		if err != nil {
			return
		}
		values = append(values, []XWFTrafficClassesAcct(value))
	}
	return
}

func XWFTrafficClassesAcct_Lookup(p *radius.Packet) (values []XWFTrafficClassesAcct, err error) {
	a, ok := _FacebookExpressWiFi_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	values, err = setXWFTrafficClassesAcct(a)
	return
}

func XWFTrafficClassesAcct_Set(p *radius.Packet, values []XWFTrafficClassesAcct) error {
	var attribute radius.Attribute
	for _, value := range values {
		_attr, _err := newXWFTrafficClassesAcct(value)
		if _err != nil {
			return _err
		}
		attribute = append(attribute, _attr...)
	}
	return _FacebookExpressWiFi_SetVendor(p, 5, attribute)
}

type XWFSuppressCaptivePortalDetection uint32

const (
	XWFSuppressCaptivePortalDetection_Value_False XWFSuppressCaptivePortalDetection = 0
	XWFSuppressCaptivePortalDetection_Value_True  XWFSuppressCaptivePortalDetection = 1
)

var XWFSuppressCaptivePortalDetection_Strings = map[XWFSuppressCaptivePortalDetection]string{
	XWFSuppressCaptivePortalDetection_Value_False: "False",
	XWFSuppressCaptivePortalDetection_Value_True:  "True",
}

func (a XWFSuppressCaptivePortalDetection) String() string {
	if str, ok := XWFSuppressCaptivePortalDetection_Strings[a]; ok {
		return str
	}
	return "XWFSuppressCaptivePortalDetection(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XWFSuppressCaptivePortalDetection_Add(p *radius.Packet, value XWFSuppressCaptivePortalDetection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FacebookExpressWiFi_AddVendor(p, 6, a)
}

func XWFSuppressCaptivePortalDetection_Get(p *radius.Packet) (value XWFSuppressCaptivePortalDetection) {
	value, _ = XWFSuppressCaptivePortalDetection_Lookup(p)
	return
}

func XWFSuppressCaptivePortalDetection_Gets(p *radius.Packet) (values []XWFSuppressCaptivePortalDetection, err error) {
	var i uint32
	for _, attr := range _FacebookExpressWiFi_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XWFSuppressCaptivePortalDetection(i))
	}
	return
}

func XWFSuppressCaptivePortalDetection_Lookup(p *radius.Packet) (value XWFSuppressCaptivePortalDetection, err error) {
	a, ok := _FacebookExpressWiFi_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XWFSuppressCaptivePortalDetection(i)
	return
}

func XWFSuppressCaptivePortalDetection_Set(p *radius.Packet, value XWFSuppressCaptivePortalDetection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FacebookExpressWiFi_SetVendor(p, 6, a)
}
