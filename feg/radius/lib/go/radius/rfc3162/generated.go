// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc3162

import (
	"net"

	"fbc/lib/go/radius"
)

const (
	NASIPv6Address_Type    radius.Type = 95
	FramedInterfaceID_Type radius.Type = 96
	LoginIPv6Host_Type     radius.Type = 98
	FramedIPv6Route_Type   radius.Type = 99
	FramedIPv6Pool_Type    radius.Type = 100
)

func NASIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Add(NASIPv6Address_Type, a)
	return nil
}

func NASIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = NASIPv6Address_Lookup(p)
	return
}

func NASIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range p.Attributes[NASIPv6Address_Type] {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NASIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(NASIPv6Address_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func NASIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Set(NASIPv6Address_Type, a)
	return nil
}

func FramedInterfaceID_Add(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	p.Add(FramedInterfaceID_Type, a)
	return nil
}

func FramedInterfaceID_Get(p *radius.Packet) (value net.HardwareAddr) {
	value, _ = FramedInterfaceID_Lookup(p)
	return
}

func FramedInterfaceID_Gets(p *radius.Packet) (values []net.HardwareAddr, err error) {
	var i net.HardwareAddr
	for _, attr := range p.Attributes[FramedInterfaceID_Type] {
		i, err = radius.IFID(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedInterfaceID_Lookup(p *radius.Packet) (value net.HardwareAddr, err error) {
	a, ok := p.Lookup(FramedInterfaceID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IFID(a)
	return
}

func FramedInterfaceID_Set(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	p.Set(FramedInterfaceID_Type, a)
	return nil
}

func LoginIPv6Host_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Add(LoginIPv6Host_Type, a)
	return nil
}

func LoginIPv6Host_Get(p *radius.Packet) (value net.IP) {
	value, _ = LoginIPv6Host_Lookup(p)
	return
}

func LoginIPv6Host_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range p.Attributes[LoginIPv6Host_Type] {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LoginIPv6Host_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(LoginIPv6Host_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func LoginIPv6Host_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Set(LoginIPv6Host_Type, a)
	return nil
}

func FramedIPv6Route_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(FramedIPv6Route_Type, a)
	return nil
}

func FramedIPv6Route_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(FramedIPv6Route_Type, a)
	return nil
}

func FramedIPv6Route_Get(p *radius.Packet) (value []byte) {
	value, _ = FramedIPv6Route_Lookup(p)
	return
}

func FramedIPv6Route_GetString(p *radius.Packet) (value string) {
	return string(FramedIPv6Route_Get(p))
}

func FramedIPv6Route_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[FramedIPv6Route_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedIPv6Route_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[FramedIPv6Route_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedIPv6Route_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(FramedIPv6Route_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FramedIPv6Route_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(FramedIPv6Route_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FramedIPv6Route_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(FramedIPv6Route_Type, a)
	return
}

func FramedIPv6Route_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(FramedIPv6Route_Type, a)
	return
}

func FramedIPv6Pool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(FramedIPv6Pool_Type, a)
	return nil
}

func FramedIPv6Pool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(FramedIPv6Pool_Type, a)
	return nil
}

func FramedIPv6Pool_Get(p *radius.Packet) (value []byte) {
	value, _ = FramedIPv6Pool_Lookup(p)
	return
}

func FramedIPv6Pool_GetString(p *radius.Packet) (value string) {
	return string(FramedIPv6Pool_Get(p))
}

func FramedIPv6Pool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[FramedIPv6Pool_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedIPv6Pool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[FramedIPv6Pool_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedIPv6Pool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(FramedIPv6Pool_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FramedIPv6Pool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(FramedIPv6Pool_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FramedIPv6Pool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(FramedIPv6Pool_Type, a)
	return
}

func FramedIPv6Pool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(FramedIPv6Pool_Type, a)
	return
}
