// Code generated by radius-dict-gen. DO NOT EDIT.

package main

import (
	"fbc/lib/go/radius"
)

const (
	TestStruct_Type radius.Type = 4
)

type TestStruct struct {
	Field1 string
	Field2 uint64
}

const (
	TestStruct_Field1_Type radius.Type = 1
	TestStruct_Field2_Type radius.Type = 2
)

func newTestStruct(value TestStruct) (attribute radius.Attribute, err error) {
	var typedAttributes []radius.TypedAttribute
	var a radius.Attribute

	a, err = radius.NewString(value.Field1)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{TestStruct_Field1_Type, a})

	a = radius.NewInteger64(value.Field2)
	if err != nil {
		return nil, err
	}
	typedAttributes = append(typedAttributes, radius.TypedAttribute{TestStruct_Field2_Type, a})

	attribute, err = radius.NewTLV(typedAttributes)
	if err != nil {
		return nil, err
	}
	return
}

func setTestStruct(a radius.Attribute) (values []TestStruct, err error) {
	var attributes radius.Attributes
	valuesLen := -1

	attributes, err = radius.TLV(a)
	if err != nil {
		return
	}

	if val, ok := attributes[TestStruct_Field1_Type]; ok {
		valuesLen = len(val)
		values = make([]TestStruct, valuesLen)
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].Field1 = radius.String(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}

	if val, ok := attributes[TestStruct_Field2_Type]; ok {
		if len(val) != valuesLen {
			err = radius.ErrTLVAttribute
		} else {
			for i := range val {
				values[i].Field2, err = radius.Integer64(val[i])
			}
		}
	} else {
		err = radius.ErrTLVAttribute
	}
	if err != nil {
		return
	}
	return
}

func TestStruct_Add(p *radius.Packet, values []TestStruct) error {
	var attribute radius.Attribute
	if len(values) < 1 {
		return radius.ErrEmptyStruct
	}
	for _, value := range values {
		_attr, _err := newTestStruct(value)
		if _err != nil {
			return _err
		}
		attribute = append(attribute, _attr...)
	}
	p.Add(TestStruct_Type, attribute)
	return nil
}

func TestStruct_Get(p *radius.Packet) (value []TestStruct) {
	value, _ = TestStruct_Lookup(p)
	return
}

func TestStruct_Gets(p *radius.Packet) (values [][]TestStruct, err error) {
	var value []TestStruct
	for _, attr := range p.Attributes[TestStruct_Type] {
		value, err = setTestStruct(attr)
		if err != nil {
			return
		}
		values = append(values, []TestStruct(value))
	}
	return
}

func TestStruct_Lookup(p *radius.Packet) (values []TestStruct, err error) {
	a, ok := p.Lookup(TestStruct_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	values, err = setTestStruct(a)
	return
}

func TestStruct_Set(p *radius.Packet, values []TestStruct) error {
	var attribute radius.Attribute
	for _, value := range values {
		_attr, _err := newTestStruct(value)
		if _err != nil {
			return _err
		}
		attribute = append(attribute, _attr...)
	}
	p.Set(TestStruct_Type, attribute)
	return nil
}
