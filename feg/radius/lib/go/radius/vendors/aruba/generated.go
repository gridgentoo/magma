// Code generated by radius-dict-gen. DO NOT EDIT.

package aruba

import (
	"net"
	"strconv"

	"fbc/lib/go/radius"
	"fbc/lib/go/radius/rfc2865"
)

const (
	_Aruba_VendorID = 14823
)

func _Aruba_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Aruba_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return nil
}

func _Aruba_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Aruba_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Aruba_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Aruba_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return nil, false
}

func _Aruba_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Aruba_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Aruba_AddVendor(p, typ, attr)
}

func ArubaUserRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 1, a)
}

func ArubaUserRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 1, a)
}

func ArubaUserRole_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaUserRole_Lookup(p)
	return
}

func ArubaUserRole_GetString(p *radius.Packet) (value string) {
	return string(ArubaUserRole_Get(p))
}

func ArubaUserRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaUserRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaUserRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaUserRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaUserRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 1, a)
}

func ArubaUserRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 1, a)
}

type ArubaUserVlan uint32

var ArubaUserVlan_Strings = map[ArubaUserVlan]string{}

func (a ArubaUserVlan) String() string {
	if str, ok := ArubaUserVlan_Strings[a]; ok {
		return str
	}
	return "ArubaUserVlan(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaUserVlan_Add(p *radius.Packet, value ArubaUserVlan) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 2, a)
}

func ArubaUserVlan_Get(p *radius.Packet) (value ArubaUserVlan) {
	value, _ = ArubaUserVlan_Lookup(p)
	return
}

func ArubaUserVlan_Gets(p *radius.Packet) (values []ArubaUserVlan, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaUserVlan(i))
	}
	return
}

func ArubaUserVlan_Lookup(p *radius.Packet) (value ArubaUserVlan, err error) {
	a, ok := _Aruba_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaUserVlan(i)
	return
}

func ArubaUserVlan_Set(p *radius.Packet, value ArubaUserVlan) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 2, a)
}

type ArubaPrivAdminUser uint32

var ArubaPrivAdminUser_Strings = map[ArubaPrivAdminUser]string{}

func (a ArubaPrivAdminUser) String() string {
	if str, ok := ArubaPrivAdminUser_Strings[a]; ok {
		return str
	}
	return "ArubaPrivAdminUser(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaPrivAdminUser_Add(p *radius.Packet, value ArubaPrivAdminUser) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 3, a)
}

func ArubaPrivAdminUser_Get(p *radius.Packet) (value ArubaPrivAdminUser) {
	value, _ = ArubaPrivAdminUser_Lookup(p)
	return
}

func ArubaPrivAdminUser_Gets(p *radius.Packet) (values []ArubaPrivAdminUser, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaPrivAdminUser(i))
	}
	return
}

func ArubaPrivAdminUser_Lookup(p *radius.Packet) (value ArubaPrivAdminUser, err error) {
	a, ok := _Aruba_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaPrivAdminUser(i)
	return
}

func ArubaPrivAdminUser_Set(p *radius.Packet, value ArubaPrivAdminUser) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 3, a)
}

func ArubaAdminRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 4, a)
}

func ArubaAdminRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 4, a)
}

func ArubaAdminRole_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaAdminRole_Lookup(p)
	return
}

func ArubaAdminRole_GetString(p *radius.Packet) (value string) {
	return string(ArubaAdminRole_Get(p))
}

func ArubaAdminRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAdminRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAdminRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaAdminRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaAdminRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 4, a)
}

func ArubaAdminRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 4, a)
}

func ArubaEssidName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 5, a)
}

func ArubaEssidName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 5, a)
}

func ArubaEssidName_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaEssidName_Lookup(p)
	return
}

func ArubaEssidName_GetString(p *radius.Packet) (value string) {
	return string(ArubaEssidName_Get(p))
}

func ArubaEssidName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaEssidName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaEssidName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaEssidName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaEssidName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 5, a)
}

func ArubaEssidName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 5, a)
}

func ArubaLocationID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 6, a)
}

func ArubaLocationID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 6, a)
}

func ArubaLocationID_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaLocationID_Lookup(p)
	return
}

func ArubaLocationID_GetString(p *radius.Packet) (value string) {
	return string(ArubaLocationID_Get(p))
}

func ArubaLocationID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaLocationID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaLocationID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaLocationID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaLocationID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 6, a)
}

func ArubaLocationID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 6, a)
}

func ArubaPortIdentifier_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 7, a)
}

func ArubaPortIdentifier_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 7, a)
}

func ArubaPortIdentifier_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaPortIdentifier_Lookup(p)
	return
}

func ArubaPortIdentifier_GetString(p *radius.Packet) (value string) {
	return string(ArubaPortIdentifier_Get(p))
}

func ArubaPortIdentifier_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaPortIdentifier_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaPortIdentifier_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaPortIdentifier_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaPortIdentifier_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 7, a)
}

func ArubaPortIdentifier_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 7, a)
}

func ArubaMMSUserTemplate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 8, a)
}

func ArubaMMSUserTemplate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 8, a)
}

func ArubaMMSUserTemplate_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMMSUserTemplate_Lookup(p)
	return
}

func ArubaMMSUserTemplate_GetString(p *radius.Packet) (value string) {
	return string(ArubaMMSUserTemplate_Get(p))
}

func ArubaMMSUserTemplate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMMSUserTemplate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMMSUserTemplate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMMSUserTemplate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMMSUserTemplate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 8, a)
}

func ArubaMMSUserTemplate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 8, a)
}

func ArubaNamedUserVlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 9, a)
}

func ArubaNamedUserVlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 9, a)
}

func ArubaNamedUserVlan_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaNamedUserVlan_Lookup(p)
	return
}

func ArubaNamedUserVlan_GetString(p *radius.Packet) (value string) {
	return string(ArubaNamedUserVlan_Get(p))
}

func ArubaNamedUserVlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaNamedUserVlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaNamedUserVlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaNamedUserVlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaNamedUserVlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 9, a)
}

func ArubaNamedUserVlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 9, a)
}

func ArubaAPGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 10, a)
}

func ArubaAPGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 10, a)
}

func ArubaAPGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaAPGroup_Lookup(p)
	return
}

func ArubaAPGroup_GetString(p *radius.Packet) (value string) {
	return string(ArubaAPGroup_Get(p))
}

func ArubaAPGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAPGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAPGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaAPGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaAPGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 10, a)
}

func ArubaAPGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 10, a)
}

func ArubaFramedIPv6Address_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 11, a)
}

func ArubaFramedIPv6Address_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 11, a)
}

func ArubaFramedIPv6Address_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaFramedIPv6Address_Lookup(p)
	return
}

func ArubaFramedIPv6Address_GetString(p *radius.Packet) (value string) {
	return string(ArubaFramedIPv6Address_Get(p))
}

func ArubaFramedIPv6Address_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaFramedIPv6Address_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaFramedIPv6Address_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaFramedIPv6Address_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaFramedIPv6Address_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 11, a)
}

func ArubaFramedIPv6Address_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 11, a)
}

func ArubaDeviceType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 12, a)
}

func ArubaDeviceType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 12, a)
}

func ArubaDeviceType_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaDeviceType_Lookup(p)
	return
}

func ArubaDeviceType_GetString(p *radius.Packet) (value string) {
	return string(ArubaDeviceType_Get(p))
}

func ArubaDeviceType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaDeviceType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaDeviceType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaDeviceType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaDeviceType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 12, a)
}

func ArubaDeviceType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 12, a)
}

type ArubaNoDHCPFingerprint uint32

var ArubaNoDHCPFingerprint_Strings = map[ArubaNoDHCPFingerprint]string{}

func (a ArubaNoDHCPFingerprint) String() string {
	if str, ok := ArubaNoDHCPFingerprint_Strings[a]; ok {
		return str
	}
	return "ArubaNoDHCPFingerprint(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaNoDHCPFingerprint_Add(p *radius.Packet, value ArubaNoDHCPFingerprint) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 14, a)
}

func ArubaNoDHCPFingerprint_Get(p *radius.Packet) (value ArubaNoDHCPFingerprint) {
	value, _ = ArubaNoDHCPFingerprint_Lookup(p)
	return
}

func ArubaNoDHCPFingerprint_Gets(p *radius.Packet) (values []ArubaNoDHCPFingerprint, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaNoDHCPFingerprint(i))
	}
	return
}

func ArubaNoDHCPFingerprint_Lookup(p *radius.Packet) (value ArubaNoDHCPFingerprint, err error) {
	a, ok := _Aruba_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaNoDHCPFingerprint(i)
	return
}

func ArubaNoDHCPFingerprint_Set(p *radius.Packet, value ArubaNoDHCPFingerprint) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 14, a)
}

func ArubaMdpsDeviceUdid_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 15, a)
}

func ArubaMdpsDeviceUdid_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 15, a)
}

func ArubaMdpsDeviceUdid_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceUdid_Lookup(p)
	return
}

func ArubaMdpsDeviceUdid_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceUdid_Get(p))
}

func ArubaMdpsDeviceUdid_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceUdid_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceUdid_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceUdid_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceUdid_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 15, a)
}

func ArubaMdpsDeviceUdid_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 15, a)
}

func ArubaMdpsDeviceImei_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 16, a)
}

func ArubaMdpsDeviceImei_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 16, a)
}

func ArubaMdpsDeviceImei_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceImei_Lookup(p)
	return
}

func ArubaMdpsDeviceImei_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceImei_Get(p))
}

func ArubaMdpsDeviceImei_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceImei_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceImei_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceImei_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceImei_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 16, a)
}

func ArubaMdpsDeviceImei_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 16, a)
}

func ArubaMdpsDeviceIccid_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 17, a)
}

func ArubaMdpsDeviceIccid_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 17, a)
}

func ArubaMdpsDeviceIccid_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceIccid_Lookup(p)
	return
}

func ArubaMdpsDeviceIccid_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceIccid_Get(p))
}

func ArubaMdpsDeviceIccid_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceIccid_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceIccid_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceIccid_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceIccid_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 17, a)
}

func ArubaMdpsDeviceIccid_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 17, a)
}

type ArubaMdpsMaxDevices uint32

var ArubaMdpsMaxDevices_Strings = map[ArubaMdpsMaxDevices]string{}

func (a ArubaMdpsMaxDevices) String() string {
	if str, ok := ArubaMdpsMaxDevices_Strings[a]; ok {
		return str
	}
	return "ArubaMdpsMaxDevices(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaMdpsMaxDevices_Add(p *radius.Packet, value ArubaMdpsMaxDevices) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 18, a)
}

func ArubaMdpsMaxDevices_Get(p *radius.Packet) (value ArubaMdpsMaxDevices) {
	value, _ = ArubaMdpsMaxDevices_Lookup(p)
	return
}

func ArubaMdpsMaxDevices_Gets(p *radius.Packet) (values []ArubaMdpsMaxDevices, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaMdpsMaxDevices(i))
	}
	return
}

func ArubaMdpsMaxDevices_Lookup(p *radius.Packet) (value ArubaMdpsMaxDevices, err error) {
	a, ok := _Aruba_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaMdpsMaxDevices(i)
	return
}

func ArubaMdpsMaxDevices_Set(p *radius.Packet, value ArubaMdpsMaxDevices) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 18, a)
}

func ArubaMdpsDeviceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 19, a)
}

func ArubaMdpsDeviceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 19, a)
}

func ArubaMdpsDeviceName_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceName_Lookup(p)
	return
}

func ArubaMdpsDeviceName_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceName_Get(p))
}

func ArubaMdpsDeviceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 19, a)
}

func ArubaMdpsDeviceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 19, a)
}

func ArubaMdpsDeviceProduct_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 20, a)
}

func ArubaMdpsDeviceProduct_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 20, a)
}

func ArubaMdpsDeviceProduct_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceProduct_Lookup(p)
	return
}

func ArubaMdpsDeviceProduct_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceProduct_Get(p))
}

func ArubaMdpsDeviceProduct_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceProduct_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceProduct_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceProduct_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceProduct_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 20, a)
}

func ArubaMdpsDeviceProduct_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 20, a)
}

func ArubaMdpsDeviceVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 21, a)
}

func ArubaMdpsDeviceVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 21, a)
}

func ArubaMdpsDeviceVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceVersion_Lookup(p)
	return
}

func ArubaMdpsDeviceVersion_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceVersion_Get(p))
}

func ArubaMdpsDeviceVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 21, a)
}

func ArubaMdpsDeviceVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 21, a)
}

func ArubaMdpsDeviceSerial_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 22, a)
}

func ArubaMdpsDeviceSerial_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 22, a)
}

func ArubaMdpsDeviceSerial_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceSerial_Lookup(p)
	return
}

func ArubaMdpsDeviceSerial_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceSerial_Get(p))
}

func ArubaMdpsDeviceSerial_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceSerial_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceSerial_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceSerial_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceSerial_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 22, a)
}

func ArubaMdpsDeviceSerial_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 22, a)
}

func ArubaCPPMRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 23, a)
}

func ArubaCPPMRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 23, a)
}

func ArubaCPPMRole_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaCPPMRole_Lookup(p)
	return
}

func ArubaCPPMRole_GetString(p *radius.Packet) (value string) {
	return string(ArubaCPPMRole_Get(p))
}

func ArubaCPPMRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaCPPMRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaCPPMRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaCPPMRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaCPPMRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 23, a)
}

func ArubaCPPMRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 23, a)
}

func ArubaAirGroupUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 24, a)
}

func ArubaAirGroupUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 24, a)
}

func ArubaAirGroupUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaAirGroupUserName_Lookup(p)
	return
}

func ArubaAirGroupUserName_GetString(p *radius.Packet) (value string) {
	return string(ArubaAirGroupUserName_Get(p))
}

func ArubaAirGroupUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaAirGroupUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaAirGroupUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 24, a)
}

func ArubaAirGroupUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 24, a)
}

func ArubaAirGroupSharedUser_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 25, a)
}

func ArubaAirGroupSharedUser_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 25, a)
}

func ArubaAirGroupSharedUser_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaAirGroupSharedUser_Lookup(p)
	return
}

func ArubaAirGroupSharedUser_GetString(p *radius.Packet) (value string) {
	return string(ArubaAirGroupSharedUser_Get(p))
}

func ArubaAirGroupSharedUser_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupSharedUser_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupSharedUser_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaAirGroupSharedUser_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaAirGroupSharedUser_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 25, a)
}

func ArubaAirGroupSharedUser_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 25, a)
}

func ArubaAirGroupSharedRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 26, a)
}

func ArubaAirGroupSharedRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 26, a)
}

func ArubaAirGroupSharedRole_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaAirGroupSharedRole_Lookup(p)
	return
}

func ArubaAirGroupSharedRole_GetString(p *radius.Packet) (value string) {
	return string(ArubaAirGroupSharedRole_Get(p))
}

func ArubaAirGroupSharedRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupSharedRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupSharedRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaAirGroupSharedRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaAirGroupSharedRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 26, a)
}

func ArubaAirGroupSharedRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 26, a)
}

type ArubaAirGroupDeviceType uint32

var ArubaAirGroupDeviceType_Strings = map[ArubaAirGroupDeviceType]string{}

func (a ArubaAirGroupDeviceType) String() string {
	if str, ok := ArubaAirGroupDeviceType_Strings[a]; ok {
		return str
	}
	return "ArubaAirGroupDeviceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaAirGroupDeviceType_Add(p *radius.Packet, value ArubaAirGroupDeviceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 27, a)
}

func ArubaAirGroupDeviceType_Get(p *radius.Packet) (value ArubaAirGroupDeviceType) {
	value, _ = ArubaAirGroupDeviceType_Lookup(p)
	return
}

func ArubaAirGroupDeviceType_Gets(p *radius.Packet) (values []ArubaAirGroupDeviceType, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 27) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaAirGroupDeviceType(i))
	}
	return
}

func ArubaAirGroupDeviceType_Lookup(p *radius.Packet) (value ArubaAirGroupDeviceType, err error) {
	a, ok := _Aruba_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaAirGroupDeviceType(i)
	return
}

func ArubaAirGroupDeviceType_Set(p *radius.Packet, value ArubaAirGroupDeviceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 27, a)
}

func ArubaAuthSurvivability_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 28, a)
}

func ArubaAuthSurvivability_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 28, a)
}

func ArubaAuthSurvivability_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaAuthSurvivability_Lookup(p)
	return
}

func ArubaAuthSurvivability_GetString(p *radius.Packet) (value string) {
	return string(ArubaAuthSurvivability_Get(p))
}

func ArubaAuthSurvivability_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAuthSurvivability_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAuthSurvivability_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaAuthSurvivability_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaAuthSurvivability_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 28, a)
}

func ArubaAuthSurvivability_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 28, a)
}

func ArubaASUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 29, a)
}

func ArubaASUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 29, a)
}

func ArubaASUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaASUserName_Lookup(p)
	return
}

func ArubaASUserName_GetString(p *radius.Packet) (value string) {
	return string(ArubaASUserName_Get(p))
}

func ArubaASUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaASUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaASUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaASUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaASUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 29, a)
}

func ArubaASUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 29, a)
}

func ArubaASCredentialHash_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 30, a)
}

func ArubaASCredentialHash_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 30, a)
}

func ArubaASCredentialHash_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaASCredentialHash_Lookup(p)
	return
}

func ArubaASCredentialHash_GetString(p *radius.Packet) (value string) {
	return string(ArubaASCredentialHash_Get(p))
}

func ArubaASCredentialHash_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaASCredentialHash_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaASCredentialHash_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaASCredentialHash_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaASCredentialHash_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 30, a)
}

func ArubaASCredentialHash_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 30, a)
}

func ArubaWorkSpaceAppName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 31, a)
}

func ArubaWorkSpaceAppName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 31, a)
}

func ArubaWorkSpaceAppName_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaWorkSpaceAppName_Lookup(p)
	return
}

func ArubaWorkSpaceAppName_GetString(p *radius.Packet) (value string) {
	return string(ArubaWorkSpaceAppName_Get(p))
}

func ArubaWorkSpaceAppName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaWorkSpaceAppName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaWorkSpaceAppName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaWorkSpaceAppName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaWorkSpaceAppName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 31, a)
}

func ArubaWorkSpaceAppName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 31, a)
}

func ArubaMdpsProvisioningSettings_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 32, a)
}

func ArubaMdpsProvisioningSettings_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 32, a)
}

func ArubaMdpsProvisioningSettings_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsProvisioningSettings_Lookup(p)
	return
}

func ArubaMdpsProvisioningSettings_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsProvisioningSettings_Get(p))
}

func ArubaMdpsProvisioningSettings_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsProvisioningSettings_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsProvisioningSettings_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsProvisioningSettings_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsProvisioningSettings_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 32, a)
}

func ArubaMdpsProvisioningSettings_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 32, a)
}

func ArubaMdpsDeviceProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 33, a)
}

func ArubaMdpsDeviceProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 33, a)
}

func ArubaMdpsDeviceProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaMdpsDeviceProfile_Lookup(p)
	return
}

func ArubaMdpsDeviceProfile_GetString(p *radius.Packet) (value string) {
	return string(ArubaMdpsDeviceProfile_Get(p))
}

func ArubaMdpsDeviceProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaMdpsDeviceProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaMdpsDeviceProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaMdpsDeviceProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 33, a)
}

func ArubaMdpsDeviceProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 33, a)
}

func ArubaAPIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 34, a)
}

func ArubaAPIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = ArubaAPIPAddress_Lookup(p)
	return
}

func ArubaAPIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aruba_GetsVendor(p, 34) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAPIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aruba_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ArubaAPIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 34, a)
}

func ArubaAirGroupSharedGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 35, a)
}

func ArubaAirGroupSharedGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 35, a)
}

func ArubaAirGroupSharedGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaAirGroupSharedGroup_Lookup(p)
	return
}

func ArubaAirGroupSharedGroup_GetString(p *radius.Packet) (value string) {
	return string(ArubaAirGroupSharedGroup_Get(p))
}

func ArubaAirGroupSharedGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupSharedGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaAirGroupSharedGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaAirGroupSharedGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaAirGroupSharedGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 35, a)
}

func ArubaAirGroupSharedGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 35, a)
}

func ArubaUserGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 36, a)
}

func ArubaUserGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 36, a)
}

func ArubaUserGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaUserGroup_Lookup(p)
	return
}

func ArubaUserGroup_GetString(p *radius.Packet) (value string) {
	return string(ArubaUserGroup_Get(p))
}

func ArubaUserGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaUserGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaUserGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaUserGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaUserGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 36, a)
}

func ArubaUserGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 36, a)
}

func ArubaNetworkSSOToken_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 37, a)
}

func ArubaNetworkSSOToken_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_AddVendor(p, 37, a)
}

func ArubaNetworkSSOToken_Get(p *radius.Packet) (value []byte) {
	value, _ = ArubaNetworkSSOToken_Lookup(p)
	return
}

func ArubaNetworkSSOToken_GetString(p *radius.Packet) (value string) {
	return string(ArubaNetworkSSOToken_Get(p))
}

func ArubaNetworkSSOToken_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aruba_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaNetworkSSOToken_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aruba_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ArubaNetworkSSOToken_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aruba_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ArubaNetworkSSOToken_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aruba_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ArubaNetworkSSOToken_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 37, a)
}

func ArubaNetworkSSOToken_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aruba_SetVendor(p, 37, a)
}

type ArubaAirGroupVersion uint32

var ArubaAirGroupVersion_Strings = map[ArubaAirGroupVersion]string{}

func (a ArubaAirGroupVersion) String() string {
	if str, ok := ArubaAirGroupVersion_Strings[a]; ok {
		return str
	}
	return "ArubaAirGroupVersion(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaAirGroupVersion_Add(p *radius.Packet, value ArubaAirGroupVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 38, a)
}

func ArubaAirGroupVersion_Get(p *radius.Packet) (value ArubaAirGroupVersion) {
	value, _ = ArubaAirGroupVersion_Lookup(p)
	return
}

func ArubaAirGroupVersion_Gets(p *radius.Packet) (values []ArubaAirGroupVersion, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaAirGroupVersion(i))
	}
	return
}

func ArubaAirGroupVersion_Lookup(p *radius.Packet) (value ArubaAirGroupVersion, err error) {
	a, ok := _Aruba_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaAirGroupVersion(i)
	return
}

func ArubaAirGroupVersion_Set(p *radius.Packet, value ArubaAirGroupVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 38, a)
}

type ArubaAuthSurvMethod uint32

var ArubaAuthSurvMethod_Strings = map[ArubaAuthSurvMethod]string{}

func (a ArubaAuthSurvMethod) String() string {
	if str, ok := ArubaAuthSurvMethod_Strings[a]; ok {
		return str
	}
	return "ArubaAuthSurvMethod(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaAuthSurvMethod_Add(p *radius.Packet, value ArubaAuthSurvMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 39, a)
}

func ArubaAuthSurvMethod_Get(p *radius.Packet) (value ArubaAuthSurvMethod) {
	value, _ = ArubaAuthSurvMethod_Lookup(p)
	return
}

func ArubaAuthSurvMethod_Gets(p *radius.Packet) (values []ArubaAuthSurvMethod, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaAuthSurvMethod(i))
	}
	return
}

func ArubaAuthSurvMethod_Lookup(p *radius.Packet) (value ArubaAuthSurvMethod, err error) {
	a, ok := _Aruba_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaAuthSurvMethod(i)
	return
}

func ArubaAuthSurvMethod_Set(p *radius.Packet, value ArubaAuthSurvMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 39, a)
}

type ArubaPortBounceHost uint32

var ArubaPortBounceHost_Strings = map[ArubaPortBounceHost]string{}

func (a ArubaPortBounceHost) String() string {
	if str, ok := ArubaPortBounceHost_Strings[a]; ok {
		return str
	}
	return "ArubaPortBounceHost(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ArubaPortBounceHost_Add(p *radius.Packet, value ArubaPortBounceHost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_AddVendor(p, 40, a)
}

func ArubaPortBounceHost_Get(p *radius.Packet) (value ArubaPortBounceHost) {
	value, _ = ArubaPortBounceHost_Lookup(p)
	return
}

func ArubaPortBounceHost_Gets(p *radius.Packet) (values []ArubaPortBounceHost, err error) {
	var i uint32
	for _, attr := range _Aruba_GetsVendor(p, 40) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ArubaPortBounceHost(i))
	}
	return
}

func ArubaPortBounceHost_Lookup(p *radius.Packet) (value ArubaPortBounceHost, err error) {
	a, ok := _Aruba_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ArubaPortBounceHost(i)
	return
}

func ArubaPortBounceHost_Set(p *radius.Packet, value ArubaPortBounceHost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aruba_SetVendor(p, 40, a)
}
