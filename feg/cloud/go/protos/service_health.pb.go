// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feg/protos/service_health.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DisableMessage struct {
	DisablePeriodSecs    uint64   `protobuf:"varint,1,opt,name=disablePeriodSecs,proto3" json:"disablePeriodSecs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableMessage) Reset()         { *m = DisableMessage{} }
func (m *DisableMessage) String() string { return proto.CompactTextString(m) }
func (*DisableMessage) ProtoMessage()    {}
func (*DisableMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e31141c9fec665, []int{0}
}

func (m *DisableMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableMessage.Unmarshal(m, b)
}
func (m *DisableMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableMessage.Marshal(b, m, deterministic)
}
func (m *DisableMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableMessage.Merge(m, src)
}
func (m *DisableMessage) XXX_Size() int {
	return xxx_messageInfo_DisableMessage.Size(m)
}
func (m *DisableMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DisableMessage proto.InternalMessageInfo

func (m *DisableMessage) GetDisablePeriodSecs() uint64 {
	if m != nil {
		return m.DisablePeriodSecs
	}
	return 0
}

func init() {
	proto.RegisterType((*DisableMessage)(nil), "magma.feg.DisableMessage")
}

func init() { proto.RegisterFile("feg/protos/service_health.proto", fileDescriptor_35e31141c9fec665) }

var fileDescriptor_35e31141c9fec665 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x4b, 0x4d, 0xd7,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x2f, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x8d, 0xcf,
	0x48, 0x4d, 0xcc, 0x29, 0xc9, 0xd0, 0x03, 0x8b, 0x0a, 0x71, 0xe6, 0x26, 0xa6, 0xe7, 0x26, 0xea,
	0xa5, 0xa5, 0xa6, 0x4b, 0x49, 0xe6, 0x17, 0x25, 0x5b, 0x14, 0xc1, 0x54, 0x27, 0xe7, 0xe7, 0xe6,
	0xe6, 0xe7, 0x41, 0x54, 0x49, 0x89, 0x23, 0x19, 0x83, 0xac, 0x5d, 0xc9, 0x8e, 0x8b, 0xcf, 0x25,
	0xb3, 0x38, 0x31, 0x29, 0x27, 0xd5, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x48, 0x87, 0x4b,
	0x30, 0x05, 0x22, 0x12, 0x90, 0x5a, 0x94, 0x99, 0x9f, 0x12, 0x9c, 0x9a, 0x5c, 0x2c, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x12, 0x84, 0x29, 0x61, 0xb4, 0x97, 0x91, 0x8b, 0x37, 0x18, 0xe2, 0x2e, 0x0f,
	0xb0, 0xb9, 0x42, 0x96, 0x5c, 0xec, 0x50, 0x13, 0x85, 0x24, 0xf5, 0xe0, 0x8e, 0xd3, 0x43, 0xb5,
	0x45, 0x4a, 0x10, 0x2a, 0x05, 0x76, 0xb2, 0x5e, 0x58, 0x7e, 0x66, 0x8a, 0x12, 0x83, 0x90, 0x01,
	0x17, 0x9b, 0x6b, 0x1e, 0x58, 0x27, 0xa6, 0x34, 0x76, 0x1d, 0xf6, 0x5c, 0xfc, 0xee, 0xa9, 0x25,
	0x10, 0x9b, 0x83, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0xb1, 0x69, 0x15, 0x47, 0x72, 0x07, 0xb2, 0x5a,
	0x25, 0x06, 0x27, 0xe9, 0x28, 0x49, 0xb0, 0x9c, 0x3e, 0x28, 0x80, 0x92, 0x73, 0xf2, 0x4b, 0x53,
	0xf4, 0xd3, 0xf3, 0xa1, 0x21, 0x95, 0xc4, 0x06, 0xa6, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x79, 0xd5, 0x04, 0x3e, 0x85, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceHealthClient is the client API for ServiceHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceHealthClient interface {
	// Disable service functionality for the time specified in the request
	Disable(ctx context.Context, in *DisableMessage, opts ...grpc.CallOption) (*protos.Void, error)
	// Enable service functionality
	Enable(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error)
	// Get health status of the service
	GetHealthStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*HealthStatus, error)
}

type serviceHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceHealthClient(cc grpc.ClientConnInterface) ServiceHealthClient {
	return &serviceHealthClient{cc}
}

func (c *serviceHealthClient) Disable(ctx context.Context, in *DisableMessage, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.ServiceHealth/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) Enable(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.ServiceHealth/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) GetHealthStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := c.cc.Invoke(ctx, "/magma.feg.ServiceHealth/GetHealthStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceHealthServer is the server API for ServiceHealth service.
type ServiceHealthServer interface {
	// Disable service functionality for the time specified in the request
	Disable(context.Context, *DisableMessage) (*protos.Void, error)
	// Enable service functionality
	Enable(context.Context, *protos.Void) (*protos.Void, error)
	// Get health status of the service
	GetHealthStatus(context.Context, *protos.Void) (*HealthStatus, error)
}

// UnimplementedServiceHealthServer can be embedded to have forward compatible implementations.
type UnimplementedServiceHealthServer struct {
}

func (*UnimplementedServiceHealthServer) Disable(ctx context.Context, req *DisableMessage) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (*UnimplementedServiceHealthServer) Enable(ctx context.Context, req *protos.Void) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedServiceHealthServer) GetHealthStatus(ctx context.Context, req *protos.Void) (*HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthStatus not implemented")
}

func RegisterServiceHealthServer(s *grpc.Server, srv ServiceHealthServer) {
	s.RegisterService(&_ServiceHealth_serviceDesc, srv)
}

func _ServiceHealth_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.ServiceHealth/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).Disable(ctx, req.(*DisableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.ServiceHealth/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).Enable(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_GetHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).GetHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.ServiceHealth/GetHealthStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).GetHealthStatus(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceHealth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.ServiceHealth",
	HandlerType: (*ServiceHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disable",
			Handler:    _ServiceHealth_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _ServiceHealth_Enable_Handler,
		},
		{
			MethodName: "GetHealthStatus",
			Handler:    _ServiceHealth_GetHealthStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/service_health.proto",
}
