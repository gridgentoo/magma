// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.
syntax = "proto3";

package feg;
option go_package = "types";

message DiamClientConfig {
    string protocol = 1;
    string address = 2;
    uint32 retransmits = 3;
    uint32 watchdog_interval = 4;
    uint32 retry_count = 5;
    string local_address = 6;
    string product_name = 7;
    string realm = 8;
    string host = 9;
    string dest_realm = 10;
    string dest_host = 11;
}

message DiamServerConfig {
    string protocol = 1;
    string address = 2;
    string local_address = 3;
    string dest_host = 4;
    string dest_realm = 5;
}

message S6aConfig {
    DiamClientConfig server = 1;
}

message GxConfig {
    DiamClientConfig server = 1;
}

enum GyInitMethod {
    RESERVED = 0;
    PER_SESSION = 1;
    PER_KEY = 2;
}

message GyConfig {
    DiamClientConfig server = 1;
    GyInitMethod init_method = 2;
}

message SwxConfig {
    DiamClientConfig server = 1;
    bool verify_authorization = 2;
    uint32 CacheTTLSeconds = 3;
}

message HSSConfig {
    DiamServerConfig server = 1;
    bytes lte_auth_op = 2;
    bytes lte_auth_amf = 3;

    message SubscriptionProfile {
        uint64 max_ul_bit_rate = 1;
        uint64 max_dl_bit_rate = 2;
    }
    map<string, SubscriptionProfile> sub_profiles = 4;
    SubscriptionProfile default_sub_profile = 5;
    bool stream_subscribers = 6;
}

message HealthConfig {
    repeated string health_services = 1;
    uint32 update_interval_secs = 2;
    uint32 cloud_disable_period_secs = 3;
    uint32 local_disable_period_secs = 4;
    uint32 update_failure_threshold = 5;
    float request_failure_threshold = 6;
    uint32 minimum_request_threshold = 7;
    float cpu_utilization_threshold = 8;
    float memory_available_threshold = 9;
}

message EapAkaConfig {
    message Timeouts {
        uint32 ChallengeMs = 1;
        uint32 ErrorNotificationMs = 2;
        uint32 SessionMs = 3;
        uint32 SessionAuthenticatedMs = 4;
    }
    Timeouts timeout = 1;
    repeated string PlmnIds = 2;
}


message AAAConfig {
    uint32 IdleSessionTimeoutMs = 1; // Idle session TTL
    bool AccountingEnabled = 2; // enable accounting & maintain long term user sessions
    bool CreateSessionOnAuth = 3; // Postpone Auth success until successful accounting CreateSession completion
}

message Config {
    S6aConfig s6a = 4;
    GxConfig gx = 5;
    GyConfig gy = 6;
    repeated string served_network_ids = 7;
    HSSConfig hss = 8;
    SwxConfig swx = 9;
    HealthConfig health = 10;
    EapAkaConfig eap_aka = 11;
    AAAConfig aaa_server = 12;
}
