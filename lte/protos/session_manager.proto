// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.

syntax = "proto3";

import "orc8r/protos/common.proto";
import "lte/protos/policydb.proto";
import "lte/protos/subscriberdb.proto";
import "google/protobuf/timestamp.proto";

package magma.lte;
option go_package = "magma/lte/cloud/go/protos";

message RuleRecord {
  string sid = 1; // Session ID - specified as IMSI
  string rule_id = 2;
  uint64 bytes_tx = 3;
  uint64 bytes_rx = 4;
}

message RuleRecordTable {
  repeated RuleRecord records = 1;
  uint64 epoch = 2;
}

///////////////////
// LocalSessionManager service
///////////////////
enum RATType {
  TGPP_LTE = 0;  // will map to 06 (EUTRAN, 3GPP TS 29.274) for Gy, 1004 (EUTRAN, 3GPP TS 29.212) S6a, Gx
  TGPP_WLAN = 1; // will map to 03 (WLAN, 3GPP TS 29.274) for Gy, 0 (WLAN, 3GPP TS 29.212) S6a, Gx
}

message LocalCreateSessionRequest {
  SubscriberID sid = 1;
  string ue_ipv4 = 2;
  string spgw_ipv4 = 3;
  string apn = 4;
  string imei = 6;
  string plmn_id = 7;
  string imsi_plmn_id = 8;
  bytes user_location = 9;
  QosInformationRequest qos_info = 10;
  bytes msisdn = 11;
  RATType rat_type = 12;
  bytes hardware_addr = 13; // MAC Address for WLAN
  string radius_session_id = 14;
  uint32 bearer_id = 15;
}

message LocalCreateSessionResponse {
  string session_id = 1;
}

message LocalEndSessionRequest {
  SubscriberID sid = 1;
  string apn = 2;
}

message LocalEndSessionResponse {
}

message ChargingReAuthRequest {
  string session_id = 1;
  uint32 charging_key = 2;
  string sid = 3;
  enum Type {
    SINGLE_SERVICE = 0;
    ENTIRE_SESSION = 1;
  }
  Type type = 4;
  ServiceIdentifier service_identifier = 5;
}

message ChargingReAuthAnswer {
  enum Result {
    UPDATE_INITIATED = 0;
    UPDATE_NOT_NEEDED = 1;
    SESSION_NOT_FOUND = 2;
    OTHER_FAILURE = 3;
  }
  Result result = 1;
}

enum EventTrigger {
  SGSN_CHANGE = 0;
  QOS_CHANGE = 1;
  RAT_CHANGE = 2;
  TFT_CHANGE = 3;
  PLMN_CHANGE = 4;
  LOSS_OF_BEARER = 5;
  RECOVERY_OF_BEARER = 6;
  IP_CAN_CHANGE = 7;
  // 8, 9, 10 are unused
  QOS_CHANGE_EXCEEDING_AUTHORIZATION = 11;
  RAI_CHANGE = 12;
  USER_LOCATION_CHANGE = 13;
  NO_EVENT_TRIGGERS = 14;
  OUT_OF_CREDIT = 15;
  REALLOCATION_OF_CREDIT = 16;
  REVALIDATION_TIMEOUT = 17;
  UE_IP_ADDRESS_ALLOCATE = 18;
  UE_IP_ADDRESS_RELEASE = 19;
  DEFAULT_EPS_BEARER_QOS_CHANGE = 20;
  AN_GW_CHANGE = 21;
  SUCCESSFUL_RESOURCE_ALLOCATION = 22;
  RESOURCE_MODIFICATION_REQUEST = 23;
  PGW_TRACE_CONTROL = 24;
  UE_TIME_ZONE_CHANGE = 25;
  TAI_CHANGE = 26;
  ECGI_CHANGE = 27;
  CHARGING_CORRELATION_EXCHANGE = 28;
  APN_AMBR_MODIFICATION_FAILURE = 29;
  USER_CSG_INFORMATION_CHANGE = 30;
  // 31, 32 are unused
  USAGE_REPORT = 33;
  DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE = 34;
  USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE = 35;
  USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE = 36;
  ROUTING_RULE_CHANGE = 37;
  // 38 is unused
  APPLICATION_START = 39;
  APPLICATION_STOP = 40;
  // 41 is unused
  CS_TO_PS_HANDOVER = 42;
  UE_LOCAL_IP_ADDRESS_CHANGE = 43;
  HENB_LOCAL_IP_ADDRESS_CHANGE = 44;
  ACCESS_NETWORK_INFO_REPORT = 45;
  CREDIT_MANAGEMENT_SESSION_FAILURE = 46;
  DEFAULT_QOS_CHANGE = 47;
  CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT = 48;
  // UNSUPPORTED is not defined in 3GPP
  UNSUPPORTED = 49;
}

message PolicyReAuthRequest {
  // NOTE: if no session_id is specified, apply to all sessions for the IMSI
  string session_id = 1;
  string imsi = 2;
  repeated string rules_to_remove = 3;
  repeated StaticRuleInstall rules_to_install = 6;
  repeated DynamicRuleInstall dynamic_rules_to_install = 7;
  repeated EventTrigger event_triggers = 8;
  google.protobuf.Timestamp revalidation_time = 9;
  repeated UsageMonitoringCredit usage_monitoring_credits = 10;
  QoSInformation qos_info = 11;
}

enum QCI {
  QCI_0 = 0;
  QCI_1 = 1;
  QCI_2 = 2;
  QCI_3 = 3;
  QCI_4 = 4;
  QCI_5 = 5;
  QCI_6 = 6;
  QCI_7 = 7;
  QCI_8 = 8;
  QCI_9 = 9;
  QCI_65 = 65;
  QCI_66 = 66;
  QCI_67 = 67;
  QCI_70 = 70;
  QCI_75 = 75;
  QCI_79 = 79;
}

message QoSInformation {
  string bearer_id = 1;
  QCI qci = 2;
}

enum ReAuthResult {
  UPDATE_INITIATED = 0;
  UPDATE_NOT_NEEDED = 1;
  SESSION_NOT_FOUND = 2;
  OTHER_FAILURE = 3;
}

message PolicyReAuthAnswer {
  enum FailureCode {
    // We want to map these directly to the diameter return codes, so use a
    // placeholder for 0
    UNUSED = 0;
    UNKNOWN_RULE_NAME = 1;
    RATING_GROUP_ERROR = 2;
    SERVICE_IDENTIFIER_ERROR = 3;
    GW_PCEF_MALFUNCTION = 4;
    RESOURCES_LIMITATION = 5;
    MAX_NR_BEARERS_REACHED = 6;
    UNKNOWN_BEARER_ID = 7;
    MISSING_BEARER_ID = 8;
    MISSING_FLOW_INFORMATION = 9;
    RESOURCE_ALLOCATION_FAILURE = 10;
    UNSUCCESSFUL_QOS_VALIDATION = 11;
    INCORRECT_FLOW_INFORMATION = 12;
    PS_TO_CS_HANDOVER = 13;
    TDF_APPLICATION_IDENTIFIER_ERROR = 14;
    NO_BEARER_FOUND = 15;
    FILTER_RESTRICTIONS = 16;
    AN_GW_FAILED = 17;
    MISSING_REDIRECT_SERVER_ADDRESS = 18;
    CM_END_USER_SERVICE_DENIED = 19;
    CM_CREDIT_CONTROL_NOT_APPLICABLE = 20;
    CM_AUTHORIZATION_REJECTED = 21;
    CM_USER_UNKNOWN = 22;
    CM_RATING_FAILED = 23;
    ROUTING_RULE_REJECTION = 24;
    UNKNOWN_ROUTING_ACCESS_INFORMATION = 25;
    NO_NBIFOM_SUPPORT = 26;
  }

  string session_id = 1;
  ReAuthResult result = 2;
  map<string, FailureCode> failed_rules = 3;
}

service LocalSessionManager {
  rpc ReportRuleStats(RuleRecordTable) returns (orc8r.Void) {}

  rpc CreateSession(LocalCreateSessionRequest) returns (LocalCreateSessionResponse) {}

  rpc EndSession(LocalEndSessionRequest) returns (LocalEndSessionResponse) {}
}

service SessionProxyResponder {
  rpc ChargingReAuth(ChargingReAuthRequest) returns (ChargingReAuthAnswer) {}

  // NOTE: if no session_id is specified, apply to all sessions for the IMSI
  //
  rpc PolicyReAuth(PolicyReAuthRequest) returns (PolicyReAuthAnswer) {}
}

///////////////////
// CentralSessionController service
///////////////////

message CreditUnit {
  bool is_valid = 1;
  uint64 volume = 2;
}

message GrantedUnits {
  CreditUnit total = 1;
  CreditUnit tx = 2;
  CreditUnit rx = 3;
}

message RedirectServer {
  enum RedirectAddressType {
    IPV4 = 0;
    IPV6 = 1;
    URL = 2;
    SIP_URI = 3;
  }
  RedirectAddressType redirect_address_type = 1;
  string redirect_server_address = 2;
}

// OCS CHARGING

message ChargingCredit {
  enum UnitType {
      BYTES = 0;
      SECONDS = 1;
  }
  UnitType type = 2;
  uint32 validity_time = 3; // seconds
  bool is_final = 4;
  enum FinalAction {
    TERMINATE = 0;
    REDIRECT = 1;
    RESTRICT_ACCESS = 2;
  }
  FinalAction final_action = 5;
  GrantedUnits granted_units = 6;
  RedirectServer redirect_server = 7;
}

message CreditUsage {
  uint64 bytes_tx = 1;
  uint64 bytes_rx = 2;
  uint32 charging_key = 4;
  enum UpdateType {
    THRESHOLD = 0;
    QHT = 1;
    TERMINATED = 2; // FINAL - UE disconnected, flow not in use
    QUOTA_EXHAUSTED = 3; // UE hit credit limit
    VALIDITY_TIMER_EXPIRED = 4; // Credit expired
    OTHER_QUOTA_TYPE = 5;
    RATING_CONDITION_CHANGE = 6;
    REAUTH_REQUIRED = 7; // FORCED_REAUTHORISATION
    POOL_EXHAUSTED = 8;
  }
  UpdateType type = 5;
  bytes monitoring_key = 6;
  ServiceIdentifier service_identifier = 7;
}

message CreditUsageUpdate {
  CreditUsage usage = 1;
  string session_id = 2;
  uint32 request_number = 3; // unique among session
  string sid = 4; // System Identification Number
  bytes msisdn = 5;
  string ue_ipv4 = 6;
  string spgw_ipv4 = 7;
  string apn = 8;
  string imei = 9;
  string plmn_id = 10;
  string imsi_plmn_id = 11;
  bytes user_location = 12;
  RATType rat_type = 13;
  bytes hardware_addr = 14; // MAC Address for WLAN
  TgppContext tgpp_ctx = 15;
}

message CreditUpdateResponse {
  enum ResponseType {
    UPDATE = 0;
  }
  bool success = 1;
  string sid = 2; // System Identification Number
  uint32 charging_key = 3;
  ChargingCredit credit = 4;
  ResponseType type = 5;
  uint32 result_code = 6;
  ServiceIdentifier service_identifier = 7;
  enum CreditLimitType {
    FINITE = 0;
    INFINITE_UNMETERED = 1;
    INFINITE_METERED = 2;
  }
  // When this is set to an infinite limit, field 'credit' should be ignored
  CreditLimitType limit_type = 9;
  TgppContext tgpp_ctx = 10;
}

// PCRF USAGE MONITORING

enum MonitoringLevel {
  SESSION_LEVEL = 0;
  PCC_RULE_LEVEL = 1;
}

// Used amount for a usage monitor
message UsageMonitorUpdate {
  bytes monitoring_key = 1;
  MonitoringLevel level = 2;
  uint64 bytes_tx = 3;
  uint64 bytes_rx = 4;
}

// New received threshold for a usage monitor
message UsageMonitoringCredit {
  enum Action {
    CONTINUE = 0; // continue monitoring as normal
    DISABLE = 1; // no need to monitor any more
  }
  Action action = 1;
  bytes monitoring_key = 2;
  MonitoringLevel level = 3;
  GrantedUnits granted_units = 5;
}

// A request to update a usage monitor given its usage and session information
message UsageMonitoringUpdateRequest {
  UsageMonitorUpdate update = 1;
  string session_id = 2;
  uint32 request_number = 3; // unique among session
  string sid = 4; // System Identification Number
  string ue_ipv4 = 5;
  bytes hardware_addr = 6; // MAC Address for WLAN
  RATType rat_type = 7;
  TgppContext tgpp_ctx = 8;
}

// Response to a usage monitor update with the credit received and session info
message UsageMonitoringUpdateResponse {
  UsageMonitoringCredit credit = 1;
  string session_id = 2;
  string sid = 3; // System Identification Number
  bool success = 4;
  repeated EventTrigger event_triggers = 5;
  google.protobuf.Timestamp revalidation_time = 6;
  uint32 result_code = 7;
  repeated string rules_to_remove = 8;
  repeated StaticRuleInstall static_rules_to_install = 9;
  repeated DynamicRuleInstall dynamic_rules_to_install = 10;
  TgppContext tgpp_ctx = 11;
}


// COMBINED MESSAGES

// QoS Information to be sent in CCR-Init message
message QosInformationRequest {
  uint32 apn_ambr_dl = 1;
  uint32 apn_ambr_ul = 2;
  uint32 priority_level = 3;
  uint32 preemption_capability = 4;
  uint32 preemption_vulnerability = 5;
  uint32 qos_class_id = 6;
}

// TgppContext is a session specific 3GPP context session proxy may meed session manager to persist
message TgppContext {
  string gx_dest_host = 1;
  string gy_dest_host = 2;
}

message CreateSessionRequest {
  SubscriberID subscriber = 1;
  string session_id = 2;
  string ue_ipv4 = 3;
  string spgw_ipv4 = 4;
  string apn = 5;
  string imei = 7;
  string plmn_id = 8;
  string imsi_plmn_id = 9;
  bytes user_location = 10;
  QosInformationRequest qos_info = 11;
  bytes  msisdn = 12;
  string gc_id = 13;
  RATType rat_type = 14;
  bytes hardware_addr = 15; // MAC Address for WLAN
}

message CreateSessionResponse {
  repeated CreditUpdateResponse credits = 1; // these will only have updates
  repeated UsageMonitoringUpdateResponse usage_monitors = 6;
  repeated StaticRuleInstall static_rules = 7; // static rules
  repeated DynamicRuleInstall dynamic_rules = 8; // dynamic rules
  string session_id = 9;
  TgppContext tgpp_ctx = 10;
}

message StaticRuleInstall {
  string rule_id = 1;
  google.protobuf.Timestamp activation_time = 2;
  google.protobuf.Timestamp deactivation_time = 3;
}

message DynamicRuleInstall {
  PolicyRule policy_rule = 1;
  google.protobuf.Timestamp activation_time = 2;
  google.protobuf.Timestamp deactivation_time = 3;
}

message UpdateSessionRequest {
  repeated CreditUsageUpdate updates = 1;
  repeated UsageMonitoringUpdateRequest usage_monitors = 3;
}

message UpdateSessionResponse {
  repeated CreditUpdateResponse responses = 1;
  repeated UsageMonitoringUpdateResponse usage_monitor_responses = 3;
}

message SessionTerminateResponse {
  string sid = 1; // System Identification Number
  string session_id = 2;
}

message SessionTerminateRequest {
  string sid = 1; // System Identification Number
  string session_id = 2;
  string apn = 3;
  uint32 request_number = 4;
  repeated CreditUsage credit_usages = 5;
  repeated UsageMonitorUpdate monitor_usages = 6;
  string ue_ipv4 = 7;
  bytes msisdn = 8;
  string spgw_ipv4 = 9;
  string imei = 10;
  string plmn_id = 11;
  string imsi_plmn_id = 12;
  bytes user_location = 13;
  RATType rat_type = 14;
  bytes hardware_addr = 15; // MAC Address for WLAN
  TgppContext tgpp_ctx = 16;
}

service CentralSessionController {
  // Notify OCS/PCRF of new session and return rules associated with subscriber
  // along with credits for each rule
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {}

  // Updates OCS/PCRF with used credit and terminations from gateway
  rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse) {}

  // Terminates session in OCS/PCRF for a subscriber
  rpc TerminateSession(SessionTerminateRequest) returns (SessionTerminateResponse) {}
}
