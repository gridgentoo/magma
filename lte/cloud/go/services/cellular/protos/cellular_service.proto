// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.
syntax = "proto3";

package magma.cellular;
option go_package = "protos";


// All config fields are required unless otherwise indicated.

// On network creation or gateway registration, default configs will be applied
// (x-ref defaults.go) which will apply sensible defaults to most fields.
// A config update may be needed as a follow-up.

message CellularGatewayConfig {
    GatewayRANConfig ran = 1;
    GatewayEPCConfig epc = 2;
    GatewayNonEPSConfig non_eps_service = 3;
    repeated string attached_enodeb_serials = 4;
}

message GatewayRANConfig {
    // Physical cell ID (0-504)
    int32 pci = 1;
    // Enable eNodeB
    bool transmit_enabled = 2;
}

message GatewayEPCConfig {
    bool nat_enabled = 1;

    // IP block is an optional field which should only be present if nat_enabled
    // is set to false

    // IP block is only set if nat_enabled is false
    // An IP block is a range of IP addresses specified by a network address and
    // a prefix-length of the netmask. For example,
    //    IPv4 IP block:      "192.168.0.0/24"
    //    IPv6 IP block:      "2401:db00:1116:301b::/64"
    string ip_block = 2;
}

message GatewayNonEPSConfig {
    // (0)Turning off NonEPS service, (1)Both CSFB and SMS, (2)only SMS
    enum NonEPSServiceControl {
        NON_EPS_SERVICE_CONTROL_OFF = 0;
        NON_EPS_SERVICE_CONTROL_CSFB_SMS = 1;
        NON_EPS_SERVICE_CONTROL_SMS = 2;
    }

    enum CSFBRat {
        CSFBRAT_2G = 0;
        CSFBRAT_3G = 1;
    }
    // Mobile country code for CSFB
    string csfb_mcc = 1;
    // Mobile network code for CSFB
    string csfb_mnc = 2;
    // Location area code. 16-bit
    int32 lac = 3;
    // RAT type (2G/3G), used by eNB
    CSFBRat csfb_rat = 4;
    // 2G RAT frequencies /ARFCNs for redirection, used by eNB
    repeated int32 arfcn_2g = 5;
    // For indicating one of the three modes
    NonEPSServiceControl non_eps_service_control = 6;
}

message CellularNetworkConfig {
    NetworkRANConfig ran = 1;
    NetworkEPCConfig epc = 2;
    string feg_network_id = 3;
}

message NetworkRANConfig {
    int32 earfcndl = 1;
    // Bandwidth in MHz, from set {1.4, 3, 5, 10, 15, 20}
    int32 bandwidth_mhz = 2;
    int32 subframe_assignment = 3;
    int32 special_subframe_pattern = 5;
    TDDConfig tdd_config = 6;
    FDDConfig fdd_config = 7;
    message FDDConfig {
        int32 earfcndl = 1;
        int32 earfcnul = 2;
    }
    message TDDConfig {
        int32 earfcndl = 1;
        // TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
        int32 subframe_assignment = 2;
        // TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
        int32 special_subframe_pattern = 3;
    }

}

message NetworkEPCConfig {
    enum NetworkServices {
        METERING = 0 [deprecated=true];  // deprecated
        DPI = 1;
        ENFORCEMENT = 2;
    }

    // always 3 digits
    // Mobile country code
    string mcc = 1;
    // 2-3 digits
    // Mobile network code
    string mnc = 2;
    // Tracking area code. 16-bit
    int32 tac = 3;
    // Operator configuration field for LTE
    bytes lte_auth_op = 4;
    // Authentication management field for LTE
    bytes lte_auth_amf = 5;

    message SubscriptionProfile {
      // Maximum uplink bit rate (AMBR-UL)
      uint64 max_ul_bit_rate = 1;
      // Maximum downlink bit rate (AMBR-DL)
      uint64 max_dl_bit_rate = 2;
    }
    map<string, SubscriptionProfile> sub_profiles = 6;
    string default_rule_id = 7;
    // Enable relaying S6a messages via FeG RPC
    bool relay_enabled = 8;
    // Ordered list of network service that will be enabled
    repeated NetworkServices network_services = 9;

    // If relay_enabled is false, this determines whether cloud subscriberdb
    // or local subscriberdb is used for authentication requests.
    bool cloud_subscriberdb_enabled = 10;
}

message CellularEnodebConfig {
    // EARFCN (0-65535)
    int32 earfcndl = 1;
    // Subframe Assignment (0-6)
    int32 subframe_assignment = 2;
    // Special Subframe Pattern (0-9)
    int32 special_subframe_pattern = 3;
    // Physical cell ID (0-504)
    int32 pci = 4;
    // Enable eNodeB
    bool transmit_enabled = 5;
    // eNodeB device class - limited support
    string device_class = 6;
    // Cellular ID needs to be set to avoid collision
    int32 cell_id = 7;
    // Bandwidth in MHz
    int32 bandwidth_mhz = 8;
    // Cellular tracking area code
    int32 tac = 9;
}
