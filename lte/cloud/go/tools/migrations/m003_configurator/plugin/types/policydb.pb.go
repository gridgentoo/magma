// Code generated by protoc-gen-go. DO NOT EDIT.
// source: policydb.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LegacyPolicyRule_TrackingType int32

const (
	LegacyPolicyRule_ONLY_OCS     LegacyPolicyRule_TrackingType = 0
	LegacyPolicyRule_ONLY_PCRF    LegacyPolicyRule_TrackingType = 1
	LegacyPolicyRule_OCS_AND_PCRF LegacyPolicyRule_TrackingType = 2
	LegacyPolicyRule_NO_TRACKING  LegacyPolicyRule_TrackingType = 3
)

var LegacyPolicyRule_TrackingType_name = map[int32]string{
	0: "ONLY_OCS",
	1: "ONLY_PCRF",
	2: "OCS_AND_PCRF",
	3: "NO_TRACKING",
}
var LegacyPolicyRule_TrackingType_value = map[string]int32{
	"ONLY_OCS":     0,
	"ONLY_PCRF":    1,
	"OCS_AND_PCRF": 2,
	"NO_TRACKING":  3,
}

func (x LegacyPolicyRule_TrackingType) String() string {
	return proto.EnumName(LegacyPolicyRule_TrackingType_name, int32(x))
}
func (LegacyPolicyRule_TrackingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{1, 0}
}

type LegacyFlowDescription_Action int32

const (
	LegacyFlowDescription_PERMIT LegacyFlowDescription_Action = 0
	LegacyFlowDescription_DENY   LegacyFlowDescription_Action = 1
)

var LegacyFlowDescription_Action_name = map[int32]string{
	0: "PERMIT",
	1: "DENY",
}
var LegacyFlowDescription_Action_value = map[string]int32{
	"PERMIT": 0,
	"DENY":   1,
}

func (x LegacyFlowDescription_Action) String() string {
	return proto.EnumName(LegacyFlowDescription_Action_name, int32(x))
}
func (LegacyFlowDescription_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{2, 0}
}

type LegacyFlowMatch_IPProto int32

const (
	LegacyFlowMatch_IPPROTO_IP       LegacyFlowMatch_IPProto = 0
	LegacyFlowMatch_IPPROTO_HOPOPTS  LegacyFlowMatch_IPProto = 0
	LegacyFlowMatch_IPPROTO_ICMP     LegacyFlowMatch_IPProto = 1
	LegacyFlowMatch_IPPROTO_IGMP     LegacyFlowMatch_IPProto = 2
	LegacyFlowMatch_IPPROTO_TCP      LegacyFlowMatch_IPProto = 6
	LegacyFlowMatch_IPPROTO_UDP      LegacyFlowMatch_IPProto = 17
	LegacyFlowMatch_IPPROTO_ROUTING  LegacyFlowMatch_IPProto = 43
	LegacyFlowMatch_IPPROTO_FRAGMENT LegacyFlowMatch_IPProto = 44
	LegacyFlowMatch_IPPROTO_GRE      LegacyFlowMatch_IPProto = 47
	LegacyFlowMatch_IPPROTO_AH       LegacyFlowMatch_IPProto = 51
	LegacyFlowMatch_IPPROTO_ICMPV6   LegacyFlowMatch_IPProto = 58
	LegacyFlowMatch_IPPROTO_NONE     LegacyFlowMatch_IPProto = 59
	LegacyFlowMatch_IPPROTO_DSTOPTS  LegacyFlowMatch_IPProto = 60
	LegacyFlowMatch_IPPROTO_OSPF     LegacyFlowMatch_IPProto = 89
	LegacyFlowMatch_IPPROTO_VRRP     LegacyFlowMatch_IPProto = 112
	LegacyFlowMatch_IPPROTO_SCTP     LegacyFlowMatch_IPProto = 132
)

var LegacyFlowMatch_IPProto_name = map[int32]string{
	0: "IPPROTO_IP",
	// Duplicate value: 0: "IPPROTO_HOPOPTS",
	1:   "IPPROTO_ICMP",
	2:   "IPPROTO_IGMP",
	6:   "IPPROTO_TCP",
	17:  "IPPROTO_UDP",
	43:  "IPPROTO_ROUTING",
	44:  "IPPROTO_FRAGMENT",
	47:  "IPPROTO_GRE",
	51:  "IPPROTO_AH",
	58:  "IPPROTO_ICMPV6",
	59:  "IPPROTO_NONE",
	60:  "IPPROTO_DSTOPTS",
	89:  "IPPROTO_OSPF",
	112: "IPPROTO_VRRP",
	132: "IPPROTO_SCTP",
}
var LegacyFlowMatch_IPProto_value = map[string]int32{
	"IPPROTO_IP":       0,
	"IPPROTO_HOPOPTS":  0,
	"IPPROTO_ICMP":     1,
	"IPPROTO_IGMP":     2,
	"IPPROTO_TCP":      6,
	"IPPROTO_UDP":      17,
	"IPPROTO_ROUTING":  43,
	"IPPROTO_FRAGMENT": 44,
	"IPPROTO_GRE":      47,
	"IPPROTO_AH":       51,
	"IPPROTO_ICMPV6":   58,
	"IPPROTO_NONE":     59,
	"IPPROTO_DSTOPTS":  60,
	"IPPROTO_OSPF":     89,
	"IPPROTO_VRRP":     112,
	"IPPROTO_SCTP":     132,
}

func (x LegacyFlowMatch_IPProto) String() string {
	return proto.EnumName(LegacyFlowMatch_IPProto_name, int32(x))
}
func (LegacyFlowMatch_IPProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{3, 0}
}

type LegacyFlowMatch_Direction int32

const (
	LegacyFlowMatch_UPLINK   LegacyFlowMatch_Direction = 0
	LegacyFlowMatch_DOWNLINK LegacyFlowMatch_Direction = 1
)

var LegacyFlowMatch_Direction_name = map[int32]string{
	0: "UPLINK",
	1: "DOWNLINK",
}
var LegacyFlowMatch_Direction_value = map[string]int32{
	"UPLINK":   0,
	"DOWNLINK": 1,
}

func (x LegacyFlowMatch_Direction) String() string {
	return proto.EnumName(LegacyFlowMatch_Direction_name, int32(x))
}
func (LegacyFlowMatch_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{3, 1}
}

type LegacyQosArp_PreCap int32

const (
	LegacyQosArp_PRE_CAP_ENABLED  LegacyQosArp_PreCap = 0
	LegacyQosArp_PRE_CAP_DISABLED LegacyQosArp_PreCap = 1
)

var LegacyQosArp_PreCap_name = map[int32]string{
	0: "PRE_CAP_ENABLED",
	1: "PRE_CAP_DISABLED",
}
var LegacyQosArp_PreCap_value = map[string]int32{
	"PRE_CAP_ENABLED":  0,
	"PRE_CAP_DISABLED": 1,
}

func (x LegacyQosArp_PreCap) String() string {
	return proto.EnumName(LegacyQosArp_PreCap_name, int32(x))
}
func (LegacyQosArp_PreCap) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{4, 0}
}

type LegacyQosArp_PreVul int32

const (
	LegacyQosArp_PRE_VUL_ENABLED  LegacyQosArp_PreVul = 0
	LegacyQosArp_PRE_VUL_DISABLED LegacyQosArp_PreVul = 1
)

var LegacyQosArp_PreVul_name = map[int32]string{
	0: "PRE_VUL_ENABLED",
	1: "PRE_VUL_DISABLED",
}
var LegacyQosArp_PreVul_value = map[string]int32{
	"PRE_VUL_ENABLED":  0,
	"PRE_VUL_DISABLED": 1,
}

func (x LegacyQosArp_PreVul) String() string {
	return proto.EnumName(LegacyQosArp_PreVul_name, int32(x))
}
func (LegacyQosArp_PreVul) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{4, 1}
}

type LegacyFlowQos_Qci int32

const (
	LegacyFlowQos_QCI_0  LegacyFlowQos_Qci = 0
	LegacyFlowQos_QCI_1  LegacyFlowQos_Qci = 1
	LegacyFlowQos_QCI_2  LegacyFlowQos_Qci = 2
	LegacyFlowQos_QCI_3  LegacyFlowQos_Qci = 3
	LegacyFlowQos_QCI_4  LegacyFlowQos_Qci = 4
	LegacyFlowQos_QCI_5  LegacyFlowQos_Qci = 5
	LegacyFlowQos_QCI_6  LegacyFlowQos_Qci = 6
	LegacyFlowQos_QCI_7  LegacyFlowQos_Qci = 7
	LegacyFlowQos_QCI_8  LegacyFlowQos_Qci = 8
	LegacyFlowQos_QCI_9  LegacyFlowQos_Qci = 9
	LegacyFlowQos_QCI_65 LegacyFlowQos_Qci = 65
	LegacyFlowQos_QCI_66 LegacyFlowQos_Qci = 66
	LegacyFlowQos_QCI_67 LegacyFlowQos_Qci = 67
	LegacyFlowQos_QCI_70 LegacyFlowQos_Qci = 70
	LegacyFlowQos_QCI_75 LegacyFlowQos_Qci = 75
	LegacyFlowQos_QCI_79 LegacyFlowQos_Qci = 79
)

var LegacyFlowQos_Qci_name = map[int32]string{
	0:  "QCI_0",
	1:  "QCI_1",
	2:  "QCI_2",
	3:  "QCI_3",
	4:  "QCI_4",
	5:  "QCI_5",
	6:  "QCI_6",
	7:  "QCI_7",
	8:  "QCI_8",
	9:  "QCI_9",
	65: "QCI_65",
	66: "QCI_66",
	67: "QCI_67",
	70: "QCI_70",
	75: "QCI_75",
	79: "QCI_79",
}
var LegacyFlowQos_Qci_value = map[string]int32{
	"QCI_0":  0,
	"QCI_1":  1,
	"QCI_2":  2,
	"QCI_3":  3,
	"QCI_4":  4,
	"QCI_5":  5,
	"QCI_6":  6,
	"QCI_7":  7,
	"QCI_8":  8,
	"QCI_9":  9,
	"QCI_65": 65,
	"QCI_66": 66,
	"QCI_67": 67,
	"QCI_70": 70,
	"QCI_75": 75,
	"QCI_79": 79,
}

func (x LegacyFlowQos_Qci) String() string {
	return proto.EnumName(LegacyFlowQos_Qci_name, int32(x))
}
func (LegacyFlowQos_Qci) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{5, 0}
}

type LegacyRedirectInformation_Support int32

const (
	LegacyRedirectInformation_DISABLED LegacyRedirectInformation_Support = 0
	LegacyRedirectInformation_ENABLED  LegacyRedirectInformation_Support = 1
)

var LegacyRedirectInformation_Support_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}
var LegacyRedirectInformation_Support_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x LegacyRedirectInformation_Support) String() string {
	return proto.EnumName(LegacyRedirectInformation_Support_name, int32(x))
}
func (LegacyRedirectInformation_Support) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{6, 0}
}

type LegacyRedirectInformation_AddressType int32

const (
	LegacyRedirectInformation_IPv4    LegacyRedirectInformation_AddressType = 0
	LegacyRedirectInformation_IPv6    LegacyRedirectInformation_AddressType = 1
	LegacyRedirectInformation_URL     LegacyRedirectInformation_AddressType = 2
	LegacyRedirectInformation_SIP_URI LegacyRedirectInformation_AddressType = 3
)

var LegacyRedirectInformation_AddressType_name = map[int32]string{
	0: "IPv4",
	1: "IPv6",
	2: "URL",
	3: "SIP_URI",
}
var LegacyRedirectInformation_AddressType_value = map[string]int32{
	"IPv4":    0,
	"IPv6":    1,
	"URL":     2,
	"SIP_URI": 3,
}

func (x LegacyRedirectInformation_AddressType) String() string {
	return proto.EnumName(LegacyRedirectInformation_AddressType_name, int32(x))
}
func (LegacyRedirectInformation_AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{6, 1}
}

type ChargingRuleNameSet struct {
	RuleNames            []string `protobuf:"bytes,2,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChargingRuleNameSet) Reset()         { *m = ChargingRuleNameSet{} }
func (m *ChargingRuleNameSet) String() string { return proto.CompactTextString(m) }
func (*ChargingRuleNameSet) ProtoMessage()    {}
func (*ChargingRuleNameSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{0}
}
func (m *ChargingRuleNameSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingRuleNameSet.Unmarshal(m, b)
}
func (m *ChargingRuleNameSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingRuleNameSet.Marshal(b, m, deterministic)
}
func (dst *ChargingRuleNameSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingRuleNameSet.Merge(dst, src)
}
func (m *ChargingRuleNameSet) XXX_Size() int {
	return xxx_messageInfo_ChargingRuleNameSet.Size(m)
}
func (m *ChargingRuleNameSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingRuleNameSet.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingRuleNameSet proto.InternalMessageInfo

func (m *ChargingRuleNameSet) GetRuleNames() []string {
	if m != nil {
		return m.RuleNames
	}
	return nil
}

type LegacyPolicyRule struct {
	Id                   string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Priority             uint32                        `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	RatingGroup          uint32                        `protobuf:"varint,4,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`
	MonitoringKey        string                        `protobuf:"bytes,6,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Redirect             *LegacyRedirectInformation    `protobuf:"bytes,9,opt,name=redirect,proto3" json:"redirect,omitempty"`
	FlowList             []*LegacyFlowDescription      `protobuf:"bytes,7,rep,name=flow_list,json=flowList,proto3" json:"flow_list,omitempty"`
	Qos                  *LegacyFlowQos                `protobuf:"bytes,8,opt,name=qos,proto3" json:"qos,omitempty"`
	TrackingType         LegacyPolicyRule_TrackingType `protobuf:"varint,10,opt,name=tracking_type,json=trackingType,proto3,enum=magma.migration.cellular.LegacyPolicyRule_TrackingType" json:"tracking_type,omitempty"`
	HardTimeout          uint32                        `protobuf:"varint,11,opt,name=hard_timeout,json=hardTimeout,proto3" json:"hard_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *LegacyPolicyRule) Reset()         { *m = LegacyPolicyRule{} }
func (m *LegacyPolicyRule) String() string { return proto.CompactTextString(m) }
func (*LegacyPolicyRule) ProtoMessage()    {}
func (*LegacyPolicyRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{1}
}
func (m *LegacyPolicyRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegacyPolicyRule.Unmarshal(m, b)
}
func (m *LegacyPolicyRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegacyPolicyRule.Marshal(b, m, deterministic)
}
func (dst *LegacyPolicyRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyPolicyRule.Merge(dst, src)
}
func (m *LegacyPolicyRule) XXX_Size() int {
	return xxx_messageInfo_LegacyPolicyRule.Size(m)
}
func (m *LegacyPolicyRule) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyPolicyRule.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyPolicyRule proto.InternalMessageInfo

func (m *LegacyPolicyRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LegacyPolicyRule) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *LegacyPolicyRule) GetRatingGroup() uint32 {
	if m != nil {
		return m.RatingGroup
	}
	return 0
}

func (m *LegacyPolicyRule) GetMonitoringKey() string {
	if m != nil {
		return m.MonitoringKey
	}
	return ""
}

func (m *LegacyPolicyRule) GetRedirect() *LegacyRedirectInformation {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *LegacyPolicyRule) GetFlowList() []*LegacyFlowDescription {
	if m != nil {
		return m.FlowList
	}
	return nil
}

func (m *LegacyPolicyRule) GetQos() *LegacyFlowQos {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *LegacyPolicyRule) GetTrackingType() LegacyPolicyRule_TrackingType {
	if m != nil {
		return m.TrackingType
	}
	return LegacyPolicyRule_ONLY_OCS
}

func (m *LegacyPolicyRule) GetHardTimeout() uint32 {
	if m != nil {
		return m.HardTimeout
	}
	return 0
}

type LegacyFlowDescription struct {
	Match                *LegacyFlowMatch             `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Action               LegacyFlowDescription_Action `protobuf:"varint,2,opt,name=action,proto3,enum=magma.migration.cellular.LegacyFlowDescription_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LegacyFlowDescription) Reset()         { *m = LegacyFlowDescription{} }
func (m *LegacyFlowDescription) String() string { return proto.CompactTextString(m) }
func (*LegacyFlowDescription) ProtoMessage()    {}
func (*LegacyFlowDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{2}
}
func (m *LegacyFlowDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegacyFlowDescription.Unmarshal(m, b)
}
func (m *LegacyFlowDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegacyFlowDescription.Marshal(b, m, deterministic)
}
func (dst *LegacyFlowDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyFlowDescription.Merge(dst, src)
}
func (m *LegacyFlowDescription) XXX_Size() int {
	return xxx_messageInfo_LegacyFlowDescription.Size(m)
}
func (m *LegacyFlowDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyFlowDescription.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyFlowDescription proto.InternalMessageInfo

func (m *LegacyFlowDescription) GetMatch() *LegacyFlowMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *LegacyFlowDescription) GetAction() LegacyFlowDescription_Action {
	if m != nil {
		return m.Action
	}
	return LegacyFlowDescription_PERMIT
}

type LegacyFlowMatch struct {
	Ipv4Src              string                    `protobuf:"bytes,1,opt,name=ipv4_src,json=ipv4Src,proto3" json:"ipv4_src,omitempty"`
	Ipv4Dst              string                    `protobuf:"bytes,2,opt,name=ipv4_dst,json=ipv4Dst,proto3" json:"ipv4_dst,omitempty"`
	TcpSrc               uint32                    `protobuf:"varint,3,opt,name=tcp_src,json=tcpSrc,proto3" json:"tcp_src,omitempty"`
	TcpDst               uint32                    `protobuf:"varint,4,opt,name=tcp_dst,json=tcpDst,proto3" json:"tcp_dst,omitempty"`
	UdpSrc               uint32                    `protobuf:"varint,5,opt,name=udp_src,json=udpSrc,proto3" json:"udp_src,omitempty"`
	UdpDst               uint32                    `protobuf:"varint,6,opt,name=udp_dst,json=udpDst,proto3" json:"udp_dst,omitempty"`
	IpProto              LegacyFlowMatch_IPProto   `protobuf:"varint,7,opt,name=ip_proto,json=ipProto,proto3,enum=magma.migration.cellular.LegacyFlowMatch_IPProto" json:"ip_proto,omitempty"`
	Direction            LegacyFlowMatch_Direction `protobuf:"varint,8,opt,name=direction,proto3,enum=magma.migration.cellular.LegacyFlowMatch_Direction" json:"direction,omitempty"`
	AppName              string                    `protobuf:"bytes,9,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LegacyFlowMatch) Reset()         { *m = LegacyFlowMatch{} }
func (m *LegacyFlowMatch) String() string { return proto.CompactTextString(m) }
func (*LegacyFlowMatch) ProtoMessage()    {}
func (*LegacyFlowMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{3}
}
func (m *LegacyFlowMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegacyFlowMatch.Unmarshal(m, b)
}
func (m *LegacyFlowMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegacyFlowMatch.Marshal(b, m, deterministic)
}
func (dst *LegacyFlowMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyFlowMatch.Merge(dst, src)
}
func (m *LegacyFlowMatch) XXX_Size() int {
	return xxx_messageInfo_LegacyFlowMatch.Size(m)
}
func (m *LegacyFlowMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyFlowMatch.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyFlowMatch proto.InternalMessageInfo

func (m *LegacyFlowMatch) GetIpv4Src() string {
	if m != nil {
		return m.Ipv4Src
	}
	return ""
}

func (m *LegacyFlowMatch) GetIpv4Dst() string {
	if m != nil {
		return m.Ipv4Dst
	}
	return ""
}

func (m *LegacyFlowMatch) GetTcpSrc() uint32 {
	if m != nil {
		return m.TcpSrc
	}
	return 0
}

func (m *LegacyFlowMatch) GetTcpDst() uint32 {
	if m != nil {
		return m.TcpDst
	}
	return 0
}

func (m *LegacyFlowMatch) GetUdpSrc() uint32 {
	if m != nil {
		return m.UdpSrc
	}
	return 0
}

func (m *LegacyFlowMatch) GetUdpDst() uint32 {
	if m != nil {
		return m.UdpDst
	}
	return 0
}

func (m *LegacyFlowMatch) GetIpProto() LegacyFlowMatch_IPProto {
	if m != nil {
		return m.IpProto
	}
	return LegacyFlowMatch_IPPROTO_IP
}

func (m *LegacyFlowMatch) GetDirection() LegacyFlowMatch_Direction {
	if m != nil {
		return m.Direction
	}
	return LegacyFlowMatch_UPLINK
}

func (m *LegacyFlowMatch) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

type LegacyQosArp struct {
	PriorityLevel        uint32              `protobuf:"varint,1,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreCapability        LegacyQosArp_PreCap `protobuf:"varint,2,opt,name=pre_capability,json=preCapability,proto3,enum=magma.migration.cellular.LegacyQosArp_PreCap" json:"pre_capability,omitempty"`
	PreVulnerability     LegacyQosArp_PreVul `protobuf:"varint,3,opt,name=pre_vulnerability,json=preVulnerability,proto3,enum=magma.migration.cellular.LegacyQosArp_PreVul" json:"pre_vulnerability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LegacyQosArp) Reset()         { *m = LegacyQosArp{} }
func (m *LegacyQosArp) String() string { return proto.CompactTextString(m) }
func (*LegacyQosArp) ProtoMessage()    {}
func (*LegacyQosArp) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{4}
}
func (m *LegacyQosArp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegacyQosArp.Unmarshal(m, b)
}
func (m *LegacyQosArp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegacyQosArp.Marshal(b, m, deterministic)
}
func (dst *LegacyQosArp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyQosArp.Merge(dst, src)
}
func (m *LegacyQosArp) XXX_Size() int {
	return xxx_messageInfo_LegacyQosArp.Size(m)
}
func (m *LegacyQosArp) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyQosArp.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyQosArp proto.InternalMessageInfo

func (m *LegacyQosArp) GetPriorityLevel() uint32 {
	if m != nil {
		return m.PriorityLevel
	}
	return 0
}

func (m *LegacyQosArp) GetPreCapability() LegacyQosArp_PreCap {
	if m != nil {
		return m.PreCapability
	}
	return LegacyQosArp_PRE_CAP_ENABLED
}

func (m *LegacyQosArp) GetPreVulnerability() LegacyQosArp_PreVul {
	if m != nil {
		return m.PreVulnerability
	}
	return LegacyQosArp_PRE_VUL_ENABLED
}

type LegacyFlowQos struct {
	MaxReqBwUl           uint32            `protobuf:"varint,1,opt,name=max_req_bw_ul,json=maxReqBwUl,proto3" json:"max_req_bw_ul,omitempty"`
	MaxReqBwDl           uint32            `protobuf:"varint,2,opt,name=max_req_bw_dl,json=maxReqBwDl,proto3" json:"max_req_bw_dl,omitempty"`
	GbrUl                uint32            `protobuf:"varint,3,opt,name=gbr_ul,json=gbrUl,proto3" json:"gbr_ul,omitempty"`
	GbrDl                uint32            `protobuf:"varint,4,opt,name=gbr_dl,json=gbrDl,proto3" json:"gbr_dl,omitempty"`
	Qci                  LegacyFlowQos_Qci `protobuf:"varint,5,opt,name=qci,proto3,enum=magma.migration.cellular.LegacyFlowQos_Qci" json:"qci,omitempty"`
	Arp                  *LegacyQosArp     `protobuf:"bytes,6,opt,name=arp,proto3" json:"arp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LegacyFlowQos) Reset()         { *m = LegacyFlowQos{} }
func (m *LegacyFlowQos) String() string { return proto.CompactTextString(m) }
func (*LegacyFlowQos) ProtoMessage()    {}
func (*LegacyFlowQos) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{5}
}
func (m *LegacyFlowQos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegacyFlowQos.Unmarshal(m, b)
}
func (m *LegacyFlowQos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegacyFlowQos.Marshal(b, m, deterministic)
}
func (dst *LegacyFlowQos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyFlowQos.Merge(dst, src)
}
func (m *LegacyFlowQos) XXX_Size() int {
	return xxx_messageInfo_LegacyFlowQos.Size(m)
}
func (m *LegacyFlowQos) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyFlowQos.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyFlowQos proto.InternalMessageInfo

func (m *LegacyFlowQos) GetMaxReqBwUl() uint32 {
	if m != nil {
		return m.MaxReqBwUl
	}
	return 0
}

func (m *LegacyFlowQos) GetMaxReqBwDl() uint32 {
	if m != nil {
		return m.MaxReqBwDl
	}
	return 0
}

func (m *LegacyFlowQos) GetGbrUl() uint32 {
	if m != nil {
		return m.GbrUl
	}
	return 0
}

func (m *LegacyFlowQos) GetGbrDl() uint32 {
	if m != nil {
		return m.GbrDl
	}
	return 0
}

func (m *LegacyFlowQos) GetQci() LegacyFlowQos_Qci {
	if m != nil {
		return m.Qci
	}
	return LegacyFlowQos_QCI_0
}

func (m *LegacyFlowQos) GetArp() *LegacyQosArp {
	if m != nil {
		return m.Arp
	}
	return nil
}

type LegacyRedirectInformation struct {
	Support              LegacyRedirectInformation_Support     `protobuf:"varint,1,opt,name=support,proto3,enum=magma.migration.cellular.LegacyRedirectInformation_Support" json:"support,omitempty"`
	AddressType          LegacyRedirectInformation_AddressType `protobuf:"varint,2,opt,name=address_type,json=addressType,proto3,enum=magma.migration.cellular.LegacyRedirectInformation_AddressType" json:"address_type,omitempty"`
	ServerAddress        string                                `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *LegacyRedirectInformation) Reset()         { *m = LegacyRedirectInformation{} }
func (m *LegacyRedirectInformation) String() string { return proto.CompactTextString(m) }
func (*LegacyRedirectInformation) ProtoMessage()    {}
func (*LegacyRedirectInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_5bf53935884f6f3b, []int{6}
}
func (m *LegacyRedirectInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegacyRedirectInformation.Unmarshal(m, b)
}
func (m *LegacyRedirectInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegacyRedirectInformation.Marshal(b, m, deterministic)
}
func (dst *LegacyRedirectInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyRedirectInformation.Merge(dst, src)
}
func (m *LegacyRedirectInformation) XXX_Size() int {
	return xxx_messageInfo_LegacyRedirectInformation.Size(m)
}
func (m *LegacyRedirectInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyRedirectInformation.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyRedirectInformation proto.InternalMessageInfo

func (m *LegacyRedirectInformation) GetSupport() LegacyRedirectInformation_Support {
	if m != nil {
		return m.Support
	}
	return LegacyRedirectInformation_DISABLED
}

func (m *LegacyRedirectInformation) GetAddressType() LegacyRedirectInformation_AddressType {
	if m != nil {
		return m.AddressType
	}
	return LegacyRedirectInformation_IPv4
}

func (m *LegacyRedirectInformation) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*ChargingRuleNameSet)(nil), "magma.migration.cellular.ChargingRuleNameSet")
	proto.RegisterType((*LegacyPolicyRule)(nil), "magma.migration.cellular.LegacyPolicyRule")
	proto.RegisterType((*LegacyFlowDescription)(nil), "magma.migration.cellular.LegacyFlowDescription")
	proto.RegisterType((*LegacyFlowMatch)(nil), "magma.migration.cellular.LegacyFlowMatch")
	proto.RegisterType((*LegacyQosArp)(nil), "magma.migration.cellular.LegacyQosArp")
	proto.RegisterType((*LegacyFlowQos)(nil), "magma.migration.cellular.LegacyFlowQos")
	proto.RegisterType((*LegacyRedirectInformation)(nil), "magma.migration.cellular.LegacyRedirectInformation")
	proto.RegisterEnum("magma.migration.cellular.LegacyPolicyRule_TrackingType", LegacyPolicyRule_TrackingType_name, LegacyPolicyRule_TrackingType_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyFlowDescription_Action", LegacyFlowDescription_Action_name, LegacyFlowDescription_Action_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyFlowMatch_IPProto", LegacyFlowMatch_IPProto_name, LegacyFlowMatch_IPProto_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyFlowMatch_Direction", LegacyFlowMatch_Direction_name, LegacyFlowMatch_Direction_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyQosArp_PreCap", LegacyQosArp_PreCap_name, LegacyQosArp_PreCap_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyQosArp_PreVul", LegacyQosArp_PreVul_name, LegacyQosArp_PreVul_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyFlowQos_Qci", LegacyFlowQos_Qci_name, LegacyFlowQos_Qci_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyRedirectInformation_Support", LegacyRedirectInformation_Support_name, LegacyRedirectInformation_Support_value)
	proto.RegisterEnum("magma.migration.cellular.LegacyRedirectInformation_AddressType", LegacyRedirectInformation_AddressType_name, LegacyRedirectInformation_AddressType_value)
}

func init() { proto.RegisterFile("policydb.proto", fileDescriptor_policydb_5bf53935884f6f3b) }

var fileDescriptor_policydb_5bf53935884f6f3b = []byte{
	// 1235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x8f, 0xd3, 0x46,
	0x10, 0x8f, 0x93, 0xcb, 0xbf, 0xc9, 0x1f, 0x96, 0xa5, 0xa8, 0x01, 0x55, 0xd5, 0x61, 0x95, 0xf6,
	0x2a, 0xda, 0x00, 0x09, 0xdc, 0x41, 0x69, 0x85, 0x72, 0x49, 0xee, 0xb0, 0x2e, 0x67, 0xfb, 0x36,
	0xce, 0x55, 0xa0, 0x4a, 0x96, 0xe3, 0x98, 0x60, 0xe1, 0xc4, 0xbe, 0xb5, 0x73, 0x47, 0xde, 0xfb,
	0x8d, 0x2a, 0xf5, 0xa1, 0xfd, 0x00, 0xed, 0x6b, 0xdf, 0xfb, 0x61, 0xaa, 0xdd, 0xb5, 0x1d, 0x97,
	0x16, 0x71, 0xf0, 0x94, 0xd9, 0xdf, 0xcc, 0xef, 0xb7, 0xe3, 0xd9, 0xd9, 0xd9, 0x40, 0x33, 0xf0,
	0x3d, 0xd7, 0x5e, 0xcf, 0xa6, 0xed, 0x80, 0xfa, 0x91, 0x8f, 0x5b, 0x0b, 0x6b, 0xbe, 0xb0, 0xda,
	0x0b, 0x77, 0x4e, 0xad, 0xc8, 0xf5, 0x97, 0x6d, 0xdb, 0xf1, 0xbc, 0x95, 0x67, 0x51, 0xb9, 0x0b,
	0xd7, 0xfa, 0xaf, 0x2c, 0x3a, 0x77, 0x97, 0x73, 0xb2, 0xf2, 0x1c, 0xd5, 0x5a, 0x38, 0x63, 0x27,
	0xc2, 0x9f, 0x41, 0x35, 0x59, 0x86, 0xad, 0xfc, 0x76, 0x61, 0xa7, 0x4a, 0x36, 0x80, 0xfc, 0xcb,
	0x16, 0xa0, 0x91, 0x33, 0xb7, 0xec, 0xb5, 0xce, 0xf7, 0x61, 0x1e, 0xdc, 0x84, 0xbc, 0x3b, 0x6b,
	0x49, 0xdb, 0xd2, 0x4e, 0x95, 0xe4, 0xdd, 0x19, 0xbe, 0x09, 0x95, 0x80, 0xba, 0x3e, 0x75, 0xa3,
	0x75, 0xab, 0xb0, 0x2d, 0xed, 0x34, 0x48, 0xba, 0xc6, 0xb7, 0xa0, 0xce, 0x12, 0x59, 0xce, 0xcd,
	0x39, 0xf5, 0x57, 0x41, 0x6b, 0x8b, 0xfb, 0x6b, 0x02, 0x3b, 0x64, 0x10, 0xbe, 0x0d, 0xcd, 0x85,
	0xbf, 0x74, 0x23, 0x9f, 0xb2, 0xb0, 0xd7, 0xce, 0xba, 0x55, 0xe2, 0xd2, 0x8d, 0x0d, 0x7a, 0xe4,
	0xac, 0xb1, 0x06, 0x15, 0xea, 0xcc, 0x5c, 0xea, 0xd8, 0x51, 0xab, 0xba, 0x2d, 0xed, 0xd4, 0x3a,
	0xdd, 0xf6, 0xbb, 0x3e, 0xb6, 0x2d, 0x72, 0x26, 0x71, 0xbc, 0xb2, 0x7c, 0xe9, 0xd3, 0x05, 0x0f,
	0x21, 0xa9, 0x08, 0x1e, 0x41, 0xf5, 0xa5, 0xe7, 0x5f, 0x98, 0x9e, 0x1b, 0x46, 0xad, 0xf2, 0x76,
	0x61, 0xa7, 0xd6, 0xb9, 0xfb, 0x3e, 0xc5, 0x03, 0xcf, 0xbf, 0x18, 0x38, 0xa1, 0x4d, 0xdd, 0x40,
	0xa8, 0x31, 0x85, 0x91, 0x1b, 0x46, 0xf8, 0x31, 0x14, 0xce, 0xfc, 0xb0, 0x55, 0xe1, 0x99, 0x7d,
	0x75, 0x19, 0x9d, 0x13, 0x3f, 0x24, 0x8c, 0x83, 0x7f, 0x82, 0x46, 0x44, 0x2d, 0xfb, 0x35, 0xfb,
	0xfc, 0x68, 0x1d, 0x38, 0x2d, 0xd8, 0x96, 0x76, 0x9a, 0x9d, 0xbd, 0xf7, 0x89, 0x6c, 0x8e, 0xa4,
	0x6d, 0xc4, 0x7c, 0x63, 0x1d, 0x38, 0xa4, 0x1e, 0x65, 0x56, 0xec, 0x04, 0x5e, 0x59, 0x74, 0x66,
	0x46, 0xee, 0xc2, 0xf1, 0x57, 0x51, 0xab, 0x26, 0x4e, 0x80, 0x61, 0x86, 0x80, 0x64, 0x15, 0xea,
	0x59, 0x01, 0x5c, 0x87, 0x8a, 0xa6, 0x8e, 0x9e, 0x9b, 0x5a, 0x7f, 0x8c, 0x72, 0xb8, 0x01, 0x55,
	0xbe, 0xd2, 0xfb, 0xe4, 0x00, 0x49, 0x18, 0x41, 0x5d, 0xeb, 0x8f, 0xcd, 0x9e, 0x3a, 0x10, 0x48,
	0x1e, 0x5f, 0x81, 0x9a, 0xaa, 0x99, 0x06, 0xe9, 0xf5, 0x8f, 0x14, 0xf5, 0x10, 0x15, 0xe4, 0x3f,
	0x25, 0xb8, 0xfe, 0xbf, 0xf5, 0xc2, 0x4f, 0xa1, 0xb8, 0xb0, 0x22, 0xfb, 0x15, 0xef, 0x9e, 0x5a,
	0xe7, 0xeb, 0xcb, 0xd4, 0xe9, 0x98, 0x11, 0x88, 0xe0, 0x61, 0x15, 0x4a, 0x96, 0xcd, 0x22, 0x5b,
	0x79, 0x5e, 0xa4, 0xdd, 0x0f, 0x3c, 0xb1, 0x76, 0x8f, 0xb3, 0x49, 0xac, 0x22, 0x7f, 0x0e, 0x25,
	0x81, 0x60, 0x80, 0x92, 0x3e, 0x24, 0xc7, 0x8a, 0x81, 0x72, 0xb8, 0x02, 0x5b, 0x83, 0xa1, 0xfa,
	0x1c, 0x49, 0xf2, 0x1f, 0x45, 0xb8, 0xf2, 0x56, 0x2a, 0xf8, 0x06, 0x54, 0xdc, 0xe0, 0xfc, 0x81,
	0x19, 0x52, 0x3b, 0xbe, 0x05, 0x65, 0xb6, 0x1e, 0x53, 0x3b, 0x75, 0xcd, 0xc2, 0x88, 0x27, 0x18,
	0xbb, 0x06, 0x61, 0x84, 0x3f, 0x85, 0x72, 0x64, 0x07, 0x9c, 0x24, 0x2e, 0x49, 0x29, 0xb2, 0x03,
	0xc6, 0x89, 0x1d, 0x8c, 0xb2, 0x95, 0x3a, 0x62, 0xc6, 0x6a, 0x26, 0x18, 0x45, 0xe1, 0x58, 0xcd,
	0x12, 0x06, 0x73, 0x30, 0x46, 0x29, 0x75, 0x30, 0xc6, 0x88, 0x6d, 0x6f, 0xf2, 0x49, 0xd0, 0x2a,
	0xf3, 0xfa, 0xdc, 0xbf, 0x74, 0x85, 0xdb, 0x8a, 0xae, 0x33, 0x22, 0xcb, 0x98, 0x1b, 0xf8, 0x04,
	0xaa, 0xe2, 0xaa, 0xb0, 0x72, 0x57, 0xb8, 0x5c, 0xf7, 0xf2, 0x72, 0x83, 0x84, 0x4a, 0x36, 0x2a,
	0xac, 0x3e, 0x56, 0x10, 0x98, 0x4b, 0x6b, 0xe1, 0xf0, 0x4b, 0x5c, 0x25, 0x65, 0x2b, 0x08, 0xd8,
	0xac, 0x91, 0x7f, 0xcd, 0x43, 0x39, 0x4e, 0x01, 0x37, 0x01, 0x14, 0x5d, 0x27, 0x9a, 0xa1, 0x99,
	0x8a, 0x8e, 0x72, 0xf8, 0x1a, 0x5c, 0x49, 0xd6, 0xcf, 0x34, 0x5d, 0xd3, 0x0d, 0xd6, 0x97, 0x08,
	0xea, 0x69, 0x50, 0xff, 0x58, 0x17, 0xad, 0x99, 0x22, 0x87, 0xc7, 0xba, 0x68, 0xcd, 0x04, 0x31,
	0xfa, 0x3a, 0x2a, 0x65, 0x81, 0xc9, 0x40, 0x47, 0x57, 0xb3, 0xd2, 0x44, 0x9b, 0x18, 0xac, 0x81,
	0xef, 0xe0, 0x4f, 0x00, 0x25, 0xe0, 0x01, 0xe9, 0x1d, 0x1e, 0x0f, 0x55, 0x03, 0x7d, 0x93, 0xe5,
	0x1e, 0x92, 0x21, 0xba, 0x9b, 0x4d, 0xb3, 0xf7, 0x0c, 0x75, 0x31, 0x86, 0x66, 0x36, 0xa3, 0xd3,
	0x5d, 0xf4, 0x5d, 0x36, 0x27, 0x55, 0x53, 0x87, 0xe8, 0x49, 0x76, 0xc7, 0xc1, 0xd8, 0xe0, 0x1f,
	0xf3, 0x7d, 0x36, 0x4c, 0x1b, 0xeb, 0x07, 0xe8, 0x79, 0x16, 0x39, 0x25, 0x44, 0x47, 0x01, 0xbe,
	0xba, 0x41, 0xc6, 0x7d, 0x43, 0x47, 0x3f, 0x4b, 0x37, 0xf3, 0x48, 0x92, 0x6f, 0x43, 0x35, 0xad,
	0x35, 0xeb, 0xe2, 0x89, 0x3e, 0x52, 0xd4, 0x23, 0x94, 0x63, 0xd7, 0x78, 0xa0, 0xfd, 0xa8, 0xf2,
	0x95, 0x24, 0xff, 0x95, 0x87, 0xba, 0x38, 0xa3, 0x13, 0x3f, 0xec, 0x51, 0x3e, 0x77, 0x93, 0x31,
	0x6d, 0x7a, 0xce, 0xb9, 0xe3, 0xf1, 0x66, 0x6e, 0x90, 0x46, 0x82, 0x8e, 0x18, 0x88, 0x0d, 0x16,
	0xe6, 0x98, 0xb6, 0x15, 0x58, 0x53, 0xd7, 0x63, 0x33, 0x5e, 0xdc, 0xbc, 0x6f, 0xdf, 0xd7, 0x0a,
	0x62, 0x9b, 0xb6, 0x4e, 0x9d, 0xbe, 0x15, 0x30, 0x55, 0xf6, 0x1b, 0x6b, 0xe0, 0x17, 0x70, 0x95,
	0xa9, 0x9e, 0xaf, 0xbc, 0xa5, 0x43, 0x13, 0xe1, 0xc2, 0x87, 0x0a, 0x9f, 0xae, 0x3c, 0x82, 0x02,
	0xfe, 0xbb, 0x91, 0x91, 0xbb, 0x50, 0x12, 0x9b, 0xb2, 0x52, 0xeb, 0x64, 0x68, 0xf6, 0x7b, 0xba,
	0x39, 0x54, 0x7b, 0xfb, 0xa3, 0xe1, 0x00, 0xe5, 0xd8, 0xe1, 0x26, 0xe0, 0x40, 0x19, 0x0b, 0x54,
	0x8a, 0x49, 0xa7, 0x2b, 0x2f, 0x21, 0x9d, 0x4e, 0x46, 0xff, 0x25, 0x31, 0x30, 0x43, 0xfa, 0xad,
	0x00, 0x8d, 0x7f, 0x0d, 0x74, 0x7c, 0x0b, 0x1a, 0x0b, 0xeb, 0x8d, 0x49, 0x9d, 0x33, 0x73, 0x7a,
	0x61, 0xae, 0x92, 0x9a, 0xc2, 0xc2, 0x7a, 0x43, 0x9c, 0xb3, 0xfd, 0x8b, 0x89, 0xf7, 0x56, 0xc8,
	0xcc, 0xe3, 0xf5, 0xcc, 0x84, 0x0c, 0x3c, 0x7c, 0x1d, 0x4a, 0xf3, 0x29, 0x65, 0x74, 0x31, 0x2a,
	0x8a, 0xf3, 0x29, 0x9d, 0xa4, 0xf0, 0xcc, 0x8b, 0x07, 0x05, 0x83, 0x07, 0x1e, 0xfe, 0x01, 0x0a,
	0x67, 0xb6, 0xcb, 0x67, 0x44, 0xb3, 0x73, 0xe7, 0x92, 0x4f, 0x4f, 0xfb, 0xc4, 0x76, 0x09, 0xe3,
	0xe1, 0x47, 0x50, 0xb0, 0x68, 0xc0, 0x27, 0x49, 0xad, 0xf3, 0xe5, 0xe5, 0x8a, 0x4f, 0x18, 0x45,
	0xfe, 0x5d, 0x82, 0xc2, 0x89, 0xed, 0xe2, 0x2a, 0x14, 0x4f, 0xfa, 0x8a, 0x79, 0x0f, 0xe5, 0x12,
	0xf3, 0x3e, 0x92, 0x12, 0xb3, 0x83, 0xf2, 0x89, 0xd9, 0x45, 0x85, 0xc4, 0x7c, 0x80, 0xb6, 0x12,
	0xf3, 0x21, 0x2a, 0x26, 0xe6, 0x2e, 0x2a, 0x25, 0xe6, 0x1e, 0x2a, 0x27, 0xe6, 0x23, 0x54, 0x49,
	0xcc, 0xc7, 0xa8, 0xca, 0x5a, 0x9c, 0xc7, 0x3e, 0x44, 0xbd, 0xd4, 0xde, 0x45, 0xfb, 0xa9, 0xbd,
	0x87, 0xfa, 0x89, 0xbd, 0x77, 0x0f, 0x1d, 0xa4, 0xf6, 0x43, 0x74, 0x94, 0xda, 0x8f, 0x91, 0x26,
	0xff, 0x9d, 0x87, 0x1b, 0xef, 0xfc, 0x9f, 0x80, 0x27, 0x50, 0x0e, 0x57, 0x41, 0xe0, 0xd3, 0x88,
	0x1f, 0x61, 0xb3, 0xf3, 0xe4, 0x23, 0xfe, 0x6d, 0xb4, 0xc7, 0x42, 0x82, 0x24, 0x5a, 0x78, 0x0a,
	0x75, 0x6b, 0x36, 0xa3, 0x4e, 0x18, 0x8a, 0xa7, 0x5e, 0xdc, 0xa5, 0xa7, 0x1f, 0xa3, 0xdd, 0x13,
	0x3a, 0xfc, 0xc9, 0xaf, 0x59, 0x9b, 0x05, 0xbb, 0xd8, 0xa1, 0x43, 0xcf, 0x1d, 0x6a, 0xc6, 0x28,
	0xef, 0xa2, 0x2a, 0x69, 0x08, 0x34, 0xe6, 0xc9, 0x5f, 0x40, 0x39, 0x4e, 0x8f, 0x4f, 0x8a, 0xa4,
	0xab, 0x73, 0xb8, 0x06, 0xe5, 0xa4, 0xf1, 0x25, 0x79, 0x0f, 0x6a, 0x99, 0x8d, 0xd8, 0xcb, 0xa8,
	0xe8, 0xe7, 0x0f, 0xc4, 0x1b, 0xa9, 0xe8, 0xe7, 0xbb, 0x48, 0xc2, 0x65, 0x28, 0x4c, 0xc8, 0x08,
	0xe5, 0x19, 0x71, 0xac, 0xe8, 0xe6, 0x84, 0x28, 0xa8, 0xb0, 0x5f, 0x7e, 0x51, 0x64, 0x5f, 0x18,
	0x4e, 0x4b, 0xfc, 0x3d, 0xea, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x25, 0x49, 0xd8, 0xfe, 0xab,
	0x0a, 0x00, 0x00,
}
