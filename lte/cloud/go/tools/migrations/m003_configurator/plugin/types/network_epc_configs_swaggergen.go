/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkEpcConfigs EPC (evolved packet core) cellular configuration for a network
// swagger:model network_epc_configs
type NetworkEpcConfigs struct {

	// cloud subscriberdb enabled
	CloudSubscriberdbEnabled bool `json:"cloud_subscriberdb_enabled,omitempty"`

	// default rule id
	DefaultRuleID string `json:"default_rule_id,omitempty"`

	// lte auth amf
	// Format: byte
	LteAuthAmf strfmt.Base64 `json:"lte_auth_amf,omitempty"`

	// lte auth op
	// Format: byte
	LteAuthOp strfmt.Base64 `json:"lte_auth_op,omitempty"`

	// mcc
	// Pattern: ^(\d{3})$
	Mcc string `json:"mcc,omitempty"`

	// mnc
	// Pattern: ^(\d{2,3})$
	Mnc string `json:"mnc,omitempty"`

	// Configuration for network services. Services will be instantiated in the listed order.
	NetworkServices []string `json:"network_services,omitempty"`

	// relay enabled
	RelayEnabled bool `json:"relay_enabled,omitempty"`

	// sub profiles
	SubProfiles map[string]NetworkEpcConfigsSubProfilesAnon `json:"sub_profiles,omitempty"`

	// tac
	// Maximum: 65535
	Tac uint32 `json:"tac,omitempty"`
}

// Validate validates this network epc configs
func (m *NetworkEpcConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLteAuthAmf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLteAuthOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMcc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkEpcConfigs) validateLteAuthAmf(formats strfmt.Registry) error {

	if swag.IsZero(m.LteAuthAmf) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *NetworkEpcConfigs) validateLteAuthOp(formats strfmt.Registry) error {

	if swag.IsZero(m.LteAuthOp) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *NetworkEpcConfigs) validateMcc(formats strfmt.Registry) error {

	if swag.IsZero(m.Mcc) { // not required
		return nil
	}

	if err := validate.Pattern("mcc", "body", string(m.Mcc), `^(\d{3})$`); err != nil {
		return err
	}

	return nil
}

func (m *NetworkEpcConfigs) validateMnc(formats strfmt.Registry) error {

	if swag.IsZero(m.Mnc) { // not required
		return nil
	}

	if err := validate.Pattern("mnc", "body", string(m.Mnc), `^(\d{2,3})$`); err != nil {
		return err
	}

	return nil
}

var networkEpcConfigsNetworkServicesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["metering","dpi","policy_enforcement"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkEpcConfigsNetworkServicesItemsEnum = append(networkEpcConfigsNetworkServicesItemsEnum, v)
	}
}

func (m *NetworkEpcConfigs) validateNetworkServicesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkEpcConfigsNetworkServicesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkEpcConfigs) validateNetworkServices(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkServices) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkServices); i++ {

		// value enum
		if err := m.validateNetworkServicesItemsEnum("network_services"+"."+strconv.Itoa(i), "body", m.NetworkServices[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetworkEpcConfigs) validateSubProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.SubProfiles) { // not required
		return nil
	}

	for k := range m.SubProfiles {

		if swag.IsZero(m.SubProfiles[k]) { // not required
			continue
		}
		if val, ok := m.SubProfiles[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *NetworkEpcConfigs) validateTac(formats strfmt.Registry) error {

	if swag.IsZero(m.Tac) { // not required
		return nil
	}

	if err := validate.MaximumInt("tac", "body", int64(m.Tac), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkEpcConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkEpcConfigs) UnmarshalBinary(b []byte) error {
	var res NetworkEpcConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkEpcConfigsSubProfilesAnon network epc configs sub profiles anon
// swagger:model NetworkEpcConfigsSubProfilesAnon
type NetworkEpcConfigsSubProfilesAnon struct {

	// max dl bit rate
	MaxDlBitRate uint64 `json:"max_dl_bit_rate,omitempty"`

	// max ul bit rate
	MaxUlBitRate uint64 `json:"max_ul_bit_rate,omitempty"`
}

// Validate validates this network epc configs sub profiles anon
func (m *NetworkEpcConfigsSubProfilesAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkEpcConfigsSubProfilesAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkEpcConfigsSubProfilesAnon) UnmarshalBinary(b []byte) error {
	var res NetworkEpcConfigsSubProfilesAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
