// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/policydb.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PolicyRule_TrackingType int32

const (
	PolicyRule_ONLY_OCS     PolicyRule_TrackingType = 0
	PolicyRule_ONLY_PCRF    PolicyRule_TrackingType = 1
	PolicyRule_OCS_AND_PCRF PolicyRule_TrackingType = 2
	PolicyRule_NO_TRACKING  PolicyRule_TrackingType = 3
)

var PolicyRule_TrackingType_name = map[int32]string{
	0: "ONLY_OCS",
	1: "ONLY_PCRF",
	2: "OCS_AND_PCRF",
	3: "NO_TRACKING",
}

var PolicyRule_TrackingType_value = map[string]int32{
	"ONLY_OCS":     0,
	"ONLY_PCRF":    1,
	"OCS_AND_PCRF": 2,
	"NO_TRACKING":  3,
}

func (x PolicyRule_TrackingType) String() string {
	return proto.EnumName(PolicyRule_TrackingType_name, int32(x))
}

func (PolicyRule_TrackingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{0, 0}
}

type FlowDescription_Action int32

const (
	FlowDescription_PERMIT FlowDescription_Action = 0
	FlowDescription_DENY   FlowDescription_Action = 1
)

var FlowDescription_Action_name = map[int32]string{
	0: "PERMIT",
	1: "DENY",
}

var FlowDescription_Action_value = map[string]int32{
	"PERMIT": 0,
	"DENY":   1,
}

func (x FlowDescription_Action) String() string {
	return proto.EnumName(FlowDescription_Action_name, int32(x))
}

func (FlowDescription_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{2, 0}
}

type FlowMatch_IPProto int32

const (
	FlowMatch_IPPROTO_IP       FlowMatch_IPProto = 0
	FlowMatch_IPPROTO_HOPOPTS  FlowMatch_IPProto = 0
	FlowMatch_IPPROTO_ICMP     FlowMatch_IPProto = 1
	FlowMatch_IPPROTO_IGMP     FlowMatch_IPProto = 2
	FlowMatch_IPPROTO_TCP      FlowMatch_IPProto = 6
	FlowMatch_IPPROTO_UDP      FlowMatch_IPProto = 17
	FlowMatch_IPPROTO_ROUTING  FlowMatch_IPProto = 43
	FlowMatch_IPPROTO_FRAGMENT FlowMatch_IPProto = 44
	FlowMatch_IPPROTO_GRE      FlowMatch_IPProto = 47
	FlowMatch_IPPROTO_AH       FlowMatch_IPProto = 51
	FlowMatch_IPPROTO_ICMPV6   FlowMatch_IPProto = 58
	FlowMatch_IPPROTO_NONE     FlowMatch_IPProto = 59
	FlowMatch_IPPROTO_DSTOPTS  FlowMatch_IPProto = 60
	FlowMatch_IPPROTO_OSPF     FlowMatch_IPProto = 89
	FlowMatch_IPPROTO_VRRP     FlowMatch_IPProto = 112
	FlowMatch_IPPROTO_SCTP     FlowMatch_IPProto = 132
)

var FlowMatch_IPProto_name = map[int32]string{
	0: "IPPROTO_IP",
	// Duplicate value: 0: "IPPROTO_HOPOPTS",
	1:   "IPPROTO_ICMP",
	2:   "IPPROTO_IGMP",
	6:   "IPPROTO_TCP",
	17:  "IPPROTO_UDP",
	43:  "IPPROTO_ROUTING",
	44:  "IPPROTO_FRAGMENT",
	47:  "IPPROTO_GRE",
	51:  "IPPROTO_AH",
	58:  "IPPROTO_ICMPV6",
	59:  "IPPROTO_NONE",
	60:  "IPPROTO_DSTOPTS",
	89:  "IPPROTO_OSPF",
	112: "IPPROTO_VRRP",
	132: "IPPROTO_SCTP",
}

var FlowMatch_IPProto_value = map[string]int32{
	"IPPROTO_IP":       0,
	"IPPROTO_HOPOPTS":  0,
	"IPPROTO_ICMP":     1,
	"IPPROTO_IGMP":     2,
	"IPPROTO_TCP":      6,
	"IPPROTO_UDP":      17,
	"IPPROTO_ROUTING":  43,
	"IPPROTO_FRAGMENT": 44,
	"IPPROTO_GRE":      47,
	"IPPROTO_AH":       51,
	"IPPROTO_ICMPV6":   58,
	"IPPROTO_NONE":     59,
	"IPPROTO_DSTOPTS":  60,
	"IPPROTO_OSPF":     89,
	"IPPROTO_VRRP":     112,
	"IPPROTO_SCTP":     132,
}

func (x FlowMatch_IPProto) String() string {
	return proto.EnumName(FlowMatch_IPProto_name, int32(x))
}

func (FlowMatch_IPProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{3, 0}
}

type FlowMatch_Direction int32

const (
	FlowMatch_UPLINK   FlowMatch_Direction = 0
	FlowMatch_DOWNLINK FlowMatch_Direction = 1
)

var FlowMatch_Direction_name = map[int32]string{
	0: "UPLINK",
	1: "DOWNLINK",
}

var FlowMatch_Direction_value = map[string]int32{
	"UPLINK":   0,
	"DOWNLINK": 1,
}

func (x FlowMatch_Direction) String() string {
	return proto.EnumName(FlowMatch_Direction_name, int32(x))
}

func (FlowMatch_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{3, 1}
}

type QosArp_PreCap int32

const (
	QosArp_PRE_CAP_ENABLED  QosArp_PreCap = 0
	QosArp_PRE_CAP_DISABLED QosArp_PreCap = 1
)

var QosArp_PreCap_name = map[int32]string{
	0: "PRE_CAP_ENABLED",
	1: "PRE_CAP_DISABLED",
}

var QosArp_PreCap_value = map[string]int32{
	"PRE_CAP_ENABLED":  0,
	"PRE_CAP_DISABLED": 1,
}

func (x QosArp_PreCap) String() string {
	return proto.EnumName(QosArp_PreCap_name, int32(x))
}

func (QosArp_PreCap) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{4, 0}
}

type QosArp_PreVul int32

const (
	QosArp_PRE_VUL_ENABLED  QosArp_PreVul = 0
	QosArp_PRE_VUL_DISABLED QosArp_PreVul = 1
)

var QosArp_PreVul_name = map[int32]string{
	0: "PRE_VUL_ENABLED",
	1: "PRE_VUL_DISABLED",
}

var QosArp_PreVul_value = map[string]int32{
	"PRE_VUL_ENABLED":  0,
	"PRE_VUL_DISABLED": 1,
}

func (x QosArp_PreVul) String() string {
	return proto.EnumName(QosArp_PreVul_name, int32(x))
}

func (QosArp_PreVul) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{4, 1}
}

type FlowQos_Qci int32

const (
	FlowQos_QCI_0  FlowQos_Qci = 0
	FlowQos_QCI_1  FlowQos_Qci = 1
	FlowQos_QCI_2  FlowQos_Qci = 2
	FlowQos_QCI_3  FlowQos_Qci = 3
	FlowQos_QCI_4  FlowQos_Qci = 4
	FlowQos_QCI_5  FlowQos_Qci = 5
	FlowQos_QCI_6  FlowQos_Qci = 6
	FlowQos_QCI_7  FlowQos_Qci = 7
	FlowQos_QCI_8  FlowQos_Qci = 8
	FlowQos_QCI_9  FlowQos_Qci = 9
	FlowQos_QCI_65 FlowQos_Qci = 65
	FlowQos_QCI_66 FlowQos_Qci = 66
	FlowQos_QCI_67 FlowQos_Qci = 67
	FlowQos_QCI_70 FlowQos_Qci = 70
	FlowQos_QCI_75 FlowQos_Qci = 75
	FlowQos_QCI_79 FlowQos_Qci = 79
)

var FlowQos_Qci_name = map[int32]string{
	0:  "QCI_0",
	1:  "QCI_1",
	2:  "QCI_2",
	3:  "QCI_3",
	4:  "QCI_4",
	5:  "QCI_5",
	6:  "QCI_6",
	7:  "QCI_7",
	8:  "QCI_8",
	9:  "QCI_9",
	65: "QCI_65",
	66: "QCI_66",
	67: "QCI_67",
	70: "QCI_70",
	75: "QCI_75",
	79: "QCI_79",
}

var FlowQos_Qci_value = map[string]int32{
	"QCI_0":  0,
	"QCI_1":  1,
	"QCI_2":  2,
	"QCI_3":  3,
	"QCI_4":  4,
	"QCI_5":  5,
	"QCI_6":  6,
	"QCI_7":  7,
	"QCI_8":  8,
	"QCI_9":  9,
	"QCI_65": 65,
	"QCI_66": 66,
	"QCI_67": 67,
	"QCI_70": 70,
	"QCI_75": 75,
	"QCI_79": 79,
}

func (x FlowQos_Qci) String() string {
	return proto.EnumName(FlowQos_Qci_name, int32(x))
}

func (FlowQos_Qci) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{5, 0}
}

type RedirectInformation_Support int32

const (
	RedirectInformation_DISABLED RedirectInformation_Support = 0
	RedirectInformation_ENABLED  RedirectInformation_Support = 1
)

var RedirectInformation_Support_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}

var RedirectInformation_Support_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x RedirectInformation_Support) String() string {
	return proto.EnumName(RedirectInformation_Support_name, int32(x))
}

func (RedirectInformation_Support) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{6, 0}
}

type RedirectInformation_AddressType int32

const (
	RedirectInformation_IPv4    RedirectInformation_AddressType = 0
	RedirectInformation_IPv6    RedirectInformation_AddressType = 1
	RedirectInformation_URL     RedirectInformation_AddressType = 2
	RedirectInformation_SIP_URI RedirectInformation_AddressType = 3
)

var RedirectInformation_AddressType_name = map[int32]string{
	0: "IPv4",
	1: "IPv6",
	2: "URL",
	3: "SIP_URI",
}

var RedirectInformation_AddressType_value = map[string]int32{
	"IPv4":    0,
	"IPv6":    1,
	"URL":     2,
	"SIP_URI": 3,
}

func (x RedirectInformation_AddressType) String() string {
	return proto.EnumName(RedirectInformation_AddressType_name, int32(x))
}

func (RedirectInformation_AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{6, 1}
}

// --------------------------------------------------------------------------
// Policy flow rules
//
// A rule is a named policy that defines a type of traffic to meter.
// Each rule has a unique human readable ID associated with the traffic
// it meters such as "All TCP Traffic to Facebook". They are classified
// using FlowMatch, and if two rules intersect, the one with the highest
// priority takes precedence. These are defined on the cloud and are streamed
// to the gateway Metering application.
//
// A match is an extensible reflection of Ryu OFPMatch which is used by rules
// to classify flows for each subscriber. For new fields and definitons see:
// http://ryu.readthedocs.io/en/latest/ofproto_v1_4_ref.html#flow-match-structure
// --------------------------------------------------------------------------
type PolicyRule struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The precedence for the flow. Same definition as 3GPP.
	Priority             uint32                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	RatingGroup          uint32                  `protobuf:"varint,4,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`
	MonitoringKey        []byte                  `protobuf:"bytes,6,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Redirect             *RedirectInformation    `protobuf:"bytes,9,opt,name=redirect,proto3" json:"redirect,omitempty"`
	FlowList             []*FlowDescription      `protobuf:"bytes,7,rep,name=flow_list,json=flowList,proto3" json:"flow_list,omitempty"`
	Qos                  *FlowQos                `protobuf:"bytes,8,opt,name=qos,proto3" json:"qos,omitempty"`
	TrackingType         PolicyRule_TrackingType `protobuf:"varint,10,opt,name=tracking_type,json=trackingType,proto3,enum=magma.lte.PolicyRule_TrackingType" json:"tracking_type,omitempty"`
	HardTimeout          uint32                  `protobuf:"varint,11,opt,name=hard_timeout,json=hardTimeout,proto3" json:"hard_timeout,omitempty"`
	ServiceIdentifier    *ServiceIdentifier      `protobuf:"bytes,12,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PolicyRule) Reset()         { *m = PolicyRule{} }
func (m *PolicyRule) String() string { return proto.CompactTextString(m) }
func (*PolicyRule) ProtoMessage()    {}
func (*PolicyRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{0}
}

func (m *PolicyRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyRule.Unmarshal(m, b)
}
func (m *PolicyRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyRule.Marshal(b, m, deterministic)
}
func (m *PolicyRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRule.Merge(m, src)
}
func (m *PolicyRule) XXX_Size() int {
	return xxx_messageInfo_PolicyRule.Size(m)
}
func (m *PolicyRule) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRule.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRule proto.InternalMessageInfo

func (m *PolicyRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolicyRule) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *PolicyRule) GetRatingGroup() uint32 {
	if m != nil {
		return m.RatingGroup
	}
	return 0
}

func (m *PolicyRule) GetMonitoringKey() []byte {
	if m != nil {
		return m.MonitoringKey
	}
	return nil
}

func (m *PolicyRule) GetRedirect() *RedirectInformation {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *PolicyRule) GetFlowList() []*FlowDescription {
	if m != nil {
		return m.FlowList
	}
	return nil
}

func (m *PolicyRule) GetQos() *FlowQos {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *PolicyRule) GetTrackingType() PolicyRule_TrackingType {
	if m != nil {
		return m.TrackingType
	}
	return PolicyRule_ONLY_OCS
}

func (m *PolicyRule) GetHardTimeout() uint32 {
	if m != nil {
		return m.HardTimeout
	}
	return 0
}

func (m *PolicyRule) GetServiceIdentifier() *ServiceIdentifier {
	if m != nil {
		return m.ServiceIdentifier
	}
	return nil
}

type ServiceIdentifier struct {
	Value                uint32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceIdentifier) Reset()         { *m = ServiceIdentifier{} }
func (m *ServiceIdentifier) String() string { return proto.CompactTextString(m) }
func (*ServiceIdentifier) ProtoMessage()    {}
func (*ServiceIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{1}
}

func (m *ServiceIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceIdentifier.Unmarshal(m, b)
}
func (m *ServiceIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceIdentifier.Marshal(b, m, deterministic)
}
func (m *ServiceIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceIdentifier.Merge(m, src)
}
func (m *ServiceIdentifier) XXX_Size() int {
	return xxx_messageInfo_ServiceIdentifier.Size(m)
}
func (m *ServiceIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceIdentifier proto.InternalMessageInfo

func (m *ServiceIdentifier) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FlowDescription struct {
	Match                *FlowMatch             `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Action               FlowDescription_Action `protobuf:"varint,2,opt,name=action,proto3,enum=magma.lte.FlowDescription_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FlowDescription) Reset()         { *m = FlowDescription{} }
func (m *FlowDescription) String() string { return proto.CompactTextString(m) }
func (*FlowDescription) ProtoMessage()    {}
func (*FlowDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{2}
}

func (m *FlowDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowDescription.Unmarshal(m, b)
}
func (m *FlowDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowDescription.Marshal(b, m, deterministic)
}
func (m *FlowDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowDescription.Merge(m, src)
}
func (m *FlowDescription) XXX_Size() int {
	return xxx_messageInfo_FlowDescription.Size(m)
}
func (m *FlowDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowDescription.DiscardUnknown(m)
}

var xxx_messageInfo_FlowDescription proto.InternalMessageInfo

func (m *FlowDescription) GetMatch() *FlowMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *FlowDescription) GetAction() FlowDescription_Action {
	if m != nil {
		return m.Action
	}
	return FlowDescription_PERMIT
}

type FlowMatch struct {
	Ipv4Src              string              `protobuf:"bytes,1,opt,name=ipv4_src,json=ipv4Src,proto3" json:"ipv4_src,omitempty"`
	Ipv4Dst              string              `protobuf:"bytes,2,opt,name=ipv4_dst,json=ipv4Dst,proto3" json:"ipv4_dst,omitempty"`
	TcpSrc               uint32              `protobuf:"varint,3,opt,name=tcp_src,json=tcpSrc,proto3" json:"tcp_src,omitempty"`
	TcpDst               uint32              `protobuf:"varint,4,opt,name=tcp_dst,json=tcpDst,proto3" json:"tcp_dst,omitempty"`
	UdpSrc               uint32              `protobuf:"varint,5,opt,name=udp_src,json=udpSrc,proto3" json:"udp_src,omitempty"`
	UdpDst               uint32              `protobuf:"varint,6,opt,name=udp_dst,json=udpDst,proto3" json:"udp_dst,omitempty"`
	IpProto              FlowMatch_IPProto   `protobuf:"varint,7,opt,name=ip_proto,json=ipProto,proto3,enum=magma.lte.FlowMatch_IPProto" json:"ip_proto,omitempty"`
	Direction            FlowMatch_Direction `protobuf:"varint,8,opt,name=direction,proto3,enum=magma.lte.FlowMatch_Direction" json:"direction,omitempty"`
	AppName              string              `protobuf:"bytes,9,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FlowMatch) Reset()         { *m = FlowMatch{} }
func (m *FlowMatch) String() string { return proto.CompactTextString(m) }
func (*FlowMatch) ProtoMessage()    {}
func (*FlowMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{3}
}

func (m *FlowMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowMatch.Unmarshal(m, b)
}
func (m *FlowMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowMatch.Marshal(b, m, deterministic)
}
func (m *FlowMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowMatch.Merge(m, src)
}
func (m *FlowMatch) XXX_Size() int {
	return xxx_messageInfo_FlowMatch.Size(m)
}
func (m *FlowMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowMatch.DiscardUnknown(m)
}

var xxx_messageInfo_FlowMatch proto.InternalMessageInfo

func (m *FlowMatch) GetIpv4Src() string {
	if m != nil {
		return m.Ipv4Src
	}
	return ""
}

func (m *FlowMatch) GetIpv4Dst() string {
	if m != nil {
		return m.Ipv4Dst
	}
	return ""
}

func (m *FlowMatch) GetTcpSrc() uint32 {
	if m != nil {
		return m.TcpSrc
	}
	return 0
}

func (m *FlowMatch) GetTcpDst() uint32 {
	if m != nil {
		return m.TcpDst
	}
	return 0
}

func (m *FlowMatch) GetUdpSrc() uint32 {
	if m != nil {
		return m.UdpSrc
	}
	return 0
}

func (m *FlowMatch) GetUdpDst() uint32 {
	if m != nil {
		return m.UdpDst
	}
	return 0
}

func (m *FlowMatch) GetIpProto() FlowMatch_IPProto {
	if m != nil {
		return m.IpProto
	}
	return FlowMatch_IPPROTO_IP
}

func (m *FlowMatch) GetDirection() FlowMatch_Direction {
	if m != nil {
		return m.Direction
	}
	return FlowMatch_UPLINK
}

func (m *FlowMatch) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

type QosArp struct {
	PriorityLevel        uint32        `protobuf:"varint,1,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreCapability        QosArp_PreCap `protobuf:"varint,2,opt,name=pre_capability,json=preCapability,proto3,enum=magma.lte.QosArp_PreCap" json:"pre_capability,omitempty"`
	PreVulnerability     QosArp_PreVul `protobuf:"varint,3,opt,name=pre_vulnerability,json=preVulnerability,proto3,enum=magma.lte.QosArp_PreVul" json:"pre_vulnerability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QosArp) Reset()         { *m = QosArp{} }
func (m *QosArp) String() string { return proto.CompactTextString(m) }
func (*QosArp) ProtoMessage()    {}
func (*QosArp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{4}
}

func (m *QosArp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosArp.Unmarshal(m, b)
}
func (m *QosArp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosArp.Marshal(b, m, deterministic)
}
func (m *QosArp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosArp.Merge(m, src)
}
func (m *QosArp) XXX_Size() int {
	return xxx_messageInfo_QosArp.Size(m)
}
func (m *QosArp) XXX_DiscardUnknown() {
	xxx_messageInfo_QosArp.DiscardUnknown(m)
}

var xxx_messageInfo_QosArp proto.InternalMessageInfo

func (m *QosArp) GetPriorityLevel() uint32 {
	if m != nil {
		return m.PriorityLevel
	}
	return 0
}

func (m *QosArp) GetPreCapability() QosArp_PreCap {
	if m != nil {
		return m.PreCapability
	}
	return QosArp_PRE_CAP_ENABLED
}

func (m *QosArp) GetPreVulnerability() QosArp_PreVul {
	if m != nil {
		return m.PreVulnerability
	}
	return QosArp_PRE_VUL_ENABLED
}

type FlowQos struct {
	MaxReqBwUl           uint32      `protobuf:"varint,1,opt,name=max_req_bw_ul,json=maxReqBwUl,proto3" json:"max_req_bw_ul,omitempty"`
	MaxReqBwDl           uint32      `protobuf:"varint,2,opt,name=max_req_bw_dl,json=maxReqBwDl,proto3" json:"max_req_bw_dl,omitempty"`
	GbrUl                uint32      `protobuf:"varint,3,opt,name=gbr_ul,json=gbrUl,proto3" json:"gbr_ul,omitempty"`
	GbrDl                uint32      `protobuf:"varint,4,opt,name=gbr_dl,json=gbrDl,proto3" json:"gbr_dl,omitempty"`
	Qci                  FlowQos_Qci `protobuf:"varint,5,opt,name=qci,proto3,enum=magma.lte.FlowQos_Qci" json:"qci,omitempty"`
	Arp                  *QosArp     `protobuf:"bytes,6,opt,name=arp,proto3" json:"arp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FlowQos) Reset()         { *m = FlowQos{} }
func (m *FlowQos) String() string { return proto.CompactTextString(m) }
func (*FlowQos) ProtoMessage()    {}
func (*FlowQos) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{5}
}

func (m *FlowQos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowQos.Unmarshal(m, b)
}
func (m *FlowQos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowQos.Marshal(b, m, deterministic)
}
func (m *FlowQos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowQos.Merge(m, src)
}
func (m *FlowQos) XXX_Size() int {
	return xxx_messageInfo_FlowQos.Size(m)
}
func (m *FlowQos) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowQos.DiscardUnknown(m)
}

var xxx_messageInfo_FlowQos proto.InternalMessageInfo

func (m *FlowQos) GetMaxReqBwUl() uint32 {
	if m != nil {
		return m.MaxReqBwUl
	}
	return 0
}

func (m *FlowQos) GetMaxReqBwDl() uint32 {
	if m != nil {
		return m.MaxReqBwDl
	}
	return 0
}

func (m *FlowQos) GetGbrUl() uint32 {
	if m != nil {
		return m.GbrUl
	}
	return 0
}

func (m *FlowQos) GetGbrDl() uint32 {
	if m != nil {
		return m.GbrDl
	}
	return 0
}

func (m *FlowQos) GetQci() FlowQos_Qci {
	if m != nil {
		return m.Qci
	}
	return FlowQos_QCI_0
}

func (m *FlowQos) GetArp() *QosArp {
	if m != nil {
		return m.Arp
	}
	return nil
}

type RedirectInformation struct {
	Support              RedirectInformation_Support     `protobuf:"varint,1,opt,name=support,proto3,enum=magma.lte.RedirectInformation_Support" json:"support,omitempty"`
	AddressType          RedirectInformation_AddressType `protobuf:"varint,2,opt,name=address_type,json=addressType,proto3,enum=magma.lte.RedirectInformation_AddressType" json:"address_type,omitempty"`
	ServerAddress        string                          `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *RedirectInformation) Reset()         { *m = RedirectInformation{} }
func (m *RedirectInformation) String() string { return proto.CompactTextString(m) }
func (*RedirectInformation) ProtoMessage()    {}
func (*RedirectInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{6}
}

func (m *RedirectInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirectInformation.Unmarshal(m, b)
}
func (m *RedirectInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirectInformation.Marshal(b, m, deterministic)
}
func (m *RedirectInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirectInformation.Merge(m, src)
}
func (m *RedirectInformation) XXX_Size() int {
	return xxx_messageInfo_RedirectInformation.Size(m)
}
func (m *RedirectInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirectInformation.DiscardUnknown(m)
}

var xxx_messageInfo_RedirectInformation proto.InternalMessageInfo

func (m *RedirectInformation) GetSupport() RedirectInformation_Support {
	if m != nil {
		return m.Support
	}
	return RedirectInformation_DISABLED
}

func (m *RedirectInformation) GetAddressType() RedirectInformation_AddressType {
	if m != nil {
		return m.AddressType
	}
	return RedirectInformation_IPv4
}

func (m *RedirectInformation) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

type ChargingRuleNameSet struct {
	RuleNames            []string `protobuf:"bytes,2,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChargingRuleNameSet) Reset()         { *m = ChargingRuleNameSet{} }
func (m *ChargingRuleNameSet) String() string { return proto.CompactTextString(m) }
func (*ChargingRuleNameSet) ProtoMessage()    {}
func (*ChargingRuleNameSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{7}
}

func (m *ChargingRuleNameSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingRuleNameSet.Unmarshal(m, b)
}
func (m *ChargingRuleNameSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingRuleNameSet.Marshal(b, m, deterministic)
}
func (m *ChargingRuleNameSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingRuleNameSet.Merge(m, src)
}
func (m *ChargingRuleNameSet) XXX_Size() int {
	return xxx_messageInfo_ChargingRuleNameSet.Size(m)
}
func (m *ChargingRuleNameSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingRuleNameSet.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingRuleNameSet proto.InternalMessageInfo

func (m *ChargingRuleNameSet) GetRuleNames() []string {
	if m != nil {
		return m.RuleNames
	}
	return nil
}

type ChargingRuleBaseNameRecord struct {
	Name                 string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	RuleNamesSet         *ChargingRuleNameSet `protobuf:"bytes,2,opt,name=RuleNamesSet,proto3" json:"RuleNamesSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChargingRuleBaseNameRecord) Reset()         { *m = ChargingRuleBaseNameRecord{} }
func (m *ChargingRuleBaseNameRecord) String() string { return proto.CompactTextString(m) }
func (*ChargingRuleBaseNameRecord) ProtoMessage()    {}
func (*ChargingRuleBaseNameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{8}
}

func (m *ChargingRuleBaseNameRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingRuleBaseNameRecord.Unmarshal(m, b)
}
func (m *ChargingRuleBaseNameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingRuleBaseNameRecord.Marshal(b, m, deterministic)
}
func (m *ChargingRuleBaseNameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingRuleBaseNameRecord.Merge(m, src)
}
func (m *ChargingRuleBaseNameRecord) XXX_Size() int {
	return xxx_messageInfo_ChargingRuleBaseNameRecord.Size(m)
}
func (m *ChargingRuleBaseNameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingRuleBaseNameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingRuleBaseNameRecord proto.InternalMessageInfo

func (m *ChargingRuleBaseNameRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChargingRuleBaseNameRecord) GetRuleNamesSet() *ChargingRuleNameSet {
	if m != nil {
		return m.RuleNamesSet
	}
	return nil
}

// AssignedPolicies contains the base names and policy rules currently assigned
// for a subscriber
type AssignedPolicies struct {
	AssignedBaseNames    []string `protobuf:"bytes,10,rep,name=assigned_base_names,json=assignedBaseNames,proto3" json:"assigned_base_names,omitempty"`
	AssignedPolicies     []string `protobuf:"bytes,11,rep,name=assigned_policies,json=assignedPolicies,proto3" json:"assigned_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignedPolicies) Reset()         { *m = AssignedPolicies{} }
func (m *AssignedPolicies) String() string { return proto.CompactTextString(m) }
func (*AssignedPolicies) ProtoMessage()    {}
func (*AssignedPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{9}
}

func (m *AssignedPolicies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignedPolicies.Unmarshal(m, b)
}
func (m *AssignedPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignedPolicies.Marshal(b, m, deterministic)
}
func (m *AssignedPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignedPolicies.Merge(m, src)
}
func (m *AssignedPolicies) XXX_Size() int {
	return xxx_messageInfo_AssignedPolicies.Size(m)
}
func (m *AssignedPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignedPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_AssignedPolicies proto.InternalMessageInfo

func (m *AssignedPolicies) GetAssignedBaseNames() []string {
	if m != nil {
		return m.AssignedBaseNames
	}
	return nil
}

func (m *AssignedPolicies) GetAssignedPolicies() []string {
	if m != nil {
		return m.AssignedPolicies
	}
	return nil
}

// InstalledPolicies contains the base names and policy rules currently active
// for a subscriber
type InstalledPolicies struct {
	InstalledBaseNames   []string `protobuf:"bytes,10,rep,name=installed_base_names,json=installedBaseNames,proto3" json:"installed_base_names,omitempty"`
	InstalledPolicies    []string `protobuf:"bytes,11,rep,name=installed_policies,json=installedPolicies,proto3" json:"installed_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstalledPolicies) Reset()         { *m = InstalledPolicies{} }
func (m *InstalledPolicies) String() string { return proto.CompactTextString(m) }
func (*InstalledPolicies) ProtoMessage()    {}
func (*InstalledPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{10}
}

func (m *InstalledPolicies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstalledPolicies.Unmarshal(m, b)
}
func (m *InstalledPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstalledPolicies.Marshal(b, m, deterministic)
}
func (m *InstalledPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstalledPolicies.Merge(m, src)
}
func (m *InstalledPolicies) XXX_Size() int {
	return xxx_messageInfo_InstalledPolicies.Size(m)
}
func (m *InstalledPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_InstalledPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_InstalledPolicies proto.InternalMessageInfo

func (m *InstalledPolicies) GetInstalledBaseNames() []string {
	if m != nil {
		return m.InstalledBaseNames
	}
	return nil
}

func (m *InstalledPolicies) GetInstalledPolicies() []string {
	if m != nil {
		return m.InstalledPolicies
	}
	return nil
}

// --------------------------------------------------------------------------
// PolicyAssignment controller definition.
// --------------------------------------------------------------------------
type EnableStaticRuleRequest struct {
	Imsi                 string   `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RuleIds              []string `protobuf:"bytes,2,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"`
	BaseNames            []string `protobuf:"bytes,3,rep,name=base_names,json=baseNames,proto3" json:"base_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableStaticRuleRequest) Reset()         { *m = EnableStaticRuleRequest{} }
func (m *EnableStaticRuleRequest) String() string { return proto.CompactTextString(m) }
func (*EnableStaticRuleRequest) ProtoMessage()    {}
func (*EnableStaticRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{11}
}

func (m *EnableStaticRuleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableStaticRuleRequest.Unmarshal(m, b)
}
func (m *EnableStaticRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableStaticRuleRequest.Marshal(b, m, deterministic)
}
func (m *EnableStaticRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableStaticRuleRequest.Merge(m, src)
}
func (m *EnableStaticRuleRequest) XXX_Size() int {
	return xxx_messageInfo_EnableStaticRuleRequest.Size(m)
}
func (m *EnableStaticRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableStaticRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableStaticRuleRequest proto.InternalMessageInfo

func (m *EnableStaticRuleRequest) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *EnableStaticRuleRequest) GetRuleIds() []string {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

func (m *EnableStaticRuleRequest) GetBaseNames() []string {
	if m != nil {
		return m.BaseNames
	}
	return nil
}

type DisableStaticRuleRequest struct {
	Imsi                 string   `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RuleIds              []string `protobuf:"bytes,2,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"`
	BaseNames            []string `protobuf:"bytes,3,rep,name=base_names,json=baseNames,proto3" json:"base_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableStaticRuleRequest) Reset()         { *m = DisableStaticRuleRequest{} }
func (m *DisableStaticRuleRequest) String() string { return proto.CompactTextString(m) }
func (*DisableStaticRuleRequest) ProtoMessage()    {}
func (*DisableStaticRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a2a416c199de0d, []int{12}
}

func (m *DisableStaticRuleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableStaticRuleRequest.Unmarshal(m, b)
}
func (m *DisableStaticRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableStaticRuleRequest.Marshal(b, m, deterministic)
}
func (m *DisableStaticRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableStaticRuleRequest.Merge(m, src)
}
func (m *DisableStaticRuleRequest) XXX_Size() int {
	return xxx_messageInfo_DisableStaticRuleRequest.Size(m)
}
func (m *DisableStaticRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableStaticRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableStaticRuleRequest proto.InternalMessageInfo

func (m *DisableStaticRuleRequest) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *DisableStaticRuleRequest) GetRuleIds() []string {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

func (m *DisableStaticRuleRequest) GetBaseNames() []string {
	if m != nil {
		return m.BaseNames
	}
	return nil
}

func init() {
	proto.RegisterEnum("magma.lte.PolicyRule_TrackingType", PolicyRule_TrackingType_name, PolicyRule_TrackingType_value)
	proto.RegisterEnum("magma.lte.FlowDescription_Action", FlowDescription_Action_name, FlowDescription_Action_value)
	proto.RegisterEnum("magma.lte.FlowMatch_IPProto", FlowMatch_IPProto_name, FlowMatch_IPProto_value)
	proto.RegisterEnum("magma.lte.FlowMatch_Direction", FlowMatch_Direction_name, FlowMatch_Direction_value)
	proto.RegisterEnum("magma.lte.QosArp_PreCap", QosArp_PreCap_name, QosArp_PreCap_value)
	proto.RegisterEnum("magma.lte.QosArp_PreVul", QosArp_PreVul_name, QosArp_PreVul_value)
	proto.RegisterEnum("magma.lte.FlowQos_Qci", FlowQos_Qci_name, FlowQos_Qci_value)
	proto.RegisterEnum("magma.lte.RedirectInformation_Support", RedirectInformation_Support_name, RedirectInformation_Support_value)
	proto.RegisterEnum("magma.lte.RedirectInformation_AddressType", RedirectInformation_AddressType_name, RedirectInformation_AddressType_value)
	proto.RegisterType((*PolicyRule)(nil), "magma.lte.PolicyRule")
	proto.RegisterType((*ServiceIdentifier)(nil), "magma.lte.ServiceIdentifier")
	proto.RegisterType((*FlowDescription)(nil), "magma.lte.FlowDescription")
	proto.RegisterType((*FlowMatch)(nil), "magma.lte.FlowMatch")
	proto.RegisterType((*QosArp)(nil), "magma.lte.QosArp")
	proto.RegisterType((*FlowQos)(nil), "magma.lte.FlowQos")
	proto.RegisterType((*RedirectInformation)(nil), "magma.lte.RedirectInformation")
	proto.RegisterType((*ChargingRuleNameSet)(nil), "magma.lte.ChargingRuleNameSet")
	proto.RegisterType((*ChargingRuleBaseNameRecord)(nil), "magma.lte.ChargingRuleBaseNameRecord")
	proto.RegisterType((*AssignedPolicies)(nil), "magma.lte.AssignedPolicies")
	proto.RegisterType((*InstalledPolicies)(nil), "magma.lte.InstalledPolicies")
	proto.RegisterType((*EnableStaticRuleRequest)(nil), "magma.lte.EnableStaticRuleRequest")
	proto.RegisterType((*DisableStaticRuleRequest)(nil), "magma.lte.DisableStaticRuleRequest")
}

func init() { proto.RegisterFile("lte/protos/policydb.proto", fileDescriptor_a4a2a416c199de0d) }

var fileDescriptor_a4a2a416c199de0d = []byte{
	// 1551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x73, 0xdb, 0xc6,
	0x15, 0x16, 0x48, 0x89, 0x3f, 0x1e, 0x29, 0x79, 0xb9, 0x76, 0x1b, 0x58, 0x75, 0x3d, 0x32, 0x92,
	0x74, 0xd4, 0xa4, 0xa5, 0x5c, 0xca, 0xb6, 0xe2, 0x34, 0x33, 0x2d, 0x45, 0x52, 0x0a, 0x47, 0x12,
	0x09, 0x2d, 0x49, 0x75, 0xdc, 0x0b, 0x06, 0x04, 0xd6, 0xf4, 0x4e, 0x40, 0x02, 0x5a, 0x80, 0x72,
	0x74, 0xef, 0xa9, 0xff, 0x40, 0x7b, 0xed, 0xa5, 0xd3, 0x43, 0xcf, 0x3d, 0xb4, 0xff, 0x5c, 0x67,
	0x77, 0xb1, 0x20, 0x42, 0xc9, 0xee, 0xad, 0x93, 0x13, 0xdf, 0x7e, 0xef, 0xfb, 0xf6, 0x3d, 0xbc,
	0xdd, 0x87, 0x07, 0xc2, 0xe3, 0x20, 0xa1, 0x07, 0x11, 0x0f, 0x93, 0x30, 0x3e, 0x88, 0xc2, 0x80,
	0x79, 0xb7, 0xfe, 0xb4, 0x29, 0xd7, 0xb8, 0x3a, 0x77, 0x67, 0x73, 0xb7, 0x19, 0x24, 0x74, 0xf7,
	0x71, 0xc8, 0xbd, 0xaf, 0xb8, 0xe6, 0x79, 0xe1, 0x7c, 0x1e, 0x2e, 0x14, 0xcb, 0xfa, 0xfb, 0x26,
	0x80, 0x2d, 0x85, 0x64, 0x19, 0x50, 0xbc, 0x03, 0x05, 0xe6, 0x9b, 0xc6, 0x9e, 0xb1, 0x5f, 0x25,
	0x05, 0xe6, 0xe3, 0x5d, 0xa8, 0x44, 0x9c, 0x85, 0x9c, 0x25, 0xb7, 0x66, 0x71, 0xcf, 0xd8, 0xdf,
	0x26, 0xd9, 0x1a, 0x3f, 0x83, 0x3a, 0x77, 0x13, 0xb6, 0x98, 0x39, 0x33, 0x1e, 0x2e, 0x23, 0x73,
	0x53, 0xfa, 0x6b, 0x0a, 0x3b, 0x15, 0x10, 0xfe, 0x1c, 0x76, 0xe6, 0xe1, 0x82, 0x25, 0x21, 0x17,
	0xb4, 0xef, 0xe8, 0xad, 0x59, 0xda, 0x33, 0xf6, 0xeb, 0x64, 0x7b, 0x85, 0x9e, 0xd1, 0x5b, 0xfc,
	0x35, 0x54, 0x38, 0xf5, 0x19, 0xa7, 0x5e, 0x62, 0x56, 0xf7, 0x8c, 0xfd, 0x5a, 0xeb, 0x69, 0x33,
	0xcb, 0xbe, 0x49, 0x52, 0x57, 0x7f, 0xf1, 0x36, 0xe4, 0x73, 0x37, 0x61, 0xe1, 0x82, 0x64, 0x7c,
	0x7c, 0x04, 0xd5, 0xb7, 0x41, 0xf8, 0xde, 0x09, 0x58, 0x9c, 0x98, 0xe5, 0xbd, 0xe2, 0x7e, 0xad,
	0xb5, 0x9b, 0x13, 0x9f, 0x04, 0xe1, 0xfb, 0x2e, 0x8d, 0x3d, 0xce, 0x22, 0x25, 0x14, 0xe4, 0x73,
	0x16, 0x27, 0xf8, 0x33, 0x28, 0x5e, 0x87, 0xb1, 0x59, 0x91, 0xf1, 0xf0, 0x9a, 0xe4, 0x32, 0x8c,
	0x89, 0x70, 0xe3, 0x53, 0xd8, 0x4e, 0xb8, 0xeb, 0x7d, 0x27, 0xf2, 0x4f, 0x6e, 0x23, 0x6a, 0xc2,
	0x9e, 0xb1, 0xbf, 0xd3, 0xb2, 0x72, 0xfc, 0x55, 0xf9, 0x9a, 0xe3, 0x94, 0x3a, 0xbe, 0x8d, 0x28,
	0xa9, 0x27, 0xb9, 0x95, 0xa8, 0xd6, 0x3b, 0x97, 0xfb, 0x4e, 0xc2, 0xe6, 0x34, 0x5c, 0x26, 0x66,
	0x4d, 0x55, 0x4b, 0x60, 0x63, 0x05, 0xe1, 0x33, 0xc0, 0x31, 0xe5, 0x37, 0xcc, 0xa3, 0x0e, 0xf3,
	0xe9, 0x22, 0x61, 0x6f, 0x19, 0xe5, 0x66, 0x5d, 0x26, 0xf8, 0x24, 0x17, 0x70, 0xa4, 0x48, 0xfd,
	0x8c, 0x43, 0x1a, 0xf1, 0x3a, 0x64, 0x0d, 0xa0, 0x9e, 0xcf, 0x06, 0xd7, 0xa1, 0x32, 0x1c, 0x9c,
	0xbf, 0x71, 0x86, 0x9d, 0x11, 0xda, 0xc0, 0xdb, 0x50, 0x95, 0x2b, 0xbb, 0x43, 0x4e, 0x90, 0x81,
	0x11, 0xd4, 0x87, 0x9d, 0x91, 0xd3, 0x1e, 0x74, 0x15, 0x52, 0xc0, 0x0f, 0xa0, 0x36, 0x18, 0x3a,
	0x63, 0xd2, 0xee, 0x9c, 0xf5, 0x07, 0xa7, 0xa8, 0x68, 0xfd, 0x12, 0x1a, 0x77, 0xe2, 0xe2, 0x47,
	0xb0, 0x75, 0xe3, 0x06, 0x4b, 0x2a, 0x6f, 0xcc, 0x36, 0x51, 0x0b, 0xeb, 0xaf, 0x06, 0x3c, 0x58,
	0xab, 0x3b, 0xfe, 0x02, 0xb6, 0xe6, 0x6e, 0xe2, 0xbd, 0x93, 0xcc, 0x5a, 0xeb, 0xd1, 0x5a, 0xbd,
	0x2f, 0x84, 0x8f, 0x28, 0x0a, 0x7e, 0x0d, 0x25, 0xd7, 0x13, 0x2a, 0xb3, 0x20, 0x8b, 0xfd, 0xec,
	0xc3, 0xe7, 0xd9, 0x6c, 0x4b, 0x22, 0x49, 0x05, 0xd6, 0x53, 0x28, 0x29, 0x04, 0x03, 0x94, 0xec,
	0x1e, 0xb9, 0xe8, 0x8f, 0xd1, 0x06, 0xae, 0xc0, 0x66, 0xb7, 0x37, 0x78, 0x83, 0x0c, 0xeb, 0x2f,
	0x5b, 0x50, 0xcd, 0xe2, 0xe1, 0xc7, 0x50, 0x61, 0xd1, 0xcd, 0x0b, 0x27, 0xe6, 0x5e, 0x7a, 0xe7,
	0xcb, 0x62, 0x3d, 0xe2, 0x5e, 0xe6, 0xf2, 0xe3, 0x44, 0x66, 0x91, 0xba, 0xba, 0x71, 0x82, 0x3f,
	0x81, 0x72, 0xe2, 0x45, 0x52, 0xa4, 0x5a, 0xa2, 0x94, 0x78, 0x91, 0xd0, 0xa4, 0x0e, 0x21, 0xd9,
	0xcc, 0x1c, 0xa9, 0x62, 0xe9, 0x2b, 0xc5, 0x96, 0x72, 0x2c, 0x7d, 0xad, 0x10, 0x0e, 0xa1, 0x28,
	0x65, 0x0e, 0xa1, 0x38, 0x12, 0xe1, 0x1d, 0xd9, 0xa2, 0x66, 0x59, 0x16, 0xe1, 0xc9, 0x7d, 0x15,
	0x6b, 0xf6, 0x6d, 0x5b, 0x70, 0x44, 0x72, 0xd2, 0xc0, 0xdf, 0x40, 0x55, 0x35, 0x86, 0x28, 0x5f,
	0x45, 0x2a, 0x9f, 0xde, 0xab, 0xec, 0x6a, 0x16, 0x59, 0x09, 0xc4, 0x53, 0xbb, 0x51, 0xe4, 0x2c,
	0xdc, 0x39, 0x95, 0x8d, 0x58, 0x25, 0x65, 0x37, 0x8a, 0x06, 0xee, 0x9c, 0x5a, 0xff, 0x2a, 0x40,
	0x39, 0x8d, 0x86, 0x77, 0x00, 0xfa, 0xb6, 0x4d, 0x86, 0xe3, 0xa1, 0xd3, 0xb7, 0xd1, 0x06, 0x7e,
	0x08, 0x0f, 0xf4, 0xfa, 0xdb, 0xa1, 0x3d, 0xb4, 0xc7, 0xe2, 0x8a, 0x21, 0xa8, 0x67, 0xa4, 0xce,
	0x85, 0xad, 0x6e, 0x59, 0x86, 0x9c, 0x5e, 0xd8, 0xea, 0x96, 0x69, 0x64, 0xdc, 0xb1, 0x51, 0x29,
	0x0f, 0x4c, 0xba, 0x36, 0x6a, 0xe4, 0xb7, 0x26, 0xc3, 0xc9, 0x58, 0xdc, 0xc5, 0x2f, 0xf1, 0x23,
	0x40, 0x1a, 0x3c, 0x21, 0xed, 0xd3, 0x8b, 0xde, 0x60, 0x8c, 0x7e, 0x95, 0xd7, 0x9e, 0x92, 0x1e,
	0x3a, 0xc8, 0xa7, 0xd9, 0xfe, 0x16, 0x1d, 0x62, 0x0c, 0x3b, 0xf9, 0x8c, 0xae, 0x5e, 0xa1, 0xaf,
	0xf3, 0x39, 0x0d, 0x86, 0x83, 0x1e, 0xfa, 0x6d, 0x3e, 0x62, 0x77, 0x34, 0x96, 0x0f, 0xf3, 0x4d,
	0x9e, 0x36, 0x1c, 0xd9, 0x27, 0xe8, 0x4d, 0x1e, 0xb9, 0x22, 0xc4, 0x46, 0x11, 0x6e, 0xac, 0x90,
	0x51, 0x67, 0x6c, 0xa3, 0x3f, 0x19, 0xbb, 0x05, 0x64, 0x58, 0x9f, 0x43, 0x35, 0xab, 0xb5, 0xb8,
	0x95, 0x13, 0xfb, 0xbc, 0x3f, 0x38, 0x43, 0x1b, 0xa2, 0x23, 0xbb, 0xc3, 0x3f, 0x0c, 0xe4, 0xca,
	0xb0, 0xfe, 0x56, 0x80, 0xd2, 0x65, 0x18, 0xb7, 0xb9, 0x7c, 0x6b, 0xea, 0x97, 0xac, 0x13, 0xd0,
	0x1b, 0x1a, 0xa4, 0xed, 0xb5, 0xad, 0xd1, 0x73, 0x01, 0xe2, 0xdf, 0x09, 0x1a, 0x75, 0x3c, 0x37,
	0x72, 0xa7, 0x2c, 0x10, 0x6f, 0x68, 0xd5, 0x2e, 0x66, 0xee, 0xbc, 0xd5, 0x8e, 0x4d, 0x9b, 0xd3,
	0x8e, 0x1b, 0x89, 0x0d, 0xc4, 0x6f, 0x4a, 0xc7, 0x3d, 0x68, 0x88, 0x0d, 0x6e, 0x96, 0xc1, 0x82,
	0x72, 0xbd, 0x47, 0xf1, 0x23, 0x7b, 0x5c, 0x2d, 0x03, 0x82, 0x22, 0xf9, 0xbb, 0x52, 0x58, 0x87,
	0x50, 0x52, 0xfb, 0x8b, 0xd2, 0xd9, 0xa4, 0xe7, 0x74, 0xda, 0xb6, 0xd3, 0x1b, 0xb4, 0x8f, 0xcf,
	0x7b, 0x5d, 0xb4, 0x21, 0x0e, 0x4b, 0x83, 0xdd, 0xfe, 0x48, 0xa1, 0x46, 0x2a, 0xba, 0x5a, 0x06,
	0x5a, 0x74, 0x35, 0x39, 0xbf, 0x2b, 0x12, 0x60, 0x4e, 0xf4, 0xe7, 0x22, 0x94, 0xd3, 0xb7, 0x33,
	0x7e, 0x06, 0xdb, 0x73, 0xf7, 0x7b, 0x87, 0xd3, 0x6b, 0x67, 0xfa, 0xde, 0x59, 0xea, 0x1a, 0xc1,
	0xdc, 0xfd, 0x9e, 0xd0, 0xeb, 0xe3, 0xf7, 0x93, 0x60, 0x8d, 0xe2, 0x07, 0xb2, 0x3e, 0x39, 0x4a,
	0x37, 0xc0, 0x3f, 0x81, 0xd2, 0x6c, 0xca, 0x85, 0x5c, 0xb5, 0xf2, 0xd6, 0x6c, 0xca, 0x27, 0x19,
	0xec, 0x07, 0x69, 0x23, 0x0b, 0xb8, 0x1b, 0xe0, 0x7d, 0x28, 0x5e, 0x7b, 0x4c, 0xf6, 0xf0, 0x4e,
	0xeb, 0xa7, 0x77, 0x47, 0x46, 0xf3, 0xd2, 0x63, 0x44, 0x50, 0xf0, 0xa7, 0x50, 0x74, 0x79, 0x24,
	0x9b, 0xba, 0xd6, 0x6a, 0xdc, 0x29, 0x26, 0x11, 0x5e, 0xeb, 0x3f, 0x06, 0x14, 0x2f, 0x3d, 0x86,
	0xab, 0xb0, 0x75, 0xd9, 0xe9, 0x3b, 0xcf, 0xd1, 0x86, 0x36, 0x7f, 0x83, 0x0c, 0x6d, 0xb6, 0x50,
	0x41, 0x9b, 0x87, 0xa8, 0xa8, 0xcd, 0x17, 0x68, 0x53, 0x9b, 0x2f, 0xd1, 0x96, 0x36, 0x5f, 0xa1,
	0x92, 0x36, 0x8f, 0x50, 0x59, 0x9b, 0x5f, 0xa1, 0x8a, 0x36, 0x5f, 0xa3, 0xaa, 0xb8, 0x82, 0x92,
	0xfb, 0x12, 0xb5, 0x33, 0xfb, 0x15, 0x3a, 0xce, 0xec, 0x23, 0xd4, 0xd1, 0xf6, 0xd1, 0x73, 0x74,
	0x92, 0xd9, 0x2f, 0xd1, 0x59, 0x66, 0xbf, 0x46, 0x43, 0xeb, 0x9f, 0x05, 0x78, 0x78, 0xcf, 0x68,
	0xc6, 0xbf, 0x87, 0x72, 0xbc, 0x8c, 0xa2, 0x90, 0x27, 0xf2, 0x48, 0x76, 0x5a, 0xbf, 0xf8, 0xf8,
	0x2c, 0x6f, 0x8e, 0x14, 0x9b, 0x68, 0x19, 0xbe, 0x80, 0xba, 0xeb, 0xfb, 0x9c, 0xc6, 0xb1, 0x1a,
	0xb9, 0xea, 0x5a, 0x7f, 0xf1, 0x3f, 0xb6, 0x69, 0x2b, 0x89, 0x1c, 0xbd, 0x35, 0x77, 0xb5, 0x10,
	0xed, 0x24, 0xc6, 0x23, 0xe5, 0x4e, 0x8a, 0xca, 0xb3, 0xae, 0x92, 0x6d, 0x85, 0xa6, 0x3a, 0xeb,
	0x33, 0x28, 0xa7, 0x99, 0xc8, 0xce, 0xd4, 0xb7, 0x6e, 0x03, 0xd7, 0xa0, 0xac, 0x2f, 0xa6, 0x61,
	0x1d, 0x41, 0x2d, 0x17, 0x48, 0x4c, 0x96, 0xbe, 0x7d, 0xf3, 0x42, 0xcd, 0x98, 0xbe, 0x7d, 0xf3,
	0x0a, 0x19, 0xb8, 0x0c, 0xc5, 0x09, 0x39, 0x47, 0x05, 0x21, 0x1c, 0xf5, 0x6d, 0x67, 0x42, 0xfa,
	0xa8, 0x68, 0x1d, 0xc2, 0xc3, 0xce, 0x3b, 0x97, 0xcf, 0xd8, 0x62, 0x26, 0x3e, 0x15, 0xc4, 0x3b,
	0x75, 0x44, 0x13, 0xfc, 0x04, 0xaa, 0x7a, 0x19, 0x9b, 0x85, 0xbd, 0xe2, 0x7e, 0x95, 0xac, 0x00,
	0x2b, 0x81, 0xdd, 0xbc, 0xe8, 0xd8, 0x8d, 0xa5, 0x83, 0x50, 0x2f, 0xe4, 0x3e, 0xc6, 0xb0, 0x29,
	0x56, 0xe9, 0xe8, 0x92, 0x36, 0x3e, 0x86, 0x7a, 0x26, 0x1f, 0x51, 0x35, 0xbb, 0x7e, 0xf8, 0x39,
	0x75, 0x4f, 0x16, 0xe4, 0x07, 0x1a, 0x2b, 0x04, 0xd4, 0x8e, 0x63, 0x36, 0x5b, 0x50, 0x5f, 0x7e,
	0xdb, 0x30, 0x1a, 0xe3, 0x26, 0x3c, 0x74, 0x53, 0xcc, 0x99, 0xba, 0x31, 0x95, 0x33, 0x22, 0x36,
	0x41, 0x66, 0xdc, 0xd0, 0x2e, 0x9d, 0x60, 0x8c, 0xbf, 0x84, 0x0c, 0x74, 0xa2, 0x74, 0x13, 0xb3,
	0x26, 0xd9, 0xc8, 0x5d, 0xdb, 0xdc, 0x4a, 0xa0, 0xd1, 0x5f, 0xc4, 0x89, 0x1b, 0x04, 0xb9, 0x88,
	0xcf, 0xe1, 0x11, 0xd3, 0xe0, 0xdd, 0x90, 0x38, 0xf3, 0xad, 0x62, 0xfe, 0x1a, 0x56, 0xe8, 0x7a,
	0xd0, 0x06, 0x5b, 0x0f, 0x60, 0xcd, 0xe0, 0x93, 0xde, 0xc2, 0x9d, 0x06, 0x74, 0x94, 0xb8, 0x09,
	0xf3, 0x44, 0x09, 0x08, 0xbd, 0x5e, 0xd2, 0x38, 0x11, 0x95, 0x65, 0xf3, 0x98, 0xe9, 0xca, 0x0a,
	0x5b, 0xcc, 0x46, 0xbe, 0x0c, 0xc4, 0xa7, 0x99, 0x3e, 0xa8, 0xb2, 0x58, 0xf7, 0xfd, 0x18, 0xff,
	0x1c, 0x20, 0x97, 0x60, 0x51, 0x9d, 0xe2, 0x54, 0xe7, 0x65, 0xbd, 0x03, 0xb3, 0xcb, 0xe2, 0xff,
	0x43, 0xa4, 0xd6, 0xbf, 0x0d, 0xd8, 0x55, 0x9f, 0xa3, 0xea, 0x00, 0xe7, 0x74, 0x91, 0x74, 0xc2,
	0x45, 0xc2, 0xc3, 0x20, 0xa0, 0x1c, 0x9f, 0x43, 0x63, 0xfd, 0x89, 0x63, 0x9c, 0xff, 0x94, 0xfd,
	0x40, 0x3d, 0x76, 0xf5, 0x1b, 0x4c, 0xfe, 0x8f, 0x68, 0x5e, 0x85, 0xcc, 0xb7, 0x36, 0xf0, 0x00,
	0xf0, 0x9d, 0xc7, 0x8a, 0xf1, 0xa7, 0xb9, 0xed, 0x3e, 0xf4, 0xd4, 0xf7, 0xee, 0xd7, 0xfa, 0x87,
	0x01, 0x15, 0x95, 0x7c, 0xf7, 0xf8, 0xc7, 0x9d, 0xea, 0xf1, 0xcf, 0xfe, 0xf8, 0x58, 0xa2, 0x07,
	0xe2, 0xef, 0x97, 0x17, 0x84, 0x4b, 0xff, 0x60, 0x16, 0xa6, 0xff, 0xaf, 0xa6, 0x25, 0xf9, 0x7b,
	0xf8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x5f, 0x82, 0x73, 0x9c, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicyAssignmentControllerClient is the client API for PolicyAssignmentController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyAssignmentControllerClient interface {
	// Associate the static rule with the IMSI
	//
	EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Unassociate the static rule with the IMSI
	//
	DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type policyAssignmentControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyAssignmentControllerClient(cc grpc.ClientConnInterface) PolicyAssignmentControllerClient {
	return &policyAssignmentControllerClient{cc}
}

func (c *policyAssignmentControllerClient) EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyAssignmentController/EnableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyAssignmentControllerClient) DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyAssignmentController/DisableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyAssignmentControllerServer is the server API for PolicyAssignmentController service.
type PolicyAssignmentControllerServer interface {
	// Associate the static rule with the IMSI
	//
	EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*protos.Void, error)
	// Unassociate the static rule with the IMSI
	//
	DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*protos.Void, error)
}

// UnimplementedPolicyAssignmentControllerServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyAssignmentControllerServer struct {
}

func (*UnimplementedPolicyAssignmentControllerServer) EnableStaticRules(ctx context.Context, req *EnableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticRules not implemented")
}
func (*UnimplementedPolicyAssignmentControllerServer) DisableStaticRules(ctx context.Context, req *DisableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticRules not implemented")
}

func RegisterPolicyAssignmentControllerServer(s *grpc.Server, srv PolicyAssignmentControllerServer) {
	s.RegisterService(&_PolicyAssignmentController_serviceDesc, srv)
}

func _PolicyAssignmentController_EnableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyAssignmentControllerServer).EnableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyAssignmentController/EnableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyAssignmentControllerServer).EnableStaticRules(ctx, req.(*EnableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyAssignmentController_DisableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyAssignmentControllerServer).DisableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyAssignmentController/DisableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyAssignmentControllerServer).DisableStaticRules(ctx, req.(*DisableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyAssignmentController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.PolicyAssignmentController",
	HandlerType: (*PolicyAssignmentControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableStaticRules",
			Handler:    _PolicyAssignmentController_EnableStaticRules_Handler,
		},
		{
			MethodName: "DisableStaticRules",
			Handler:    _PolicyAssignmentController_DisableStaticRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/policydb.proto",
}

// PolicyDBClient is the client API for PolicyDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyDBClient interface {
	// Immediately install the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Immediately uninstall the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type policyDBClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyDBClient(cc grpc.ClientConnInterface) PolicyDBClient {
	return &policyDBClient{cc}
}

func (c *policyDBClient) EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyDB/EnableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyDBClient) DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyDB/DisableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyDBServer is the server API for PolicyDB service.
type PolicyDBServer interface {
	// Immediately install the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*protos.Void, error)
	// Immediately uninstall the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*protos.Void, error)
}

// UnimplementedPolicyDBServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyDBServer struct {
}

func (*UnimplementedPolicyDBServer) EnableStaticRules(ctx context.Context, req *EnableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticRules not implemented")
}
func (*UnimplementedPolicyDBServer) DisableStaticRules(ctx context.Context, req *DisableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticRules not implemented")
}

func RegisterPolicyDBServer(s *grpc.Server, srv PolicyDBServer) {
	s.RegisterService(&_PolicyDB_serviceDesc, srv)
}

func _PolicyDB_EnableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDBServer).EnableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyDB/EnableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDBServer).EnableStaticRules(ctx, req.(*EnableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyDB_DisableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDBServer).DisableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyDB/DisableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDBServer).DisableStaticRules(ctx, req.(*DisableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.PolicyDB",
	HandlerType: (*PolicyDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableStaticRules",
			Handler:    _PolicyDB_EnableStaticRules_Handler,
		},
		{
			MethodName: "DisableStaticRules",
			Handler:    _PolicyDB_DisableStaticRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/policydb.proto",
}
