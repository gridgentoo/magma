/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewNetworkDNSConfig DNS configuration for a network
// swagger:model network_dns_config
type NewNetworkDNSConfig struct {

	// enable caching
	EnableCaching bool `json:"enable_caching,omitempty"`

	// local ttl
	LocalTTL int32 `json:"local_ttl,omitempty"`

	// records
	Records []*NetworkDNSConfigRecordsItems0 `json:"records"`
}

// Validate validates this network dns config
func (m *NewNetworkDNSConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewNetworkDNSConfig) validateRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewNetworkDNSConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewNetworkDNSConfig) UnmarshalBinary(b []byte) error {
	var res NewNetworkDNSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkDNSConfigRecordsItems0 Mapping used for DNS resolving from a domain
// swagger:model NetworkDNSConfigRecordsItems0
type NetworkDNSConfigRecordsItems0 struct {

	// a record
	ARecord []string `json:"a_record"`

	// aaaa record
	AaaaRecord []string `json:"aaaa_record"`

	// cname record
	CnameRecord []string `json:"cname_record"`

	// domain
	// Min Length: 1
	Domain string `json:"domain,omitempty"`
}

// Validate validates this network DNS config records items0
func (m *NetworkDNSConfigRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateARecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAaaaRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCnameRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkDNSConfigRecordsItems0) validateARecord(formats strfmt.Registry) error {

	if swag.IsZero(m.ARecord) { // not required
		return nil
	}

	for i := 0; i < len(m.ARecord); i++ {

		if err := validate.MinLength("a_record"+"."+strconv.Itoa(i), "body", string(m.ARecord[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetworkDNSConfigRecordsItems0) validateAaaaRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.AaaaRecord) { // not required
		return nil
	}

	for i := 0; i < len(m.AaaaRecord); i++ {

		if err := validate.MinLength("aaaa_record"+"."+strconv.Itoa(i), "body", string(m.AaaaRecord[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetworkDNSConfigRecordsItems0) validateCnameRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.CnameRecord) { // not required
		return nil
	}

	for i := 0; i < len(m.CnameRecord); i++ {

		if err := validate.MinLength("cname_record"+"."+strconv.Itoa(i), "body", string(m.CnameRecord[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetworkDNSConfigRecordsItems0) validateDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if err := validate.MinLength("domain", "body", string(m.Domain), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkDNSConfigRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkDNSConfigRecordsItems0) UnmarshalBinary(b []byte) error {
	var res NetworkDNSConfigRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
