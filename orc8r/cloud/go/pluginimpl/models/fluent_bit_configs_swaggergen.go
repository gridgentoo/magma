// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FluentBitConfigs Configuration for FluentBit
// swagger:model fluent_bit_configs
type FluentBitConfigs struct {

	// throttle interval
	// Required: true
	// Pattern: ^\d+(.\d+)?(s|m|h)$
	ThrottleInterval string `json:"throttle_interval"`

	// throttle rate
	// Required: true
	ThrottleRate uint32 `json:"throttle_rate"`

	// throttle window
	// Required: true
	ThrottleWindow uint32 `json:"throttle_window"`
}

// Validate validates this fluent bit configs
func (m *FluentBitConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateThrottleInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottleRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottleWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FluentBitConfigs) validateThrottleInterval(formats strfmt.Registry) error {

	if err := validate.RequiredString("throttle_interval", "body", string(m.ThrottleInterval)); err != nil {
		return err
	}

	if err := validate.Pattern("throttle_interval", "body", string(m.ThrottleInterval), `^\d+(.\d+)?(s|m|h)$`); err != nil {
		return err
	}

	return nil
}

func (m *FluentBitConfigs) validateThrottleRate(formats strfmt.Registry) error {

	if err := validate.Required("throttle_rate", "body", uint32(m.ThrottleRate)); err != nil {
		return err
	}

	return nil
}

func (m *FluentBitConfigs) validateThrottleWindow(formats strfmt.Registry) error {

	if err := validate.Required("throttle_window", "body", uint32(m.ThrottleWindow)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FluentBitConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FluentBitConfigs) UnmarshalBinary(b []byte) error {
	var res FluentBitConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
