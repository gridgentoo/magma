/*
Copyright (c) Facebook, Inc. and its affiliates.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.
*/

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import prometheus "github.com/prometheus/client_golang/prometheus"

// Registerer is an autogenerated mock type for the Registerer type
type Registerer struct {
	mock.Mock
}

// MustRegister provides a mock function with given fields: _a0
func (_m *Registerer) MustRegister(_a0 ...prometheus.Collector) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Register provides a mock function with given fields: _a0
func (_m *Registerer) Register(_a0 prometheus.Collector) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(prometheus.Collector) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unregister provides a mock function with given fields: _a0
func (_m *Registerer) Unregister(_a0 prometheus.Collector) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(prometheus.Collector) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
