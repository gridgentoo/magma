// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.
syntax = "proto3";

import "orc8r/protos/common.proto";

package magma.orc8r;

option go_package = "magma/orc8r/lib/go/protos";

// --------------------------------------------------------------------------
// Directory service -- controller
// --------------------------------------------------------------------------

message GetHostnameForHWIDRequest {
  string hwid = 1;
}

message GetHostnameForHWIDResponse {
  string hostname = 1;
}

message MapHWIDToHostnameRequest {
  map<string, string> hwidToHostname = 1;
}

message GetIMSIForSessionIDRequest {
  string networkID = 1;
  string sessionID = 2;
}

message GetIMSIForSessionIDResponse {
  string imsi = 1;
}

message MapSessionIDToIMSIRequest {
  string networkID = 1;
  map<string, string> sessionIDToIMSI = 2;
}

// DirectoryLookup service associates various identities and locations.
// This service runs in the controller, generating and consuming mostly derived state.
service DirectoryLookup {
  // GetHostnameForHWID returns the hostname mapped to by hardware ID.
  rpc GetHostnameForHWID(GetHostnameForHWIDRequest) returns (GetHostnameForHWIDResponse) {};

  // MapHWIDsToHostnames maps {hwid -> hostname}.
  rpc MapHWIDsToHostnames(MapHWIDToHostnameRequest) returns (Void) {};

  // GetIMSIForSessionID returns the IMSI mapped to by session ID.
  rpc GetIMSIForSessionID(GetIMSIForSessionIDRequest) returns (GetIMSIForSessionIDResponse) {};

  // MapSessionIDsToIMSIs maps {session ID -> IMSI}.
  rpc MapSessionIDsToIMSIs(MapSessionIDToIMSIRequest) returns (Void) {};
}

// --------------------------------------------------------------------------
// Directory service -- gateway
// --------------------------------------------------------------------------

message UpdateRecordRequest {
  string id = 1;
  string location = 2;
  map <string, string> fields = 3;
}

message DirectoryField {
  string key = 1;
  string value = 2;
}

message DeleteRecordRequest {
  string id = 1;
}

message GetDirectoryFieldRequest {
  string id = 1;
  string field_key = 2;
}

message DirectoryRecord {
  string id = 1;
  repeated string location_history = 2;
  map <string, string> fields = 3;
}

message AllDirectoryRecords {
  repeated DirectoryRecord records = 1;
}

// GatewayDirectoryService allows for associating various identities to a
// record. This service runs on the gateways.
service GatewayDirectoryService {

  // Update the directory record of an object in the directory service
  rpc UpdateRecord (UpdateRecordRequest) returns (Void) {};

  // Delete directory record of an object from the directory service
  // Throws UNKNOWN if object ID does not exist
  rpc DeleteRecord (DeleteRecordRequest) returns (Void) {};

  // Get directory field for a given id and key
  rpc GetDirectoryField (GetDirectoryFieldRequest) returns (DirectoryField) {};

  // Get all directory records
  rpc GetAllDirectoryRecords (Void) returns (AllDirectoryRecords) {};
}
