// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthConfigs Configuration threshold for gateway health service
// swagger:model health_configs
type HealthConfigs struct {

	// cpu util threshold pct
	// Required: true
	CPUUtilThresholdPct *float32 `json:"cpu_util_threshold_pct"`

	// gre probe interval secs
	GreProbeIntervalSecs uint32 `json:"gre_probe_interval_secs,omitempty"`

	// icmp probe pkt count
	IcmpProbePktCount uint32 `json:"icmp_probe_pkt_count,omitempty"`

	// mem util threshold pct
	// Required: true
	MemUtilThresholdPct *float32 `json:"mem_util_threshold_pct"`
}

// Validate validates this health configs
func (m *HealthConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUUtilThresholdPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemUtilThresholdPct(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthConfigs) validateCPUUtilThresholdPct(formats strfmt.Registry) error {

	if err := validate.Required("cpu_util_threshold_pct", "body", m.CPUUtilThresholdPct); err != nil {
		return err
	}

	return nil
}

func (m *HealthConfigs) validateMemUtilThresholdPct(formats strfmt.Registry) error {

	if err := validate.Required("mem_util_threshold_pct", "body", m.MemUtilThresholdPct); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthConfigs) UnmarshalBinary(b []byte) error {
	var res HealthConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
