// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MutableSymphonyDevice A Symphony device with the read-only fields omitted
// swagger:model mutable_symphony_device
type MutableSymphonyDevice struct {

	// config
	// Required: true
	Config *SymphonyDeviceConfig `json:"config"`

	// id
	// Required: true
	ID SymphonyDeviceID `json:"id"`

	// managing agent
	ManagingAgent SymphonyDeviceAgent `json:"managing_agent,omitempty"`

	// name
	// Required: true
	Name SymphonyDeviceName `json:"name"`
}

// Validate validates this mutable symphony device
func (m *MutableSymphonyDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagingAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MutableSymphonyDevice) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *MutableSymphonyDevice) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *MutableSymphonyDevice) validateManagingAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagingAgent) { // not required
		return nil
	}

	if err := m.ManagingAgent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("managing_agent")
		}
		return err
	}

	return nil
}

func (m *MutableSymphonyDevice) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MutableSymphonyDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MutableSymphonyDevice) UnmarshalBinary(b []byte) error {
	var res MutableSymphonyDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
