#!/bin/bash
# shellcheck disable=SC2068

CACHE_DIR=${SYMPHONY_AGENT_CACHE_DIR:-$(realpath ~)/cache_devmand_build}

test_bin="/cache/devmand/build/devmantest --gtest_shuffle"
memcheck="valgrind \
    --tool=memcheck \
    --undef-value-errors=yes \
    --trace-children=no \
    --child-silent-after-fork=no \
    --fair-sched=yes \
    --track-origins=yes \
    --leak-check=full \
    --suppressions=/cache/devmand/repo/docker/valgrind.supp \
    --vgdb=yes
    --gen-suppressions=yes --demangle=no \
    --num-callers=100"

# TODO Some day we can add this after lots of suppressions
#--show-reachable=yes \

function run_test_container {
  # TODO see if we can use the docker compose file to run this.
  docker run -it \
    -v "$(realpath ../):/cache/devmand/repo:ro" \
    -v "$CACHE_DIR:/cache/devmand/build:rw" \
    --sysctl net.ipv4.ping_group_range="0 0" \
    --network host \
    devmand-built $@
  EXIT_CODE=$?
}

# This is useful if you want to test in gdb.
# run_test_container gdb --args "${test_bin}" "$@"

run_test_container "${memcheck}" "${test_bin}" "$@"
if [ $EXIT_CODE -eq 0 ] ; then
  run_test_container "${test_bin}" "$@"
fi

if [ $EXIT_CODE -ne 0 ] ; then
  echo "You have gotten a CI failure in devmand's unit tests."
  echo "If you are sure your changes did not cause the issue or if you"
  echo "need help please reach out to the south poll symphony oncall."
  exit ${EXIT_CODE}
fi
