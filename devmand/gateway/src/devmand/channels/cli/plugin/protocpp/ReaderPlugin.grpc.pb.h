// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ReaderPlugin.proto
#ifndef GRPC_ReaderPlugin_2eproto__INCLUDED
#define GRPC_ReaderPlugin_2eproto__INCLUDED

#include "ReaderPlugin.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
} // namespace grpc

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

class ReaderPlugin GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr<::grpc::ClientReaderWriterInterface<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>>
    Read(::grpc::ClientContext* context) {
      return std::unique_ptr<::grpc::ClientReaderWriterInterface<
          ::devmand::channels::cli::plugin::ReadRequest,
          ::devmand::channels::cli::plugin::ReadResponse>>(ReadRaw(context));
    }
    std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>>
    AsyncRead(
        ::grpc::ClientContext* context,
        ::grpc::CompletionQueue* cq,
        void* tag) {
      return std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<
          ::devmand::channels::cli::plugin::ReadRequest,
          ::devmand::channels::cli::plugin::ReadResponse>>(
          AsyncReadRaw(context, cq, tag));
    }

   private:
    virtual ::grpc::ClientReaderWriterInterface<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>*
    ReadRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>*
    AsyncReadRaw(
        ::grpc::ClientContext* context,
        ::grpc::CompletionQueue* cq,
        void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    std::unique_ptr<::grpc::ClientReaderWriter<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>>
    Read(::grpc::ClientContext* context) {
      return std::unique_ptr<::grpc::ClientReaderWriter<
          ::devmand::channels::cli::plugin::ReadRequest,
          ::devmand::channels::cli::plugin::ReadResponse>>(ReadRaw(context));
    }
    std::unique_ptr<::grpc::ClientAsyncReaderWriter<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>>
    AsyncRead(
        ::grpc::ClientContext* context,
        ::grpc::CompletionQueue* cq,
        void* tag) {
      return std::unique_ptr<::grpc::ClientAsyncReaderWriter<
          ::devmand::channels::cli::plugin::ReadRequest,
          ::devmand::channels::cli::plugin::ReadResponse>>(
          AsyncReadRaw(context, cq, tag));
    }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>*
    ReadRaw(::grpc::ClientContext* context) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReaderWriter<
        ::devmand::channels::cli::plugin::ReadRequest,
        ::devmand::channels::cli::plugin::ReadResponse>*
    AsyncReadRaw(
        ::grpc::ClientContext* context,
        ::grpc::CompletionQueue* cq,
        void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Read_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Read(
        ::grpc::ServerContext* context,
        ::grpc::ServerReaderWriter<
            ::devmand::channels::cli::plugin::ReadResponse,
            ::devmand::channels::cli::plugin::ReadRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(
        ::grpc::ServerContext* context,
        ::grpc::ServerReaderWriter<
            ::devmand::channels::cli::plugin::ReadResponse,
            ::devmand::channels::cli::plugin::ReadRequest>* stream)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(
        ::grpc::ServerContext* context,
        ::grpc::ServerAsyncReaderWriter<
            ::devmand::channels::cli::plugin::ReadResponse,
            ::devmand::channels::cli::plugin::ReadRequest>* stream,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq,
        void* tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(
          0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Read<Service> AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(
        ::grpc::ServerContext* context,
        ::grpc::ServerReaderWriter<
            ::devmand::channels::cli::plugin::ReadResponse,
            ::devmand::channels::cli::plugin::ReadRequest>* stream)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

#endif // GRPC_ReaderPlugin_2eproto__INCLUDED
