// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: PluginRegistration.proto
#ifndef GRPC_PluginRegistration_2eproto__INCLUDED
#define GRPC_PluginRegistration_2eproto__INCLUDED

#include "PluginRegistration.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
} // namespace grpc

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

class PluginRegistration GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCapabilities(
        ::grpc::ClientContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
        ::devmand::channels::cli::plugin::CapabilitiesResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::devmand::channels::cli::plugin::CapabilitiesResponse>>
    AsyncGetCapabilities(
        ::grpc::ClientContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::devmand::channels::cli::plugin::CapabilitiesResponse>>(
          AsyncGetCapabilitiesRaw(context, request, cq));
    }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::devmand::channels::cli::plugin::CapabilitiesResponse>*
    AsyncGetCapabilitiesRaw(
        ::grpc::ClientContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
        ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status GetCapabilities(
        ::grpc::ClientContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
        ::devmand::channels::cli::plugin::CapabilitiesResponse* response)
        GRPC_OVERRIDE;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<
        ::devmand::channels::cli::plugin::CapabilitiesResponse>>
    AsyncGetCapabilities(
        ::grpc::ClientContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<
          ::devmand::channels::cli::plugin::CapabilitiesResponse>>(
          AsyncGetCapabilitiesRaw(context, request, cq));
    }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader<
        ::devmand::channels::cli::plugin::CapabilitiesResponse>*
    AsyncGetCapabilitiesRaw(
        ::grpc::ClientContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
        ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_GetCapabilities_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCapabilities(
        ::grpc::ServerContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest* request,
        ::devmand::channels::cli::plugin::CapabilitiesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

   public:
    WithAsyncMethod_GetCapabilities() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCapabilities() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCapabilities(
        ::grpc::ServerContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest* request,
        ::devmand::channels::cli::plugin::CapabilitiesResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCapabilities(
        ::grpc::ServerContext* context,
        ::devmand::channels::cli::plugin::CapabilitiesRequest* request,
        ::grpc::ServerAsyncResponseWriter<
            ::devmand::channels::cli::plugin::CapabilitiesResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq,
        void* tag) {
      ::grpc::Service::RequestAsyncUnary(
          0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCapabilities<Service> AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

   public:
    WithGenericMethod_GetCapabilities() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCapabilities() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCapabilities(
        ::grpc::ServerContext* context,
        const ::devmand::channels::cli::plugin::CapabilitiesRequest* request,
        ::devmand::channels::cli::plugin::CapabilitiesResponse* response)
        GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

#endif // GRPC_PluginRegistration_2eproto__INCLUDED
