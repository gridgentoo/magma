// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReaderPlugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#endif
#include "ReaderPlugin.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

namespace {

const ::google::protobuf::Descriptor* ActualReadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualReadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ReadRequest_reflection_ = NULL;
struct ReadRequestOneofInstance {
  const ::devmand::channels::cli::plugin::ActualReadRequest* actualreadrequest_;
  const ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
}* ReadRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActualReadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualReadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ReadResponse_reflection_ = NULL;
struct ReadResponseOneofInstance {
  const ::devmand::channels::cli::plugin::CliRequest* clirequest_;
  const ::devmand::channels::cli::plugin::ActualReadResponse*
      actualreadresponse_;
}* ReadResponse_default_oneof_instance_ = NULL;

} // namespace

void protobuf_AssignDesc_ReaderPlugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ReaderPlugin_2eproto() {
  protobuf_AddDesc_ReaderPlugin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "ReaderPlugin.proto");
  GOOGLE_CHECK(file != NULL);
  ActualReadRequest_descriptor_ = file->message_type(0);
  static const int ActualReadRequest_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActualReadRequest, path_),
  };
  ActualReadRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualReadRequest_descriptor_,
          ActualReadRequest::default_instance_,
          ActualReadRequest_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualReadRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualReadRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualReadRequest, _is_default_instance_));
  ReadRequest_descriptor_ = file->message_type(1);
  static const int ReadRequest_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          ReadRequest_default_oneof_instance_, actualreadrequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          ReadRequest_default_oneof_instance_, cliresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ReadRequest, ReadRequestUnion_),
  };
  ReadRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ReadRequest_descriptor_,
          ReadRequest::default_instance_,
          ReadRequest_offsets_,
          -1,
          -1,
          -1,
          ReadRequest_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReadRequest, _oneof_case_[0]),
          sizeof(ReadRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReadRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReadRequest, _is_default_instance_));
  ActualReadResponse_descriptor_ = file->message_type(2);
  static const int ActualReadResponse_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActualReadResponse, json_),
  };
  ActualReadResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualReadResponse_descriptor_,
          ActualReadResponse::default_instance_,
          ActualReadResponse_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualReadResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualReadResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualReadResponse, _is_default_instance_));
  ReadResponse_descriptor_ = file->message_type(3);
  static const int ReadResponse_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          ReadResponse_default_oneof_instance_, clirequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          ReadResponse_default_oneof_instance_, actualreadresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ReadResponse, ReadResponseUnion_),
  };
  ReadResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ReadResponse_descriptor_,
          ReadResponse::default_instance_,
          ReadResponse_offsets_,
          -1,
          -1,
          -1,
          ReadResponse_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReadResponse, _oneof_case_[0]),
          sizeof(ReadResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReadResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReadResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(
      &protobuf_AssignDescriptors_once_,
      &protobuf_AssignDesc_ReaderPlugin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualReadRequest_descriptor_, &ActualReadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRequest_descriptor_, &ReadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualReadResponse_descriptor_, &ActualReadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadResponse_descriptor_, &ReadResponse::default_instance());
}

} // namespace

void protobuf_ShutdownFile_ReaderPlugin_2eproto() {
  delete ActualReadRequest::default_instance_;
  delete ActualReadRequest_reflection_;
  delete ReadRequest::default_instance_;
  delete ReadRequest_default_oneof_instance_;
  delete ReadRequest_reflection_;
  delete ActualReadResponse::default_instance_;
  delete ActualReadResponse_reflection_;
  delete ReadResponse::default_instance_;
  delete ReadResponse_default_oneof_instance_;
  delete ReadResponse_reflection_;
}

void protobuf_AddDesc_ReaderPlugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ReaderPlugin_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::devmand::channels::cli::plugin::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\022ReaderPlugin.proto\022\033devmand.channels.c"
      "li.plugin\032\014Common.proto\"!\n\021ActualReadReq"
      "uest\022\014\n\004path\030\001 \001(\t\"\257\001\n\013ReadRequest\022K\n\021ac"
      "tualReadRequest\030\001 \001(\0132..devmand.channels"
      ".cli.plugin.ActualReadRequestH\000\022\?\n\013cliRe"
      "sponse\030\002 \001(\0132(.devmand.channels.cli.plug"
      "in.CliResponseH\000B\022\n\020ReadRequestUnion\"\"\n\022"
      "ActualReadResponse\022\014\n\004json\030\001 \001(\t\"\261\001\n\014Rea"
      "dResponse\022=\n\ncliRequest\030\001 \001(\0132\'.devmand."
      "channels.cli.plugin.CliRequestH\000\022M\n\022actu"
      "alReadResponse\030\002 \001(\0132/.devmand.channels."
      "cli.plugin.ActualReadResponseH\000B\023\n\021ReadR"
      "esponseUnion2q\n\014ReaderPlugin\022a\n\004Read\022(.d"
      "evmand.channels.cli.plugin.ReadRequest\032)"
      ".devmand.channels.cli.plugin.ReadRespons"
      "e\"\000(\0010\001b\006proto3",
      615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "ReaderPlugin.proto", &protobuf_RegisterTypes);
  ActualReadRequest::default_instance_ = new ActualReadRequest();
  ReadRequest::default_instance_ = new ReadRequest();
  ReadRequest_default_oneof_instance_ = new ReadRequestOneofInstance();
  ActualReadResponse::default_instance_ = new ActualReadResponse();
  ReadResponse::default_instance_ = new ReadResponse();
  ReadResponse_default_oneof_instance_ = new ReadResponseOneofInstance();
  ActualReadRequest::default_instance_->InitAsDefaultInstance();
  ReadRequest::default_instance_->InitAsDefaultInstance();
  ActualReadResponse::default_instance_->InitAsDefaultInstance();
  ReadResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_ReaderPlugin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ReaderPlugin_2eproto {
  StaticDescriptorInitializer_ReaderPlugin_2eproto() {
    protobuf_AddDesc_ReaderPlugin_2eproto();
  }
} static_descriptor_initializer_ReaderPlugin_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActualReadRequest::kPathFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualReadRequest::ActualReadRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualReadRequest)
}

void ActualReadRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualReadRequest::ActualReadRequest(const ActualReadRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualReadRequest)
}

void ActualReadRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActualReadRequest::~ActualReadRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualReadRequest)
  SharedDtor();
}

void ActualReadRequest::SharedDtor() {
  path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ActualReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualReadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualReadRequest_descriptor_;
}

const ActualReadRequest& ActualReadRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_ReaderPlugin_2eproto();
  return *default_instance_;
}

ActualReadRequest* ActualReadRequest::default_instance_ = NULL;

ActualReadRequest* ActualReadRequest::New(
    ::google::protobuf::Arena* arena) const {
  ActualReadRequest* n = new ActualReadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualReadRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualReadRequest)
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ActualReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualReadRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->path().data(),
              (int)this->path().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualReadRequest.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualReadRequest)
  return false;
#undef DO_
}

void ActualReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualReadRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualReadRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualReadRequest)
}

::google::protobuf::uint8*
ActualReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualReadRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualReadRequest.path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualReadRequest)
  return target;
}

int ActualReadRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualReadRequest)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualReadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualReadRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualReadRequest)
    MergeFrom(*source);
  }
}

void ActualReadRequest::MergeFrom(const ActualReadRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.path().size() > 0) {
    path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
}

void ActualReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualReadRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualReadRequest::CopyFrom(const ActualReadRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualReadRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualReadRequest::IsInitialized() const {
  return true;
}

void ActualReadRequest::Swap(ActualReadRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualReadRequest::InternalSwap(ActualReadRequest* other) {
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualReadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualReadRequest_descriptor_;
  metadata.reflection = ActualReadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualReadRequest

// optional string path = 1;
void ActualReadRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualReadRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualReadRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualReadRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualReadRequest.path)
}
void ActualReadRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualReadRequest.path)
}
void ActualReadRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualReadRequest.path)
}
::std::string* ActualReadRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualReadRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualReadRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualReadRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualReadRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualReadRequest.path)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRequest::kActualReadRequestFieldNumber;
const int ReadRequest::kCliResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRequest::ReadRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ReadRequest)
}

void ReadRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ReadRequest_default_oneof_instance_->actualreadrequest_ = const_cast<
      ::devmand::channels::cli::plugin::ActualReadRequest*>(
      &::devmand::channels::cli::plugin::ActualReadRequest::default_instance());
  ReadRequest_default_oneof_instance_->cliresponse_ =
      const_cast<::devmand::channels::cli::plugin::CliResponse*>(
          &::devmand::channels::cli::plugin::CliResponse::default_instance());
}

ReadRequest::ReadRequest(const ReadRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ReadRequest)
}

void ReadRequest::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_ReadRequestUnion();
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
  if (has_ReadRequestUnion()) {
    clear_ReadRequestUnion();
  }
  if (this != default_instance_) {
  }
}

void ReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRequest_descriptor_;
}

const ReadRequest& ReadRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_ReaderPlugin_2eproto();
  return *default_instance_;
}

ReadRequest* ReadRequest::default_instance_ = NULL;

ReadRequest* ReadRequest::New(::google::protobuf::Arena* arena) const {
  ReadRequest* n = new ReadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRequest::clear_ReadRequestUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.ReadRequest)
  switch (ReadRequestUnion_case()) {
    case kActualReadRequest: {
      delete ReadRequestUnion_.actualreadrequest_;
      break;
    }
    case kCliResponse: {
      delete ReadRequestUnion_.cliresponse_;
      break;
    }
    case READREQUESTUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = READREQUESTUNION_NOT_SET;
}

void ReadRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ReadRequest)
  clear_ReadRequestUnion();
}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ReadRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.ActualReadRequest
      // actualReadRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualreadrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_cliResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_cliResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_cliresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ReadRequest)
  // optional .devmand.channels.cli.plugin.ActualReadRequest actualReadRequest =
  // 1;
  if (has_actualreadrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *ReadRequestUnion_.actualreadrequest_, output);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *ReadRequestUnion_.cliresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ReadRequest)
}

::google::protobuf::uint8* ReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ReadRequest)
  // optional .devmand.channels.cli.plugin.ActualReadRequest actualReadRequest =
  // 1;
  if (has_actualreadrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *ReadRequestUnion_.actualreadrequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *ReadRequestUnion_.cliresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ReadRequest)
  return target;
}

int ReadRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ReadRequest)
  int total_size = 0;

  switch (ReadRequestUnion_case()) {
    // optional .devmand.channels.cli.plugin.ActualReadRequest actualReadRequest
    // = 1;
    case kActualReadRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *ReadRequestUnion_.actualreadrequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
    case kCliResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *ReadRequestUnion_.cliresponse_);
      break;
    }
    case READREQUESTUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRequest>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.ReadRequestUnion_case()) {
    case kActualReadRequest: {
      mutable_actualreadrequest()
          ->::devmand::channels::cli::plugin::ActualReadRequest::MergeFrom(
              from.actualreadrequest());
      break;
    }
    case kCliResponse: {
      mutable_cliresponse()
          ->::devmand::channels::cli::plugin::CliResponse::MergeFrom(
              from.cliresponse());
      break;
    }
    case READREQUESTUNION_NOT_SET: {
      break;
    }
  }
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ReadRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ReadRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ReadRequest::InternalSwap(ReadRequest* other) {
  std::swap(ReadRequestUnion_, other->ReadRequestUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRequest_descriptor_;
  metadata.reflection = ReadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRequest

// optional .devmand.channels.cli.plugin.ActualReadRequest actualReadRequest =
// 1;
bool ReadRequest::has_actualreadrequest() const {
  return ReadRequestUnion_case() == kActualReadRequest;
}
void ReadRequest::set_has_actualreadrequest() {
  _oneof_case_[0] = kActualReadRequest;
}
void ReadRequest::clear_actualreadrequest() {
  if (has_actualreadrequest()) {
    delete ReadRequestUnion_.actualreadrequest_;
    clear_has_ReadRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualReadRequest&
ReadRequest::actualreadrequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
  return has_actualreadrequest()
      ? *ReadRequestUnion_.actualreadrequest_
      : ::devmand::channels::cli::plugin::ActualReadRequest::default_instance();
}
::devmand::channels::cli::plugin::ActualReadRequest*
ReadRequest::mutable_actualreadrequest() {
  if (!has_actualreadrequest()) {
    clear_ReadRequestUnion();
    set_has_actualreadrequest();
    ReadRequestUnion_.actualreadrequest_ =
        new ::devmand::channels::cli::plugin::ActualReadRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
  return ReadRequestUnion_.actualreadrequest_;
}
::devmand::channels::cli::plugin::ActualReadRequest*
ReadRequest::release_actualreadrequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
  if (has_actualreadrequest()) {
    clear_has_ReadRequestUnion();
    ::devmand::channels::cli::plugin::ActualReadRequest* temp =
        ReadRequestUnion_.actualreadrequest_;
    ReadRequestUnion_.actualreadrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRequest::set_allocated_actualreadrequest(
    ::devmand::channels::cli::plugin::ActualReadRequest* actualreadrequest) {
  clear_ReadRequestUnion();
  if (actualreadrequest) {
    set_has_actualreadrequest();
    ReadRequestUnion_.actualreadrequest_ = actualreadrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
bool ReadRequest::has_cliresponse() const {
  return ReadRequestUnion_case() == kCliResponse;
}
void ReadRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
void ReadRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete ReadRequestUnion_.cliresponse_;
    clear_has_ReadRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::CliResponse& ReadRequest::cliresponse()
    const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadRequest.cliResponse)
  return has_cliresponse()
      ? *ReadRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
::devmand::channels::cli::plugin::CliResponse*
ReadRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_ReadRequestUnion();
    set_has_cliresponse();
    ReadRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadRequest.cliResponse)
  return ReadRequestUnion_.cliresponse_;
}
::devmand::channels::cli::plugin::CliResponse*
ReadRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_ReadRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        ReadRequestUnion_.cliresponse_;
    ReadRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_ReadRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    ReadRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadRequest.cliResponse)
}

bool ReadRequest::has_ReadRequestUnion() const {
  return ReadRequestUnion_case() != READREQUESTUNION_NOT_SET;
}
void ReadRequest::clear_has_ReadRequestUnion() {
  _oneof_case_[0] = READREQUESTUNION_NOT_SET;
}
ReadRequest::ReadRequestUnionCase ReadRequest::ReadRequestUnion_case() const {
  return ReadRequest::ReadRequestUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActualReadResponse::kJsonFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualReadResponse::ActualReadResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualReadResponse)
}

void ActualReadResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualReadResponse::ActualReadResponse(const ActualReadResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualReadResponse)
}

void ActualReadResponse::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActualReadResponse::~ActualReadResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualReadResponse)
  SharedDtor();
}

void ActualReadResponse::SharedDtor() {
  json_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ActualReadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualReadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualReadResponse_descriptor_;
}

const ActualReadResponse& ActualReadResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_ReaderPlugin_2eproto();
  return *default_instance_;
}

ActualReadResponse* ActualReadResponse::default_instance_ = NULL;

ActualReadResponse* ActualReadResponse::New(
    ::google::protobuf::Arena* arena) const {
  ActualReadResponse* n = new ActualReadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualReadResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualReadResponse)
  json_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ActualReadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualReadResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->json().data(),
              (int)this->json().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualReadResponse.json"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualReadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualReadResponse)
  return false;
#undef DO_
}

void ActualReadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualReadResponse)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->json().data(),
        (int)this->json().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualReadResponse.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->json(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualReadResponse)
}

::google::protobuf::uint8*
ActualReadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualReadResponse)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->json().data(),
        (int)this->json().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualReadResponse.json");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualReadResponse)
  return target;
}

int ActualReadResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualReadResponse)
  int total_size = 0;

  // optional string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->json());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualReadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualReadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualReadResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualReadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualReadResponse)
    MergeFrom(*source);
  }
}

void ActualReadResponse::MergeFrom(const ActualReadResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.json().size() > 0) {
    json_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.json_);
  }
}

void ActualReadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualReadResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualReadResponse::CopyFrom(const ActualReadResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualReadResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualReadResponse::IsInitialized() const {
  return true;
}

void ActualReadResponse::Swap(ActualReadResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualReadResponse::InternalSwap(ActualReadResponse* other) {
  json_.Swap(&other->json_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualReadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualReadResponse_descriptor_;
  metadata.reflection = ActualReadResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualReadResponse

// optional string json = 1;
void ActualReadResponse::clear_json() {
  json_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualReadResponse::json() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualReadResponse.json)
  return json_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualReadResponse::set_json(const ::std::string& value) {
  json_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualReadResponse.json)
}
void ActualReadResponse::set_json(const char* value) {
  json_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualReadResponse.json)
}
void ActualReadResponse::set_json(const char* value, size_t size) {
  json_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualReadResponse.json)
}
::std::string* ActualReadResponse::mutable_json() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualReadResponse.json)
  return json_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualReadResponse::release_json() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualReadResponse.json)

  return json_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualReadResponse::set_allocated_json(::std::string* json) {
  if (json != NULL) {
  } else {
  }
  json_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualReadResponse.json)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadResponse::kCliRequestFieldNumber;
const int ReadResponse::kActualReadResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadResponse::ReadResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ReadResponse)
}

void ReadResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ReadResponse_default_oneof_instance_->clirequest_ =
      const_cast<::devmand::channels::cli::plugin::CliRequest*>(
          &::devmand::channels::cli::plugin::CliRequest::default_instance());
  ReadResponse_default_oneof_instance_->actualreadresponse_ =
      const_cast<::devmand::channels::cli::plugin::ActualReadResponse*>(
          &::devmand::channels::cli::plugin::ActualReadResponse::
              default_instance());
}

ReadResponse::ReadResponse(const ReadResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ReadResponse)
}

void ReadResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_ReadResponseUnion();
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ReadResponse)
  SharedDtor();
}

void ReadResponse::SharedDtor() {
  if (has_ReadResponseUnion()) {
    clear_ReadResponseUnion();
  }
  if (this != default_instance_) {
  }
}

void ReadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadResponse_descriptor_;
}

const ReadResponse& ReadResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_ReaderPlugin_2eproto();
  return *default_instance_;
}

ReadResponse* ReadResponse::default_instance_ = NULL;

ReadResponse* ReadResponse::New(::google::protobuf::Arena* arena) const {
  ReadResponse* n = new ReadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadResponse::clear_ReadResponseUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.ReadResponse)
  switch (ReadResponseUnion_case()) {
    case kCliRequest: {
      delete ReadResponseUnion_.clirequest_;
      break;
    }
    case kActualReadResponse: {
      delete ReadResponseUnion_.actualreadresponse_;
      break;
    }
    case READRESPONSEUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = READRESPONSEUNION_NOT_SET;
}

void ReadResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ReadResponse)
  clear_ReadResponseUnion();
}

bool ReadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ReadResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_clirequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_actualReadResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.ActualReadResponse
      // actualReadResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_actualReadResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualreadresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ReadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ReadResponse)
  return false;
#undef DO_
}

void ReadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ReadResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *ReadResponseUnion_.clirequest_, output);
  }

  // optional .devmand.channels.cli.plugin.ActualReadResponse actualReadResponse
  // = 2;
  if (has_actualreadresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *ReadResponseUnion_.actualreadresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ReadResponse)
}

::google::protobuf::uint8*
ReadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ReadResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *ReadResponseUnion_.clirequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.ActualReadResponse actualReadResponse
  // = 2;
  if (has_actualreadresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *ReadResponseUnion_.actualreadresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ReadResponse)
  return target;
}

int ReadResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ReadResponse)
  int total_size = 0;

  switch (ReadResponseUnion_case()) {
    // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
    case kCliRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *ReadResponseUnion_.clirequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.ActualReadResponse
    // actualReadResponse = 2;
    case kActualReadResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *ReadResponseUnion_.actualreadresponse_);
      break;
    }
    case READRESPONSEUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadResponse>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ReadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ReadResponse)
    MergeFrom(*source);
  }
}

void ReadResponse::MergeFrom(const ReadResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.ReadResponseUnion_case()) {
    case kCliRequest: {
      mutable_clirequest()
          ->::devmand::channels::cli::plugin::CliRequest::MergeFrom(
              from.clirequest());
      break;
    }
    case kActualReadResponse: {
      mutable_actualreadresponse()
          ->::devmand::channels::cli::plugin::ActualReadResponse::MergeFrom(
              from.actualreadresponse());
      break;
    }
    case READRESPONSEUNION_NOT_SET: {
      break;
    }
  }
}

void ReadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ReadResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ReadResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {
  return true;
}

void ReadResponse::Swap(ReadResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ReadResponse::InternalSwap(ReadResponse* other) {
  std::swap(ReadResponseUnion_, other->ReadResponseUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadResponse_descriptor_;
  metadata.reflection = ReadResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
bool ReadResponse::has_clirequest() const {
  return ReadResponseUnion_case() == kCliRequest;
}
void ReadResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
void ReadResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete ReadResponseUnion_.clirequest_;
    clear_has_ReadResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::CliRequest& ReadResponse::clirequest()
    const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadResponse.cliRequest)
  return has_clirequest()
      ? *ReadResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
::devmand::channels::cli::plugin::CliRequest*
ReadResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_ReadResponseUnion();
    set_has_clirequest();
    ReadResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadResponse.cliRequest)
  return ReadResponseUnion_.clirequest_;
}
::devmand::channels::cli::plugin::CliRequest*
ReadResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_ReadResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        ReadResponseUnion_.clirequest_;
    ReadResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_ReadResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    ReadResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualReadResponse actualReadResponse =
// 2;
bool ReadResponse::has_actualreadresponse() const {
  return ReadResponseUnion_case() == kActualReadResponse;
}
void ReadResponse::set_has_actualreadresponse() {
  _oneof_case_[0] = kActualReadResponse;
}
void ReadResponse::clear_actualreadresponse() {
  if (has_actualreadresponse()) {
    delete ReadResponseUnion_.actualreadresponse_;
    clear_has_ReadResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualReadResponse&
ReadResponse::actualreadresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
  return has_actualreadresponse() ? *ReadResponseUnion_.actualreadresponse_
                                  : ::devmand::channels::cli::plugin::
                                        ActualReadResponse::default_instance();
}
::devmand::channels::cli::plugin::ActualReadResponse*
ReadResponse::mutable_actualreadresponse() {
  if (!has_actualreadresponse()) {
    clear_ReadResponseUnion();
    set_has_actualreadresponse();
    ReadResponseUnion_.actualreadresponse_ =
        new ::devmand::channels::cli::plugin::ActualReadResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
  return ReadResponseUnion_.actualreadresponse_;
}
::devmand::channels::cli::plugin::ActualReadResponse*
ReadResponse::release_actualreadresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
  if (has_actualreadresponse()) {
    clear_has_ReadResponseUnion();
    ::devmand::channels::cli::plugin::ActualReadResponse* temp =
        ReadResponseUnion_.actualreadresponse_;
    ReadResponseUnion_.actualreadresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadResponse::set_allocated_actualreadresponse(
    ::devmand::channels::cli::plugin::ActualReadResponse* actualreadresponse) {
  clear_ReadResponseUnion();
  if (actualreadresponse) {
    set_has_actualreadresponse();
    ReadResponseUnion_.actualreadresponse_ = actualreadresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
}

bool ReadResponse::has_ReadResponseUnion() const {
  return ReadResponseUnion_case() != READRESPONSEUNION_NOT_SET;
}
void ReadResponse::clear_has_ReadResponseUnion() {
  _oneof_case_[0] = READRESPONSEUNION_NOT_SET;
}
ReadResponse::ReadResponseUnionCase ReadResponse::ReadResponseUnion_case()
    const {
  return ReadResponse::ReadResponseUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)
