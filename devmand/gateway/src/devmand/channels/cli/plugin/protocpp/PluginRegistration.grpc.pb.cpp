// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: PluginRegistration.proto

#include "PluginRegistration.grpc.pb.h"
#include "PluginRegistration.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

static const char* PluginRegistration_method_names[] = {
    "/devmand.channels.cli.plugin.PluginRegistration/GetCapabilities",
};

std::unique_ptr<PluginRegistration::Stub> PluginRegistration::NewStub(
    const std::shared_ptr<::grpc::ChannelInterface>& channel,
    const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr<PluginRegistration::Stub> stub(
      new PluginRegistration::Stub(channel));
  return stub;
}

PluginRegistration::Stub::Stub(
    const std::shared_ptr<::grpc::ChannelInterface>& channel)
    : channel_(channel),
      rpcmethod_GetCapabilities_(
          PluginRegistration_method_names[0],
          ::grpc::RpcMethod::NORMAL_RPC,
          channel) {}

::grpc::Status PluginRegistration::Stub::GetCapabilities(
    ::grpc::ClientContext* context,
    const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
    ::devmand::channels::cli::plugin::CapabilitiesResponse* response) {
  return ::grpc::BlockingUnaryCall(
      channel_.get(), rpcmethod_GetCapabilities_, context, request, response);
}

::grpc::ClientAsyncResponseReader<
    ::devmand::channels::cli::plugin::CapabilitiesResponse>*
PluginRegistration::Stub::AsyncGetCapabilitiesRaw(
    ::grpc::ClientContext* context,
    const ::devmand::channels::cli::plugin::CapabilitiesRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::devmand::channels::cli::plugin::CapabilitiesResponse>(
      channel_.get(), cq, rpcmethod_GetCapabilities_, context, request);
}

PluginRegistration::Service::Service() {
  (void)PluginRegistration_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      PluginRegistration_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          PluginRegistration::Service,
          ::devmand::channels::cli::plugin::CapabilitiesRequest,
          ::devmand::channels::cli::plugin::CapabilitiesResponse>(
          std::mem_fn(&PluginRegistration::Service::GetCapabilities), this)));
}

PluginRegistration::Service::~Service() {}

::grpc::Status PluginRegistration::Service::GetCapabilities(
    ::grpc::ServerContext* context,
    const ::devmand::channels::cli::plugin::CapabilitiesRequest* request,
    ::devmand::channels::cli::plugin::CapabilitiesResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand
