// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PluginRegistration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#endif
#include "PluginRegistration.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

namespace {

const ::google::protobuf::Descriptor* CapabilitiesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CapabilitiesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CliFlavourParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CliFlavourParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    DeviceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReaderCapability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ReaderCapability_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriterCapability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    WriterCapability_reflection_ = NULL;
const ::google::protobuf::Descriptor* CapabilitiesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CapabilitiesResponse_reflection_ = NULL;

} // namespace

void protobuf_AssignDesc_PluginRegistration_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PluginRegistration_2eproto() {
  protobuf_AddDesc_PluginRegistration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "PluginRegistration.proto");
  GOOGLE_CHECK(file != NULL);
  CapabilitiesRequest_descriptor_ = file->message_type(0);
  static const int CapabilitiesRequest_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesRequest, id_),
  };
  CapabilitiesRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CapabilitiesRequest_descriptor_,
          CapabilitiesRequest::default_instance_,
          CapabilitiesRequest_offsets_,
          -1,
          -1,
          -1,
          sizeof(CapabilitiesRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CapabilitiesRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CapabilitiesRequest, _is_default_instance_));
  CliFlavourParams_descriptor_ = file->message_type(1);
  static const int CliFlavourParams_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourParams, newline_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourParams, baseshowconfigregex_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourParams, baseshowconfigidx_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourParams, singleindentchar_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourParams, configsubsectionend_),
  };
  CliFlavourParams_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CliFlavourParams_descriptor_,
          CliFlavourParams::default_instance_,
          CliFlavourParams_offsets_,
          -1,
          -1,
          -1,
          sizeof(CliFlavourParams),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CliFlavourParams, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CliFlavourParams, _is_default_instance_));
  DeviceType_descriptor_ = file->message_type(2);
  static const int DeviceType_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceType, device_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceType, version_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          DeviceType, cliflavourparams_),
  };
  DeviceType_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          DeviceType_descriptor_,
          DeviceType::default_instance_,
          DeviceType_offsets_,
          -1,
          -1,
          -1,
          sizeof(DeviceType),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              DeviceType, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              DeviceType, _is_default_instance_));
  ReaderCapability_descriptor_ = file->message_type(3);
  static const int ReaderCapability_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReaderCapability, path_),
  };
  ReaderCapability_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ReaderCapability_descriptor_,
          ReaderCapability::default_instance_,
          ReaderCapability_offsets_,
          -1,
          -1,
          -1,
          sizeof(ReaderCapability),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReaderCapability, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ReaderCapability, _is_default_instance_));
  WriterCapability_descriptor_ = file->message_type(4);
  static const int WriterCapability_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriterCapability, path_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          WriterCapability, dependencies_),
  };
  WriterCapability_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          WriterCapability_descriptor_,
          WriterCapability::default_instance_,
          WriterCapability_offsets_,
          -1,
          -1,
          -1,
          sizeof(WriterCapability),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              WriterCapability, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              WriterCapability, _is_default_instance_));
  CapabilitiesResponse_descriptor_ = file->message_type(5);
  static const int CapabilitiesResponse_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CapabilitiesResponse, devicetype_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CapabilitiesResponse, readers_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CapabilitiesResponse, listreaders_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CapabilitiesResponse, writers_),
  };
  CapabilitiesResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CapabilitiesResponse_descriptor_,
          CapabilitiesResponse::default_instance_,
          CapabilitiesResponse_offsets_,
          -1,
          -1,
          -1,
          sizeof(CapabilitiesResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CapabilitiesResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CapabilitiesResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(
      &protobuf_AssignDescriptors_once_,
      &protobuf_AssignDesc_PluginRegistration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CapabilitiesRequest_descriptor_,
      &CapabilitiesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CliFlavourParams_descriptor_, &CliFlavourParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceType_descriptor_, &DeviceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReaderCapability_descriptor_, &ReaderCapability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriterCapability_descriptor_, &WriterCapability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CapabilitiesResponse_descriptor_,
      &CapabilitiesResponse::default_instance());
}

} // namespace

void protobuf_ShutdownFile_PluginRegistration_2eproto() {
  delete CapabilitiesRequest::default_instance_;
  delete CapabilitiesRequest_reflection_;
  delete CliFlavourParams::default_instance_;
  delete CliFlavourParams_reflection_;
  delete DeviceType::default_instance_;
  delete DeviceType_reflection_;
  delete ReaderCapability::default_instance_;
  delete ReaderCapability_reflection_;
  delete WriterCapability::default_instance_;
  delete WriterCapability_reflection_;
  delete CapabilitiesResponse::default_instance_;
  delete CapabilitiesResponse_reflection_;
}

void protobuf_AddDesc_PluginRegistration_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_PluginRegistration_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\030PluginRegistration.proto\022\033devmand.chan"
      "nels.cli.plugin\"!\n\023CapabilitiesRequest\022\n"
      "\n\002id\030\001 \001(\t\"\222\001\n\020CliFlavourParams\022\017\n\007newli"
      "ne\030\001 \001(\t\022\033\n\023baseShowConfigRegex\030\002 \001(\t\022\031\n"
      "\021baseShowConfigIdx\030\003 \001(\r\022\030\n\020singleIndent"
      "Char\030\004 \001(\t\022\033\n\023configSubsectionEnd\030\005 \001(\t\""
      "v\n\nDeviceType\022\016\n\006device\030\001 \001(\t\022\017\n\007version"
      "\030\002 \001(\t\022G\n\020cliFlavourParams\030\003 \001(\0132-.devma"
      "nd.channels.cli.plugin.CliFlavourParams\""
      " \n\020ReaderCapability\022\014\n\004path\030\001 \001(\t\"6\n\020Wri"
      "terCapability\022\014\n\004path\030\001 \001(\t\022\024\n\014dependenc"
      "ies\030\002 \003(\t\"\227\002\n\024CapabilitiesResponse\022;\n\nde"
      "viceType\030\001 \001(\0132\'.devmand.channels.cli.pl"
      "ugin.DeviceType\022>\n\007readers\030\002 \003(\0132-.devma"
      "nd.channels.cli.plugin.ReaderCapability\022"
      "B\n\013listReaders\030\003 \003(\0132-.devmand.channels."
      "cli.plugin.ReaderCapability\022>\n\007writers\030\004"
      " \003(\0132-.devmand.channels.cli.plugin.Write"
      "rCapability2\216\001\n\022PluginRegistration\022x\n\017Ge"
      "tCapabilities\0220.devmand.channels.cli.plu"
      "gin.CapabilitiesRequest\0321.devmand.channe"
      "ls.cli.plugin.CapabilitiesResponse\"\000b\006pr"
      "oto3",
      884);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "PluginRegistration.proto", &protobuf_RegisterTypes);
  CapabilitiesRequest::default_instance_ = new CapabilitiesRequest();
  CliFlavourParams::default_instance_ = new CliFlavourParams();
  DeviceType::default_instance_ = new DeviceType();
  ReaderCapability::default_instance_ = new ReaderCapability();
  WriterCapability::default_instance_ = new WriterCapability();
  CapabilitiesResponse::default_instance_ = new CapabilitiesResponse();
  CapabilitiesRequest::default_instance_->InitAsDefaultInstance();
  CliFlavourParams::default_instance_->InitAsDefaultInstance();
  DeviceType::default_instance_->InitAsDefaultInstance();
  ReaderCapability::default_instance_->InitAsDefaultInstance();
  WriterCapability::default_instance_->InitAsDefaultInstance();
  CapabilitiesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_PluginRegistration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PluginRegistration_2eproto {
  StaticDescriptorInitializer_PluginRegistration_2eproto() {
    protobuf_AddDesc_PluginRegistration_2eproto();
  }
} static_descriptor_initializer_PluginRegistration_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CapabilitiesRequest::kIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CapabilitiesRequest::CapabilitiesRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.CapabilitiesRequest)
}

void CapabilitiesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CapabilitiesRequest::CapabilitiesRequest(const CapabilitiesRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.CapabilitiesRequest)
}

void CapabilitiesRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CapabilitiesRequest::~CapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.CapabilitiesRequest)
  SharedDtor();
}

void CapabilitiesRequest::SharedDtor() {
  id_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CapabilitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapabilitiesRequest_descriptor_;
}

const CapabilitiesRequest& CapabilitiesRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_PluginRegistration_2eproto();
  return *default_instance_;
}

CapabilitiesRequest* CapabilitiesRequest::default_instance_ = NULL;

CapabilitiesRequest* CapabilitiesRequest::New(
    ::google::protobuf::Arena* arena) const {
  CapabilitiesRequest* n = new CapabilitiesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CapabilitiesRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CapabilitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->id().data(),
              (int)this->id().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CapabilitiesRequest.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.CapabilitiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.CapabilitiesRequest)
  return false;
#undef DO_
}

void CapabilitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->id().data(),
        (int)this->id().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CapabilitiesRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.CapabilitiesRequest)
}

::google::protobuf::uint8*
CapabilitiesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->id().data(),
        (int)this->id().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CapabilitiesRequest.id");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.CapabilitiesRequest)
  return target;
}

int CapabilitiesRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CapabilitiesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const CapabilitiesRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.CapabilitiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.CapabilitiesRequest)
    MergeFrom(*source);
  }
}

void CapabilitiesRequest::MergeFrom(const CapabilitiesRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {
    id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void CapabilitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesRequest::CopyFrom(const CapabilitiesRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.CapabilitiesRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesRequest::IsInitialized() const {
  return true;
}

void CapabilitiesRequest::Swap(CapabilitiesRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CapabilitiesRequest::InternalSwap(CapabilitiesRequest* other) {
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CapabilitiesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapabilitiesRequest_descriptor_;
  metadata.reflection = CapabilitiesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CapabilitiesRequest

// optional string id = 1;
void CapabilitiesRequest::clear_id() {
  id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CapabilitiesRequest::id() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesRequest.id)
  return id_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CapabilitiesRequest::set_id(const ::std::string& value) {
  id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}
void CapabilitiesRequest::set_id(const char* value) {
  id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}
void CapabilitiesRequest::set_id(const char* value, size_t size) {
  id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}
::std::string* CapabilitiesRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesRequest.id)
  return id_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CapabilitiesRequest::release_id() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CapabilitiesRequest.id)

  return id_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CapabilitiesRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
  } else {
  }
  id_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CliFlavourParams::kNewlineFieldNumber;
const int CliFlavourParams::kBaseShowConfigRegexFieldNumber;
const int CliFlavourParams::kBaseShowConfigIdxFieldNumber;
const int CliFlavourParams::kSingleIndentCharFieldNumber;
const int CliFlavourParams::kConfigSubsectionEndFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CliFlavourParams::CliFlavourParams()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.CliFlavourParams)
}

void CliFlavourParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CliFlavourParams::CliFlavourParams(const CliFlavourParams& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.CliFlavourParams)
}

void CliFlavourParams::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  newline_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigregex_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigidx_ = 0u;
  singleindentchar_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configsubsectionend_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CliFlavourParams::~CliFlavourParams() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.CliFlavourParams)
  SharedDtor();
}

void CliFlavourParams::SharedDtor() {
  newline_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigregex_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  singleindentchar_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configsubsectionend_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CliFlavourParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CliFlavourParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CliFlavourParams_descriptor_;
}

const CliFlavourParams& CliFlavourParams::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_PluginRegistration_2eproto();
  return *default_instance_;
}

CliFlavourParams* CliFlavourParams::default_instance_ = NULL;

CliFlavourParams* CliFlavourParams::New(
    ::google::protobuf::Arena* arena) const {
  CliFlavourParams* n = new CliFlavourParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CliFlavourParams::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.CliFlavourParams)
  newline_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigregex_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigidx_ = 0u;
  singleindentchar_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configsubsectionend_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CliFlavourParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.CliFlavourParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string newline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_newline()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->newline().data(),
              (int)this->newline().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourParams.newline"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_baseShowConfigRegex;
        break;
      }

      // optional string baseShowConfigRegex = 2;
      case 2: {
        if (tag == 18) {
        parse_baseShowConfigRegex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_baseshowconfigregex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->baseshowconfigregex().data(),
              (int)this->baseshowconfigregex().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24))
          goto parse_baseShowConfigIdx;
        break;
      }

      // optional uint32 baseShowConfigIdx = 3;
      case 3: {
        if (tag == 24) {
        parse_baseShowConfigIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::uint32,
               ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
              input, &baseshowconfigidx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34))
          goto parse_singleIndentChar;
        break;
      }

      // optional string singleIndentChar = 4;
      case 4: {
        if (tag == 34) {
        parse_singleIndentChar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_singleindentchar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->singleindentchar().data(),
              (int)this->singleindentchar().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42))
          goto parse_configSubsectionEnd;
        break;
      }

      // optional string configSubsectionEnd = 5;
      case 5: {
        if (tag == 42) {
        parse_configSubsectionEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_configsubsectionend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->configsubsectionend().data(),
              (int)this->configsubsectionend().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.CliFlavourParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.CliFlavourParams)
  return false;
#undef DO_
}

void CliFlavourParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.CliFlavourParams)
  // optional string newline = 1;
  if (this->newline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->newline().data(),
        (int)this->newline().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.newline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->newline(), output);
  }

  // optional string baseShowConfigRegex = 2;
  if (this->baseshowconfigregex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->baseshowconfigregex().data(),
        (int)this->baseshowconfigregex().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->baseshowconfigregex(), output);
  }

  // optional uint32 baseShowConfigIdx = 3;
  if (this->baseshowconfigidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
        3, this->baseshowconfigidx(), output);
  }

  // optional string singleIndentChar = 4;
  if (this->singleindentchar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->singleindentchar().data(),
        (int)this->singleindentchar().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->singleindentchar(), output);
  }

  // optional string configSubsectionEnd = 5;
  if (this->configsubsectionend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->configsubsectionend().data(),
        (int)this->configsubsectionend().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->configsubsectionend(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.CliFlavourParams)
}

::google::protobuf::uint8*
CliFlavourParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.CliFlavourParams)
  // optional string newline = 1;
  if (this->newline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->newline().data(),
        (int)this->newline().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.newline");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newline(), target);
  }

  // optional string baseShowConfigRegex = 2;
  if (this->baseshowconfigregex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->baseshowconfigregex().data(),
        (int)this->baseshowconfigregex().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->baseshowconfigregex(), target);
  }

  // optional uint32 baseShowConfigIdx = 3;
  if (this->baseshowconfigidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        3, this->baseshowconfigidx(), target);
  }

  // optional string singleIndentChar = 4;
  if (this->singleindentchar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->singleindentchar().data(),
        (int)this->singleindentchar().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->singleindentchar(), target);
  }

  // optional string configSubsectionEnd = 5;
  if (this->configsubsectionend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->configsubsectionend().data(),
        (int)this->configsubsectionend().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->configsubsectionend(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.CliFlavourParams)
  return target;
}

int CliFlavourParams::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.CliFlavourParams)
  int total_size = 0;

  // optional string newline = 1;
  if (this->newline().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->newline());
  }

  // optional string baseShowConfigRegex = 2;
  if (this->baseshowconfigregex().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->baseshowconfigregex());
  }

  // optional uint32 baseShowConfigIdx = 3;
  if (this->baseshowconfigidx() != 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
                      this->baseshowconfigidx());
  }

  // optional string singleIndentChar = 4;
  if (this->singleindentchar().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->singleindentchar());
  }

  // optional string configSubsectionEnd = 5;
  if (this->configsubsectionend().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->configsubsectionend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CliFlavourParams::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.CliFlavourParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CliFlavourParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const CliFlavourParams>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.CliFlavourParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.CliFlavourParams)
    MergeFrom(*source);
  }
}

void CliFlavourParams::MergeFrom(const CliFlavourParams& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.CliFlavourParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.newline().size() > 0) {
    newline_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.newline_);
  }
  if (from.baseshowconfigregex().size() > 0) {
    baseshowconfigregex_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.baseshowconfigregex_);
  }
  if (from.baseshowconfigidx() != 0) {
    set_baseshowconfigidx(from.baseshowconfigidx());
  }
  if (from.singleindentchar().size() > 0) {
    singleindentchar_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.singleindentchar_);
  }
  if (from.configsubsectionend().size() > 0) {
    configsubsectionend_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.configsubsectionend_);
  }
}

void CliFlavourParams::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.CliFlavourParams)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CliFlavourParams::CopyFrom(const CliFlavourParams& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.CliFlavourParams)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CliFlavourParams::IsInitialized() const {
  return true;
}

void CliFlavourParams::Swap(CliFlavourParams* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CliFlavourParams::InternalSwap(CliFlavourParams* other) {
  newline_.Swap(&other->newline_);
  baseshowconfigregex_.Swap(&other->baseshowconfigregex_);
  std::swap(baseshowconfigidx_, other->baseshowconfigidx_);
  singleindentchar_.Swap(&other->singleindentchar_);
  configsubsectionend_.Swap(&other->configsubsectionend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CliFlavourParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CliFlavourParams_descriptor_;
  metadata.reflection = CliFlavourParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CliFlavourParams

// optional string newline = 1;
void CliFlavourParams::clear_newline() {
  newline_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourParams::newline() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourParams.newline)
  return newline_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_newline(const ::std::string& value) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourParams.newline)
}
void CliFlavourParams::set_newline(const char* value) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourParams.newline)
}
void CliFlavourParams::set_newline(const char* value, size_t size) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourParams.newline)
}
::std::string* CliFlavourParams::mutable_newline() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourParams.newline)
  return newline_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourParams::release_newline() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourParams.newline)

  return newline_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_allocated_newline(::std::string* newline) {
  if (newline != NULL) {
  } else {
  }
  newline_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), newline);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourParams.newline)
}

// optional string baseShowConfigRegex = 2;
void CliFlavourParams::clear_baseshowconfigregex() {
  baseshowconfigregex_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourParams::baseshowconfigregex() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex)
  return baseshowconfigregex_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_baseshowconfigregex(const ::std::string& value) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex)
}
void CliFlavourParams::set_baseshowconfigregex(const char* value) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex)
}
void CliFlavourParams::set_baseshowconfigregex(const char* value, size_t size) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex)
}
::std::string* CliFlavourParams::mutable_baseshowconfigregex() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex)
  return baseshowconfigregex_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourParams::release_baseshowconfigregex() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex)

  return baseshowconfigregex_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_allocated_baseshowconfigregex(
    ::std::string* baseshowconfigregex) {
  if (baseshowconfigregex != NULL) {
  } else {
  }
  baseshowconfigregex_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      baseshowconfigregex);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigRegex)
}

// optional uint32 baseShowConfigIdx = 3;
void CliFlavourParams::clear_baseshowconfigidx() {
  baseshowconfigidx_ = 0u;
}
::google::protobuf::uint32 CliFlavourParams::baseshowconfigidx() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigIdx)
  return baseshowconfigidx_;
}
void CliFlavourParams::set_baseshowconfigidx(::google::protobuf::uint32 value) {
  baseshowconfigidx_ = value;
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourParams.baseShowConfigIdx)
}

// optional string singleIndentChar = 4;
void CliFlavourParams::clear_singleindentchar() {
  singleindentchar_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourParams::singleindentchar() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar)
  return singleindentchar_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_singleindentchar(const ::std::string& value) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar)
}
void CliFlavourParams::set_singleindentchar(const char* value) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar)
}
void CliFlavourParams::set_singleindentchar(const char* value, size_t size) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar)
}
::std::string* CliFlavourParams::mutable_singleindentchar() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar)
  return singleindentchar_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourParams::release_singleindentchar() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar)

  return singleindentchar_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_allocated_singleindentchar(
    ::std::string* singleindentchar) {
  if (singleindentchar != NULL) {
  } else {
  }
  singleindentchar_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      singleindentchar);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourParams.singleIndentChar)
}

// optional string configSubsectionEnd = 5;
void CliFlavourParams::clear_configsubsectionend() {
  configsubsectionend_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourParams::configsubsectionend() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd)
  return configsubsectionend_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_configsubsectionend(const ::std::string& value) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd)
}
void CliFlavourParams::set_configsubsectionend(const char* value) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd)
}
void CliFlavourParams::set_configsubsectionend(const char* value, size_t size) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd)
}
::std::string* CliFlavourParams::mutable_configsubsectionend() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd)
  return configsubsectionend_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourParams::release_configsubsectionend() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd)

  return configsubsectionend_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourParams::set_allocated_configsubsectionend(
    ::std::string* configsubsectionend) {
  if (configsubsectionend != NULL) {
  } else {
  }
  configsubsectionend_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      configsubsectionend);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourParams.configSubsectionEnd)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceType::kDeviceFieldNumber;
const int DeviceType::kVersionFieldNumber;
const int DeviceType::kCliFlavourParamsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceType::DeviceType()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.DeviceType)
}

void DeviceType::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cliflavourparams_ = const_cast<
      ::devmand::channels::cli::plugin::CliFlavourParams*>(
      &::devmand::channels::cli::plugin::CliFlavourParams::default_instance());
}

DeviceType::DeviceType(const DeviceType& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.DeviceType)
}

void DeviceType::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cliflavourparams_ = NULL;
}

DeviceType::~DeviceType() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.DeviceType)
  SharedDtor();
}

void DeviceType::SharedDtor() {
  device_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cliflavourparams_;
  }
}

void DeviceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}

const DeviceType& DeviceType::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_PluginRegistration_2eproto();
  return *default_instance_;
}

DeviceType* DeviceType::default_instance_ = NULL;

DeviceType* DeviceType::New(::google::protobuf::Arena* arena) const {
  DeviceType* n = new DeviceType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceType::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.DeviceType)
  device_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cliflavourparams_ != NULL)
    delete cliflavourparams_;
  cliflavourparams_ = NULL;
}

bool DeviceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.DeviceType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->device().data(),
              (int)this->device().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.DeviceType.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
        parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->version().data(),
              (int)this->version().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.DeviceType.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_cliFlavourParams;
        break;
      }

      // optional .devmand.channels.cli.plugin.CliFlavourParams cliFlavourParams
      // = 3;
      case 3: {
        if (tag == 26) {
        parse_cliFlavourParams:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_cliflavourparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.DeviceType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.DeviceType)
  return false;
#undef DO_
}

void DeviceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.DeviceType)
  // optional string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->device().data(),
        (int)this->device().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DeviceType.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->device(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->version().data(),
        (int)this->version().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DeviceType.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->version(), output);
  }

  // optional .devmand.channels.cli.plugin.CliFlavourParams cliFlavourParams =
  // 3;
  if (this->has_cliflavourparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *this->cliflavourparams_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.DeviceType)
}

::google::protobuf::uint8* DeviceType::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.DeviceType)
  // optional string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->device().data(),
        (int)this->device().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DeviceType.device");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->version().data(),
        (int)this->version().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DeviceType.version");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional .devmand.channels.cli.plugin.CliFlavourParams cliFlavourParams =
  // 3;
  if (this->has_cliflavourparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            3, *this->cliflavourparams_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.DeviceType)
  return target;
}

int DeviceType::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.DeviceType)
  int total_size = 0;

  // optional string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->device());
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->version());
  }

  // optional .devmand.channels.cli.plugin.CliFlavourParams cliFlavourParams =
  // 3;
  if (this->has_cliflavourparams()) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *this->cliflavourparams_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceType::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.DeviceType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceType>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.DeviceType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.DeviceType)
    MergeFrom(*source);
  }
}

void DeviceType::MergeFrom(const DeviceType& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.DeviceType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.device().size() > 0) {
    device_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.device_);
  }
  if (from.version().size() > 0) {
    version_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.version_);
  }
  if (from.has_cliflavourparams()) {
    mutable_cliflavourparams()
        ->::devmand::channels::cli::plugin::CliFlavourParams::MergeFrom(
            from.cliflavourparams());
  }
}

void DeviceType::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.DeviceType)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DeviceType::CopyFrom(const DeviceType& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.DeviceType)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool DeviceType::IsInitialized() const {
  return true;
}

void DeviceType::Swap(DeviceType* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void DeviceType::InternalSwap(DeviceType* other) {
  device_.Swap(&other->device_);
  version_.Swap(&other->version_);
  std::swap(cliflavourparams_, other->cliflavourparams_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceType_descriptor_;
  metadata.reflection = DeviceType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceType

// optional string device = 1;
void DeviceType::clear_device() {
  device_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceType::device() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DeviceType.device)
  return device_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceType::set_device(const ::std::string& value) {
  device_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DeviceType.device)
}
void DeviceType::set_device(const char* value) {
  device_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DeviceType.device)
}
void DeviceType::set_device(const char* value, size_t size) {
  device_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DeviceType.device)
}
::std::string* DeviceType::mutable_device() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DeviceType.device)
  return device_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceType::release_device() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DeviceType.device)

  return device_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceType::set_allocated_device(::std::string* device) {
  if (device != NULL) {
  } else {
  }
  device_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DeviceType.device)
}

// optional string version = 2;
void DeviceType::clear_version() {
  version_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceType::version() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DeviceType.version)
  return version_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceType::set_version(const ::std::string& value) {
  version_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DeviceType.version)
}
void DeviceType::set_version(const char* value) {
  version_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DeviceType.version)
}
void DeviceType::set_version(const char* value, size_t size) {
  version_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DeviceType.version)
}
::std::string* DeviceType::mutable_version() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DeviceType.version)
  return version_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceType::release_version() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DeviceType.version)

  return version_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceType::set_allocated_version(::std::string* version) {
  if (version != NULL) {
  } else {
  }
  version_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DeviceType.version)
}

// optional .devmand.channels.cli.plugin.CliFlavourParams cliFlavourParams = 3;
bool DeviceType::has_cliflavourparams() const {
  return !_is_default_instance_ && cliflavourparams_ != NULL;
}
void DeviceType::clear_cliflavourparams() {
  if (GetArenaNoVirtual() == NULL && cliflavourparams_ != NULL)
    delete cliflavourparams_;
  cliflavourparams_ = NULL;
}
const ::devmand::channels::cli::plugin::CliFlavourParams&
DeviceType::cliflavourparams() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DeviceType.cliFlavourParams)
  return cliflavourparams_ != NULL ? *cliflavourparams_
                                   : *default_instance_->cliflavourparams_;
}
::devmand::channels::cli::plugin::CliFlavourParams*
DeviceType::mutable_cliflavourparams() {
  if (cliflavourparams_ == NULL) {
    cliflavourparams_ = new ::devmand::channels::cli::plugin::CliFlavourParams;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DeviceType.cliFlavourParams)
  return cliflavourparams_;
}
::devmand::channels::cli::plugin::CliFlavourParams*
DeviceType::release_cliflavourparams() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DeviceType.cliFlavourParams)

  ::devmand::channels::cli::plugin::CliFlavourParams* temp = cliflavourparams_;
  cliflavourparams_ = NULL;
  return temp;
}
void DeviceType::set_allocated_cliflavourparams(
    ::devmand::channels::cli::plugin::CliFlavourParams* cliflavourparams) {
  delete cliflavourparams_;
  cliflavourparams_ = cliflavourparams;
  if (cliflavourparams) {
  } else {
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DeviceType.cliFlavourParams)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReaderCapability::kPathFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ReaderCapability::ReaderCapability()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ReaderCapability)
}

void ReaderCapability::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReaderCapability::ReaderCapability(const ReaderCapability& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ReaderCapability)
}

void ReaderCapability::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReaderCapability::~ReaderCapability() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ReaderCapability)
  SharedDtor();
}

void ReaderCapability::SharedDtor() {
  path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReaderCapability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReaderCapability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReaderCapability_descriptor_;
}

const ReaderCapability& ReaderCapability::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_PluginRegistration_2eproto();
  return *default_instance_;
}

ReaderCapability* ReaderCapability::default_instance_ = NULL;

ReaderCapability* ReaderCapability::New(
    ::google::protobuf::Arena* arena) const {
  ReaderCapability* n = new ReaderCapability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReaderCapability::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ReaderCapability)
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReaderCapability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ReaderCapability)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->path().data(),
              (int)this->path().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ReaderCapability.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ReaderCapability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ReaderCapability)
  return false;
#undef DO_
}

void ReaderCapability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ReaderCapability)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ReaderCapability.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ReaderCapability)
}

::google::protobuf::uint8*
ReaderCapability::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ReaderCapability)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ReaderCapability.path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ReaderCapability)
  return target;
}

int ReaderCapability::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ReaderCapability)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReaderCapability::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ReaderCapability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReaderCapability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ReaderCapability>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ReaderCapability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ReaderCapability)
    MergeFrom(*source);
  }
}

void ReaderCapability::MergeFrom(const ReaderCapability& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ReaderCapability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.path().size() > 0) {
    path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
}

void ReaderCapability::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ReaderCapability)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ReaderCapability::CopyFrom(const ReaderCapability& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ReaderCapability)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ReaderCapability::IsInitialized() const {
  return true;
}

void ReaderCapability::Swap(ReaderCapability* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ReaderCapability::InternalSwap(ReaderCapability* other) {
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReaderCapability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReaderCapability_descriptor_;
  metadata.reflection = ReaderCapability_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReaderCapability

// optional string path = 1;
void ReaderCapability::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReaderCapability::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReaderCapability.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReaderCapability::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ReaderCapability.path)
}
void ReaderCapability::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ReaderCapability.path)
}
void ReaderCapability::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ReaderCapability.path)
}
::std::string* ReaderCapability::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReaderCapability.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReaderCapability::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReaderCapability.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReaderCapability::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReaderCapability.path)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriterCapability::kPathFieldNumber;
const int WriterCapability::kDependenciesFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

WriterCapability::WriterCapability()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.WriterCapability)
}

void WriterCapability::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WriterCapability::WriterCapability(const WriterCapability& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.WriterCapability)
}

void WriterCapability::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WriterCapability::~WriterCapability() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.WriterCapability)
  SharedDtor();
}

void WriterCapability::SharedDtor() {
  path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WriterCapability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriterCapability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriterCapability_descriptor_;
}

const WriterCapability& WriterCapability::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_PluginRegistration_2eproto();
  return *default_instance_;
}

WriterCapability* WriterCapability::default_instance_ = NULL;

WriterCapability* WriterCapability::New(
    ::google::protobuf::Arena* arena) const {
  WriterCapability* n = new WriterCapability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriterCapability::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.WriterCapability)
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dependencies_.Clear();
}

bool WriterCapability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.WriterCapability)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->path().data(),
              (int)this->path().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.WriterCapability.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_dependencies;
        break;
      }

      // repeated string dependencies = 2;
      case 2: {
        if (tag == 18) {
        parse_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_dependencies()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->dependencies(this->dependencies_size() - 1).data(),
              (int)this->dependencies(this->dependencies_size() - 1).length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.WriterCapability.dependencies"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_dependencies;
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.WriterCapability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.WriterCapability)
  return false;
#undef DO_
}

void WriterCapability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.WriterCapability)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.WriterCapability.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->path(), output);
  }

  // repeated string dependencies = 2;
  for (int i = 0; i < this->dependencies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->dependencies(i).data(),
        (int)this->dependencies(i).length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.WriterCapability.dependencies");
    ::google::protobuf::internal::WireFormatLite::WriteString(
        2, this->dependencies(i), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.WriterCapability)
}

::google::protobuf::uint8*
WriterCapability::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.WriterCapability)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.WriterCapability.path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated string dependencies = 2;
  for (int i = 0; i < this->dependencies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->dependencies(i).data(),
        (int)this->dependencies(i).length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.WriterCapability.dependencies");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dependencies(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.WriterCapability)
  return target;
}

int WriterCapability::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.WriterCapability)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->path());
  }

  // repeated string dependencies = 2;
  total_size += 1 * this->dependencies_size();
  for (int i = 0; i < this->dependencies_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dependencies(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriterCapability::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.WriterCapability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriterCapability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const WriterCapability>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.WriterCapability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.WriterCapability)
    MergeFrom(*source);
  }
}

void WriterCapability::MergeFrom(const WriterCapability& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.WriterCapability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dependencies_.MergeFrom(from.dependencies_);
  if (from.path().size() > 0) {
    path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
}

void WriterCapability::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.WriterCapability)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void WriterCapability::CopyFrom(const WriterCapability& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.WriterCapability)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool WriterCapability::IsInitialized() const {
  return true;
}

void WriterCapability::Swap(WriterCapability* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void WriterCapability::InternalSwap(WriterCapability* other) {
  path_.Swap(&other->path_);
  dependencies_.UnsafeArenaSwap(&other->dependencies_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriterCapability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriterCapability_descriptor_;
  metadata.reflection = WriterCapability_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriterCapability

// optional string path = 1;
void WriterCapability::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WriterCapability::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.WriterCapability.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriterCapability::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.WriterCapability.path)
}
void WriterCapability::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.WriterCapability.path)
}
void WriterCapability::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.WriterCapability.path)
}
::std::string* WriterCapability::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.WriterCapability.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WriterCapability::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.WriterCapability.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriterCapability::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.WriterCapability.path)
}

// repeated string dependencies = 2;
int WriterCapability::dependencies_size() const {
  return dependencies_.size();
}
void WriterCapability::clear_dependencies() {
  dependencies_.Clear();
}
const ::std::string& WriterCapability::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_.Get(index);
}
::std::string* WriterCapability::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_.Mutable(index);
}
void WriterCapability::set_dependencies(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.WriterCapability.dependencies)
  dependencies_.Mutable(index)->assign(value);
}
void WriterCapability::set_dependencies(int index, const char* value) {
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
void WriterCapability::set_dependencies(
    int index,
    const char* value,
    size_t size) {
  dependencies_.Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
::std::string* WriterCapability::add_dependencies() {
  // @@protoc_insertion_point(field_add_mutable:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_.Add();
}
void WriterCapability::add_dependencies(const ::std::string& value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
void WriterCapability::add_dependencies(const char* value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
void WriterCapability::add_dependencies(const char* value, size_t size) {
  dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
WriterCapability::dependencies() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
WriterCapability::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return &dependencies_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CapabilitiesResponse::kDeviceTypeFieldNumber;
const int CapabilitiesResponse::kReadersFieldNumber;
const int CapabilitiesResponse::kListReadersFieldNumber;
const int CapabilitiesResponse::kWritersFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CapabilitiesResponse::CapabilitiesResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.CapabilitiesResponse)
}

void CapabilitiesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  devicetype_ = const_cast<::devmand::channels::cli::plugin::DeviceType*>(
      &::devmand::channels::cli::plugin::DeviceType::default_instance());
}

CapabilitiesResponse::CapabilitiesResponse(const CapabilitiesResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.CapabilitiesResponse)
}

void CapabilitiesResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  devicetype_ = NULL;
}

CapabilitiesResponse::~CapabilitiesResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.CapabilitiesResponse)
  SharedDtor();
}

void CapabilitiesResponse::SharedDtor() {
  if (this != default_instance_) {
    delete devicetype_;
  }
}

void CapabilitiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapabilitiesResponse_descriptor_;
}

const CapabilitiesResponse& CapabilitiesResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_PluginRegistration_2eproto();
  return *default_instance_;
}

CapabilitiesResponse* CapabilitiesResponse::default_instance_ = NULL;

CapabilitiesResponse* CapabilitiesResponse::New(
    ::google::protobuf::Arena* arena) const {
  CapabilitiesResponse* n = new CapabilitiesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CapabilitiesResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  if (GetArenaNoVirtual() == NULL && devicetype_ != NULL)
    delete devicetype_;
  devicetype_ = NULL;
  readers_.Clear();
  listreaders_.Clear();
  writers_.Clear();
}

bool CapabilitiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.DeviceType deviceType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_devicetype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_readers;
        break;
      }

      // repeated .devmand.channels.cli.plugin.ReaderCapability readers = 2;
      case 2: {
        if (tag == 18) {
        parse_readers:
          DO_(input->IncrementRecursionDepth());
        parse_loop_readers:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtualNoRecursionDepth(input, add_readers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_loop_readers;
        if (input->ExpectTag(26))
          goto parse_loop_listReaders;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .devmand.channels.cli.plugin.ReaderCapability listReaders = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
        parse_loop_listReaders:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtualNoRecursionDepth(
                      input, add_listreaders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_loop_listReaders;
        if (input->ExpectTag(34))
          goto parse_loop_writers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .devmand.channels.cli.plugin.WriterCapability writers = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
        parse_loop_writers:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtualNoRecursionDepth(input, add_writers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34))
          goto parse_loop_writers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.CapabilitiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.CapabilitiesResponse)
  return false;
#undef DO_
}

void CapabilitiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  // optional .devmand.channels.cli.plugin.DeviceType deviceType = 1;
  if (this->has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *this->devicetype_, output);
  }

  // repeated .devmand.channels.cli.plugin.ReaderCapability readers = 2;
  for (int i = 0, n = this->readers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->readers(i), output);
  }

  // repeated .devmand.channels.cli.plugin.ReaderCapability listReaders = 3;
  for (int i = 0, n = this->listreaders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->listreaders(i), output);
  }

  // repeated .devmand.channels.cli.plugin.WriterCapability writers = 4;
  for (int i = 0, n = this->writers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->writers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.CapabilitiesResponse)
}

::google::protobuf::uint8*
CapabilitiesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  // optional .devmand.channels.cli.plugin.DeviceType deviceType = 1;
  if (this->has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *this->devicetype_, false, target);
  }

  // repeated .devmand.channels.cli.plugin.ReaderCapability readers = 2;
  for (int i = 0, n = this->readers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, this->readers(i), false, target);
  }

  // repeated .devmand.channels.cli.plugin.ReaderCapability listReaders = 3;
  for (int i = 0, n = this->listreaders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            3, this->listreaders(i), false, target);
  }

  // repeated .devmand.channels.cli.plugin.WriterCapability writers = 4;
  for (int i = 0, n = this->writers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            4, this->writers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.CapabilitiesResponse)
  return target;
}

int CapabilitiesResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  int total_size = 0;

  // optional .devmand.channels.cli.plugin.DeviceType deviceType = 1;
  if (this->has_devicetype()) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *this->devicetype_);
  }

  // repeated .devmand.channels.cli.plugin.ReaderCapability readers = 2;
  total_size += 1 * this->readers_size();
  for (int i = 0; i < this->readers_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->readers(i));
  }

  // repeated .devmand.channels.cli.plugin.ReaderCapability listReaders = 3;
  total_size += 1 * this->listreaders_size();
  for (int i = 0; i < this->listreaders_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->listreaders(i));
  }

  // repeated .devmand.channels.cli.plugin.WriterCapability writers = 4;
  total_size += 1 * this->writers_size();
  for (int i = 0; i < this->writers_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->writers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CapabilitiesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const CapabilitiesResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.CapabilitiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.CapabilitiesResponse)
    MergeFrom(*source);
  }
}

void CapabilitiesResponse::MergeFrom(const CapabilitiesResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  readers_.MergeFrom(from.readers_);
  listreaders_.MergeFrom(from.listreaders_);
  writers_.MergeFrom(from.writers_);
  if (from.has_devicetype()) {
    mutable_devicetype()
        ->::devmand::channels::cli::plugin::DeviceType::MergeFrom(
            from.devicetype());
  }
}

void CapabilitiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesResponse::CopyFrom(const CapabilitiesResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.CapabilitiesResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesResponse::IsInitialized() const {
  return true;
}

void CapabilitiesResponse::Swap(CapabilitiesResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CapabilitiesResponse::InternalSwap(CapabilitiesResponse* other) {
  std::swap(devicetype_, other->devicetype_);
  readers_.UnsafeArenaSwap(&other->readers_);
  listreaders_.UnsafeArenaSwap(&other->listreaders_);
  writers_.UnsafeArenaSwap(&other->writers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CapabilitiesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapabilitiesResponse_descriptor_;
  metadata.reflection = CapabilitiesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CapabilitiesResponse

// optional .devmand.channels.cli.plugin.DeviceType deviceType = 1;
bool CapabilitiesResponse::has_devicetype() const {
  return !_is_default_instance_ && devicetype_ != NULL;
}
void CapabilitiesResponse::clear_devicetype() {
  if (GetArenaNoVirtual() == NULL && devicetype_ != NULL)
    delete devicetype_;
  devicetype_ = NULL;
}
const ::devmand::channels::cli::plugin::DeviceType&
CapabilitiesResponse::devicetype() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)
  return devicetype_ != NULL ? *devicetype_ : *default_instance_->devicetype_;
}
::devmand::channels::cli::plugin::DeviceType*
CapabilitiesResponse::mutable_devicetype() {
  if (devicetype_ == NULL) {
    devicetype_ = new ::devmand::channels::cli::plugin::DeviceType;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)
  return devicetype_;
}
::devmand::channels::cli::plugin::DeviceType*
CapabilitiesResponse::release_devicetype() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)

  ::devmand::channels::cli::plugin::DeviceType* temp = devicetype_;
  devicetype_ = NULL;
  return temp;
}
void CapabilitiesResponse::set_allocated_devicetype(
    ::devmand::channels::cli::plugin::DeviceType* devicetype) {
  delete devicetype_;
  devicetype_ = devicetype;
  if (devicetype) {
  } else {
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)
}

// repeated .devmand.channels.cli.plugin.ReaderCapability readers = 2;
int CapabilitiesResponse::readers_size() const {
  return readers_.size();
}
void CapabilitiesResponse::clear_readers() {
  readers_.Clear();
}
const ::devmand::channels::cli::plugin::ReaderCapability&
CapabilitiesResponse::readers(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_.Get(index);
}
::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::mutable_readers(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_.Mutable(index);
}
::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::add_readers() {
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_.Add();
}
::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>*
CapabilitiesResponse::mutable_readers() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return &readers_;
}
const ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>&
CapabilitiesResponse::readers() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_;
}

// repeated .devmand.channels.cli.plugin.ReaderCapability listReaders = 3;
int CapabilitiesResponse::listreaders_size() const {
  return listreaders_.size();
}
void CapabilitiesResponse::clear_listreaders() {
  listreaders_.Clear();
}
const ::devmand::channels::cli::plugin::ReaderCapability&
CapabilitiesResponse::listreaders(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_.Get(index);
}
::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::mutable_listreaders(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_.Mutable(index);
}
::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::add_listreaders() {
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_.Add();
}
::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>*
CapabilitiesResponse::mutable_listreaders() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return &listreaders_;
}
const ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>&
CapabilitiesResponse::listreaders() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_;
}

// repeated .devmand.channels.cli.plugin.WriterCapability writers = 4;
int CapabilitiesResponse::writers_size() const {
  return writers_.size();
}
void CapabilitiesResponse::clear_writers() {
  writers_.Clear();
}
const ::devmand::channels::cli::plugin::WriterCapability&
CapabilitiesResponse::writers(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_.Get(index);
}
::devmand::channels::cli::plugin::WriterCapability*
CapabilitiesResponse::mutable_writers(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_.Mutable(index);
}
::devmand::channels::cli::plugin::WriterCapability*
CapabilitiesResponse::add_writers() {
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_.Add();
}
::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::WriterCapability>*
CapabilitiesResponse::mutable_writers() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return &writers_;
}
const ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::WriterCapability>&
CapabilitiesResponse::writers() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)
