// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WriterPlugin.proto

#ifndef PROTOBUF_WriterPlugin_2eproto__INCLUDED
#define PROTOBUF_WriterPlugin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_WriterPlugin_2eproto();
void protobuf_AssignDesc_WriterPlugin_2eproto();
void protobuf_ShutdownFile_WriterPlugin_2eproto();

class ActualCreateRequest;
class ActualCreateResponse;
class ActualRemoveRequest;
class ActualRemoveResponse;
class ActualUpdateRequest;
class ActualUpdateResponse;
class CreateRequest;
class CreateResponse;
class RemoveRequest;
class RemoveResponse;
class UpdateRequest;
class UpdateResponse;

// ===================================================================

class ActualCreateRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualCreateRequest)
                   */
{
 public:
  ActualCreateRequest();
  virtual ~ActualCreateRequest();

  ActualCreateRequest(const ActualCreateRequest& from);

  inline ActualCreateRequest& operator=(const ActualCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualCreateRequest& default_instance();

  void Swap(ActualCreateRequest* other);

  // implements Message ----------------------------------------------

  inline ActualCreateRequest* New() const {
    return New(NULL);
  }

  ActualCreateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualCreateRequest& from);
  void MergeFrom(const ActualCreateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualCreateRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string cfg = 2;
  void clear_cfg();
  static const int kCfgFieldNumber = 2;
  const ::std::string& cfg() const;
  void set_cfg(const ::std::string& value);
  void set_cfg(const char* value);
  void set_cfg(const char* value, size_t size);
  ::std::string* mutable_cfg();
  ::std::string* release_cfg();
  void set_allocated_cfg(::std::string* cfg);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualCreateRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr cfg_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualCreateRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.CreateRequest)
                   */
{
 public:
  CreateRequest();
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRequest& default_instance();

  enum CreateRequestUnionCase {
    kActualCreateRequest = 1,
    kCliResponse = 2,
    CREATEREQUESTUNION_NOT_SET = 0,
  };

  void Swap(CreateRequest* other);

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const {
    return New(NULL);
  }

  CreateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.ActualCreateRequest
  // actualCreateRequest = 1;
  bool has_actualcreaterequest() const;
  void clear_actualcreaterequest();
  static const int kActualCreateRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::ActualCreateRequest&
  actualcreaterequest() const;
  ::devmand::channels::cli::plugin::ActualCreateRequest*
  mutable_actualcreaterequest();
  ::devmand::channels::cli::plugin::ActualCreateRequest*
  release_actualcreaterequest();
  void set_allocated_actualcreaterequest(
      ::devmand::channels::cli::plugin::ActualCreateRequest*
          actualcreaterequest);

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  bool has_cliresponse() const;
  void clear_cliresponse();
  static const int kCliResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::CliResponse& cliresponse() const;
  ::devmand::channels::cli::plugin::CliResponse* mutable_cliresponse();
  ::devmand::channels::cli::plugin::CliResponse* release_cliresponse();
  void set_allocated_cliresponse(
      ::devmand::channels::cli::plugin::CliResponse* cliresponse);

  CreateRequestUnionCase CreateRequestUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.CreateRequest)
 private:
  inline void set_has_actualcreaterequest();
  inline void set_has_cliresponse();

  inline bool has_CreateRequestUnion() const;
  void clear_CreateRequestUnion();
  inline void clear_has_CreateRequestUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union CreateRequestUnionUnion {
    CreateRequestUnionUnion() {}
    ::devmand::channels::cli::plugin::ActualCreateRequest* actualcreaterequest_;
    ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
  } CreateRequestUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static CreateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActualCreateResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualCreateResponse)
                   */
{
 public:
  ActualCreateResponse();
  virtual ~ActualCreateResponse();

  ActualCreateResponse(const ActualCreateResponse& from);

  inline ActualCreateResponse& operator=(const ActualCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualCreateResponse& default_instance();

  void Swap(ActualCreateResponse* other);

  // implements Message ----------------------------------------------

  inline ActualCreateResponse* New() const {
    return New(NULL);
  }

  ActualCreateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualCreateResponse& from);
  void MergeFrom(const ActualCreateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualCreateResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualCreateResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualCreateResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.CreateResponse)
                   */
{
 public:
  CreateResponse();
  virtual ~CreateResponse();

  CreateResponse(const CreateResponse& from);

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateResponse& default_instance();

  enum CreateResponseUnionCase {
    kCliRequest = 1,
    kActualCreateResponse = 2,
    CREATERESPONSEUNION_NOT_SET = 0,
  };

  void Swap(CreateResponse* other);

  // implements Message ----------------------------------------------

  inline CreateResponse* New() const {
    return New(NULL);
  }

  CreateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateResponse& from);
  void MergeFrom(const CreateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  bool has_clirequest() const;
  void clear_clirequest();
  static const int kCliRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::CliRequest& clirequest() const;
  ::devmand::channels::cli::plugin::CliRequest* mutable_clirequest();
  ::devmand::channels::cli::plugin::CliRequest* release_clirequest();
  void set_allocated_clirequest(
      ::devmand::channels::cli::plugin::CliRequest* clirequest);

  // optional .devmand.channels.cli.plugin.ActualCreateResponse
  // actualCreateResponse = 2;
  bool has_actualcreateresponse() const;
  void clear_actualcreateresponse();
  static const int kActualCreateResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::ActualCreateResponse&
  actualcreateresponse() const;
  ::devmand::channels::cli::plugin::ActualCreateResponse*
  mutable_actualcreateresponse();
  ::devmand::channels::cli::plugin::ActualCreateResponse*
  release_actualcreateresponse();
  void set_allocated_actualcreateresponse(
      ::devmand::channels::cli::plugin::ActualCreateResponse*
          actualcreateresponse);

  CreateResponseUnionCase CreateResponseUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.CreateResponse)
 private:
  inline void set_has_clirequest();
  inline void set_has_actualcreateresponse();

  inline bool has_CreateResponseUnion() const;
  void clear_CreateResponseUnion();
  inline void clear_has_CreateResponseUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union CreateResponseUnionUnion {
    CreateResponseUnionUnion() {}
    ::devmand::channels::cli::plugin::CliRequest* clirequest_;
    ::devmand::channels::cli::plugin::ActualCreateResponse*
        actualcreateresponse_;
  } CreateResponseUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static CreateResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActualUpdateRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualUpdateRequest)
                   */
{
 public:
  ActualUpdateRequest();
  virtual ~ActualUpdateRequest();

  ActualUpdateRequest(const ActualUpdateRequest& from);

  inline ActualUpdateRequest& operator=(const ActualUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualUpdateRequest& default_instance();

  void Swap(ActualUpdateRequest* other);

  // implements Message ----------------------------------------------

  inline ActualUpdateRequest* New() const {
    return New(NULL);
  }

  ActualUpdateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualUpdateRequest& from);
  void MergeFrom(const ActualUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualUpdateRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string before = 2;
  void clear_before();
  static const int kBeforeFieldNumber = 2;
  const ::std::string& before() const;
  void set_before(const ::std::string& value);
  void set_before(const char* value);
  void set_before(const char* value, size_t size);
  ::std::string* mutable_before();
  ::std::string* release_before();
  void set_allocated_before(::std::string* before);

  // optional string after = 3;
  void clear_after();
  static const int kAfterFieldNumber = 3;
  const ::std::string& after() const;
  void set_after(const ::std::string& value);
  void set_after(const char* value);
  void set_after(const char* value, size_t size);
  ::std::string* mutable_after();
  ::std::string* release_after();
  void set_allocated_after(::std::string* after);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualUpdateRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr before_;
  ::google::protobuf::internal::ArenaStringPtr after_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualUpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.UpdateRequest)
                   */
{
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRequest& default_instance();

  enum UpdateRequestUnionCase {
    kActualUpdateRequest = 1,
    kCliResponse = 2,
    UPDATEREQUESTUNION_NOT_SET = 0,
  };

  void Swap(UpdateRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const {
    return New(NULL);
  }

  UpdateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.ActualUpdateRequest
  // actualUpdateRequest = 1;
  bool has_actualupdaterequest() const;
  void clear_actualupdaterequest();
  static const int kActualUpdateRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::ActualUpdateRequest&
  actualupdaterequest() const;
  ::devmand::channels::cli::plugin::ActualUpdateRequest*
  mutable_actualupdaterequest();
  ::devmand::channels::cli::plugin::ActualUpdateRequest*
  release_actualupdaterequest();
  void set_allocated_actualupdaterequest(
      ::devmand::channels::cli::plugin::ActualUpdateRequest*
          actualupdaterequest);

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  bool has_cliresponse() const;
  void clear_cliresponse();
  static const int kCliResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::CliResponse& cliresponse() const;
  ::devmand::channels::cli::plugin::CliResponse* mutable_cliresponse();
  ::devmand::channels::cli::plugin::CliResponse* release_cliresponse();
  void set_allocated_cliresponse(
      ::devmand::channels::cli::plugin::CliResponse* cliresponse);

  UpdateRequestUnionCase UpdateRequestUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.UpdateRequest)
 private:
  inline void set_has_actualupdaterequest();
  inline void set_has_cliresponse();

  inline bool has_UpdateRequestUnion() const;
  void clear_UpdateRequestUnion();
  inline void clear_has_UpdateRequestUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union UpdateRequestUnionUnion {
    UpdateRequestUnionUnion() {}
    ::devmand::channels::cli::plugin::ActualUpdateRequest* actualupdaterequest_;
    ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
  } UpdateRequestUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static UpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActualUpdateResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualUpdateResponse)
                   */
{
 public:
  ActualUpdateResponse();
  virtual ~ActualUpdateResponse();

  ActualUpdateResponse(const ActualUpdateResponse& from);

  inline ActualUpdateResponse& operator=(const ActualUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualUpdateResponse& default_instance();

  void Swap(ActualUpdateResponse* other);

  // implements Message ----------------------------------------------

  inline ActualUpdateResponse* New() const {
    return New(NULL);
  }

  ActualUpdateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualUpdateResponse& from);
  void MergeFrom(const ActualUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualUpdateResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualUpdateResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualUpdateResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.UpdateResponse)
                   */
{
 public:
  UpdateResponse();
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateResponse& default_instance();

  enum UpdateResponseUnionCase {
    kCliRequest = 1,
    kActualUpdateResponse = 2,
    UPDATERESPONSEUNION_NOT_SET = 0,
  };

  void Swap(UpdateResponse* other);

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const {
    return New(NULL);
  }

  UpdateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  bool has_clirequest() const;
  void clear_clirequest();
  static const int kCliRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::CliRequest& clirequest() const;
  ::devmand::channels::cli::plugin::CliRequest* mutable_clirequest();
  ::devmand::channels::cli::plugin::CliRequest* release_clirequest();
  void set_allocated_clirequest(
      ::devmand::channels::cli::plugin::CliRequest* clirequest);

  // optional .devmand.channels.cli.plugin.ActualUpdateResponse
  // actualUpdateResponse = 2;
  bool has_actualupdateresponse() const;
  void clear_actualupdateresponse();
  static const int kActualUpdateResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::ActualUpdateResponse&
  actualupdateresponse() const;
  ::devmand::channels::cli::plugin::ActualUpdateResponse*
  mutable_actualupdateresponse();
  ::devmand::channels::cli::plugin::ActualUpdateResponse*
  release_actualupdateresponse();
  void set_allocated_actualupdateresponse(
      ::devmand::channels::cli::plugin::ActualUpdateResponse*
          actualupdateresponse);

  UpdateResponseUnionCase UpdateResponseUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.UpdateResponse)
 private:
  inline void set_has_clirequest();
  inline void set_has_actualupdateresponse();

  inline bool has_UpdateResponseUnion() const;
  void clear_UpdateResponseUnion();
  inline void clear_has_UpdateResponseUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union UpdateResponseUnionUnion {
    UpdateResponseUnionUnion() {}
    ::devmand::channels::cli::plugin::CliRequest* clirequest_;
    ::devmand::channels::cli::plugin::ActualUpdateResponse*
        actualupdateresponse_;
  } UpdateResponseUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static UpdateResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActualRemoveRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualRemoveRequest)
                   */
{
 public:
  ActualRemoveRequest();
  virtual ~ActualRemoveRequest();

  ActualRemoveRequest(const ActualRemoveRequest& from);

  inline ActualRemoveRequest& operator=(const ActualRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualRemoveRequest& default_instance();

  void Swap(ActualRemoveRequest* other);

  // implements Message ----------------------------------------------

  inline ActualRemoveRequest* New() const {
    return New(NULL);
  }

  ActualRemoveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualRemoveRequest& from);
  void MergeFrom(const ActualRemoveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualRemoveRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string before = 2;
  void clear_before();
  static const int kBeforeFieldNumber = 2;
  const ::std::string& before() const;
  void set_before(const ::std::string& value);
  void set_before(const char* value);
  void set_before(const char* value, size_t size);
  ::std::string* mutable_before();
  ::std::string* release_before();
  void set_allocated_before(::std::string* before);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualRemoveRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr before_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualRemoveRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.RemoveRequest)
                   */
{
 public:
  RemoveRequest();
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRequest& default_instance();

  enum RemoveRequestUnionCase {
    kActualRemoveRequest = 1,
    kCliResponse = 2,
    REMOVEREQUESTUNION_NOT_SET = 0,
  };

  void Swap(RemoveRequest* other);

  // implements Message ----------------------------------------------

  inline RemoveRequest* New() const {
    return New(NULL);
  }

  RemoveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.ActualRemoveRequest
  // actualRemoveRequest = 1;
  bool has_actualremoverequest() const;
  void clear_actualremoverequest();
  static const int kActualRemoveRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::ActualRemoveRequest&
  actualremoverequest() const;
  ::devmand::channels::cli::plugin::ActualRemoveRequest*
  mutable_actualremoverequest();
  ::devmand::channels::cli::plugin::ActualRemoveRequest*
  release_actualremoverequest();
  void set_allocated_actualremoverequest(
      ::devmand::channels::cli::plugin::ActualRemoveRequest*
          actualremoverequest);

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  bool has_cliresponse() const;
  void clear_cliresponse();
  static const int kCliResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::CliResponse& cliresponse() const;
  ::devmand::channels::cli::plugin::CliResponse* mutable_cliresponse();
  ::devmand::channels::cli::plugin::CliResponse* release_cliresponse();
  void set_allocated_cliresponse(
      ::devmand::channels::cli::plugin::CliResponse* cliresponse);

  RemoveRequestUnionCase RemoveRequestUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.RemoveRequest)
 private:
  inline void set_has_actualremoverequest();
  inline void set_has_cliresponse();

  inline bool has_RemoveRequestUnion() const;
  void clear_RemoveRequestUnion();
  inline void clear_has_RemoveRequestUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union RemoveRequestUnionUnion {
    RemoveRequestUnionUnion() {}
    ::devmand::channels::cli::plugin::ActualRemoveRequest* actualremoverequest_;
    ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
  } RemoveRequestUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static RemoveRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActualRemoveResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualRemoveResponse)
                   */
{
 public:
  ActualRemoveResponse();
  virtual ~ActualRemoveResponse();

  ActualRemoveResponse(const ActualRemoveResponse& from);

  inline ActualRemoveResponse& operator=(const ActualRemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualRemoveResponse& default_instance();

  void Swap(ActualRemoveResponse* other);

  // implements Message ----------------------------------------------

  inline ActualRemoveResponse* New() const {
    return New(NULL);
  }

  ActualRemoveResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualRemoveResponse& from);
  void MergeFrom(const ActualRemoveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualRemoveResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualRemoveResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualRemoveResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemoveResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.RemoveResponse)
                   */
{
 public:
  RemoveResponse();
  virtual ~RemoveResponse();

  RemoveResponse(const RemoveResponse& from);

  inline RemoveResponse& operator=(const RemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveResponse& default_instance();

  enum RemoveResponseUnionCase {
    kCliRequest = 1,
    kActualRemoveResponse = 2,
    REMOVERESPONSEUNION_NOT_SET = 0,
  };

  void Swap(RemoveResponse* other);

  // implements Message ----------------------------------------------

  inline RemoveResponse* New() const {
    return New(NULL);
  }

  RemoveResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveResponse& from);
  void MergeFrom(const RemoveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  bool has_clirequest() const;
  void clear_clirequest();
  static const int kCliRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::CliRequest& clirequest() const;
  ::devmand::channels::cli::plugin::CliRequest* mutable_clirequest();
  ::devmand::channels::cli::plugin::CliRequest* release_clirequest();
  void set_allocated_clirequest(
      ::devmand::channels::cli::plugin::CliRequest* clirequest);

  // optional .devmand.channels.cli.plugin.ActualRemoveResponse
  // actualRemoveResponse = 2;
  bool has_actualremoveresponse() const;
  void clear_actualremoveresponse();
  static const int kActualRemoveResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::ActualRemoveResponse&
  actualremoveresponse() const;
  ::devmand::channels::cli::plugin::ActualRemoveResponse*
  mutable_actualremoveresponse();
  ::devmand::channels::cli::plugin::ActualRemoveResponse*
  release_actualremoveresponse();
  void set_allocated_actualremoveresponse(
      ::devmand::channels::cli::plugin::ActualRemoveResponse*
          actualremoveresponse);

  RemoveResponseUnionCase RemoveResponseUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.RemoveResponse)
 private:
  inline void set_has_clirequest();
  inline void set_has_actualremoveresponse();

  inline bool has_RemoveResponseUnion() const;
  void clear_RemoveResponseUnion();
  inline void clear_has_RemoveResponseUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union RemoveResponseUnionUnion {
    RemoveResponseUnionUnion() {}
    ::devmand::channels::cli::plugin::CliRequest* clirequest_;
    ::devmand::channels::cli::plugin::ActualRemoveResponse*
        actualremoveresponse_;
  } RemoveResponseUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_WriterPlugin_2eproto();
  friend void protobuf_AssignDesc_WriterPlugin_2eproto();
  friend void protobuf_ShutdownFile_WriterPlugin_2eproto();

  void InitAsDefaultInstance();
  static RemoveResponse* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualCreateRequest

// optional string path = 1;
inline void ActualCreateRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualCreateRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualCreateRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualCreateRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualCreateRequest.path)
}
inline void ActualCreateRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualCreateRequest.path)
}
inline void ActualCreateRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualCreateRequest.path)
}
inline ::std::string* ActualCreateRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualCreateRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualCreateRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualCreateRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualCreateRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualCreateRequest.path)
}

// optional string cfg = 2;
inline void ActualCreateRequest::clear_cfg() {
  cfg_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualCreateRequest::cfg() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
  return cfg_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualCreateRequest::set_cfg(const ::std::string& value) {
  cfg_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}
inline void ActualCreateRequest::set_cfg(const char* value) {
  cfg_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}
inline void ActualCreateRequest::set_cfg(const char* value, size_t size) {
  cfg_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}
inline ::std::string* ActualCreateRequest::mutable_cfg() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
  return cfg_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualCreateRequest::release_cfg() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualCreateRequest.cfg)

  return cfg_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualCreateRequest::set_allocated_cfg(::std::string* cfg) {
  if (cfg != NULL) {
  } else {
  }
  cfg_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfg);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}

// -------------------------------------------------------------------

// CreateRequest

// optional .devmand.channels.cli.plugin.ActualCreateRequest actualCreateRequest
// = 1;
inline bool CreateRequest::has_actualcreaterequest() const {
  return CreateRequestUnion_case() == kActualCreateRequest;
}
inline void CreateRequest::set_has_actualcreaterequest() {
  _oneof_case_[0] = kActualCreateRequest;
}
inline void CreateRequest::clear_actualcreaterequest() {
  if (has_actualcreaterequest()) {
    delete CreateRequestUnion_.actualcreaterequest_;
    clear_has_CreateRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualCreateRequest&
CreateRequest::actualcreaterequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
  return has_actualcreaterequest()
      ? *CreateRequestUnion_.actualcreaterequest_
      : ::devmand::channels::cli::plugin::ActualCreateRequest::
            default_instance();
}
inline ::devmand::channels::cli::plugin::ActualCreateRequest*
CreateRequest::mutable_actualcreaterequest() {
  if (!has_actualcreaterequest()) {
    clear_CreateRequestUnion();
    set_has_actualcreaterequest();
    CreateRequestUnion_.actualcreaterequest_ =
        new ::devmand::channels::cli::plugin::ActualCreateRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
  return CreateRequestUnion_.actualcreaterequest_;
}
inline ::devmand::channels::cli::plugin::ActualCreateRequest*
CreateRequest::release_actualcreaterequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
  if (has_actualcreaterequest()) {
    clear_has_CreateRequestUnion();
    ::devmand::channels::cli::plugin::ActualCreateRequest* temp =
        CreateRequestUnion_.actualcreaterequest_;
    CreateRequestUnion_.actualcreaterequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CreateRequest::set_allocated_actualcreaterequest(
    ::devmand::channels::cli::plugin::ActualCreateRequest*
        actualcreaterequest) {
  clear_CreateRequestUnion();
  if (actualcreaterequest) {
    set_has_actualcreaterequest();
    CreateRequestUnion_.actualcreaterequest_ = actualcreaterequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
inline bool CreateRequest::has_cliresponse() const {
  return CreateRequestUnion_case() == kCliResponse;
}
inline void CreateRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
inline void CreateRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete CreateRequestUnion_.cliresponse_;
    clear_has_CreateRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliResponse&
CreateRequest::cliresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateRequest.cliResponse)
  return has_cliresponse()
      ? *CreateRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
inline ::devmand::channels::cli::plugin::CliResponse*
CreateRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_CreateRequestUnion();
    set_has_cliresponse();
    CreateRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateRequest.cliResponse)
  return CreateRequestUnion_.cliresponse_;
}
inline ::devmand::channels::cli::plugin::CliResponse*
CreateRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_CreateRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        CreateRequestUnion_.cliresponse_;
    CreateRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CreateRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_CreateRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    CreateRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateRequest.cliResponse)
}

inline bool CreateRequest::has_CreateRequestUnion() const {
  return CreateRequestUnion_case() != CREATEREQUESTUNION_NOT_SET;
}
inline void CreateRequest::clear_has_CreateRequestUnion() {
  _oneof_case_[0] = CREATEREQUESTUNION_NOT_SET;
}
inline CreateRequest::CreateRequestUnionCase
CreateRequest::CreateRequestUnion_case() const {
  return CreateRequest::CreateRequestUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActualCreateResponse

// -------------------------------------------------------------------

// CreateResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
inline bool CreateResponse::has_clirequest() const {
  return CreateResponseUnion_case() == kCliRequest;
}
inline void CreateResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
inline void CreateResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete CreateResponseUnion_.clirequest_;
    clear_has_CreateResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliRequest&
CreateResponse::clirequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateResponse.cliRequest)
  return has_clirequest()
      ? *CreateResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
inline ::devmand::channels::cli::plugin::CliRequest*
CreateResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_CreateResponseUnion();
    set_has_clirequest();
    CreateResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateResponse.cliRequest)
  return CreateResponseUnion_.clirequest_;
}
inline ::devmand::channels::cli::plugin::CliRequest*
CreateResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_CreateResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        CreateResponseUnion_.clirequest_;
    CreateResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CreateResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_CreateResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    CreateResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualCreateResponse
// actualCreateResponse = 2;
inline bool CreateResponse::has_actualcreateresponse() const {
  return CreateResponseUnion_case() == kActualCreateResponse;
}
inline void CreateResponse::set_has_actualcreateresponse() {
  _oneof_case_[0] = kActualCreateResponse;
}
inline void CreateResponse::clear_actualcreateresponse() {
  if (has_actualcreateresponse()) {
    delete CreateResponseUnion_.actualcreateresponse_;
    clear_has_CreateResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualCreateResponse&
CreateResponse::actualcreateresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
  return has_actualcreateresponse()
      ? *CreateResponseUnion_.actualcreateresponse_
      : ::devmand::channels::cli::plugin::ActualCreateResponse::
            default_instance();
}
inline ::devmand::channels::cli::plugin::ActualCreateResponse*
CreateResponse::mutable_actualcreateresponse() {
  if (!has_actualcreateresponse()) {
    clear_CreateResponseUnion();
    set_has_actualcreateresponse();
    CreateResponseUnion_.actualcreateresponse_ =
        new ::devmand::channels::cli::plugin::ActualCreateResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
  return CreateResponseUnion_.actualcreateresponse_;
}
inline ::devmand::channels::cli::plugin::ActualCreateResponse*
CreateResponse::release_actualcreateresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
  if (has_actualcreateresponse()) {
    clear_has_CreateResponseUnion();
    ::devmand::channels::cli::plugin::ActualCreateResponse* temp =
        CreateResponseUnion_.actualcreateresponse_;
    CreateResponseUnion_.actualcreateresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CreateResponse::set_allocated_actualcreateresponse(
    ::devmand::channels::cli::plugin::ActualCreateResponse*
        actualcreateresponse) {
  clear_CreateResponseUnion();
  if (actualcreateresponse) {
    set_has_actualcreateresponse();
    CreateResponseUnion_.actualcreateresponse_ = actualcreateresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
}

inline bool CreateResponse::has_CreateResponseUnion() const {
  return CreateResponseUnion_case() != CREATERESPONSEUNION_NOT_SET;
}
inline void CreateResponse::clear_has_CreateResponseUnion() {
  _oneof_case_[0] = CREATERESPONSEUNION_NOT_SET;
}
inline CreateResponse::CreateResponseUnionCase
CreateResponse::CreateResponseUnion_case() const {
  return CreateResponse::CreateResponseUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActualUpdateRequest

// optional string path = 1;
inline void ActualUpdateRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualUpdateRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualUpdateRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualUpdateRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}
inline void ActualUpdateRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}
inline void ActualUpdateRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}
inline ::std::string* ActualUpdateRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualUpdateRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualUpdateRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualUpdateRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualUpdateRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}

// optional string before = 2;
inline void ActualUpdateRequest::clear_before() {
  before_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualUpdateRequest::before() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualUpdateRequest.before)
  return before_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualUpdateRequest::set_before(const ::std::string& value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}
inline void ActualUpdateRequest::set_before(const char* value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}
inline void ActualUpdateRequest::set_before(const char* value, size_t size) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}
inline ::std::string* ActualUpdateRequest::mutable_before() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualUpdateRequest.before)
  return before_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualUpdateRequest::release_before() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualUpdateRequest.before)

  return before_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualUpdateRequest::set_allocated_before(::std::string* before) {
  if (before != NULL) {
  } else {
  }
  before_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), before);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}

// optional string after = 3;
inline void ActualUpdateRequest::clear_after() {
  after_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualUpdateRequest::after() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualUpdateRequest.after)
  return after_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualUpdateRequest::set_after(const ::std::string& value) {
  after_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}
inline void ActualUpdateRequest::set_after(const char* value) {
  after_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}
inline void ActualUpdateRequest::set_after(const char* value, size_t size) {
  after_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}
inline ::std::string* ActualUpdateRequest::mutable_after() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualUpdateRequest.after)
  return after_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualUpdateRequest::release_after() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualUpdateRequest.after)

  return after_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualUpdateRequest::set_allocated_after(::std::string* after) {
  if (after != NULL) {
  } else {
  }
  after_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), after);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}

// -------------------------------------------------------------------

// UpdateRequest

// optional .devmand.channels.cli.plugin.ActualUpdateRequest actualUpdateRequest
// = 1;
inline bool UpdateRequest::has_actualupdaterequest() const {
  return UpdateRequestUnion_case() == kActualUpdateRequest;
}
inline void UpdateRequest::set_has_actualupdaterequest() {
  _oneof_case_[0] = kActualUpdateRequest;
}
inline void UpdateRequest::clear_actualupdaterequest() {
  if (has_actualupdaterequest()) {
    delete UpdateRequestUnion_.actualupdaterequest_;
    clear_has_UpdateRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualUpdateRequest&
UpdateRequest::actualupdaterequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
  return has_actualupdaterequest()
      ? *UpdateRequestUnion_.actualupdaterequest_
      : ::devmand::channels::cli::plugin::ActualUpdateRequest::
            default_instance();
}
inline ::devmand::channels::cli::plugin::ActualUpdateRequest*
UpdateRequest::mutable_actualupdaterequest() {
  if (!has_actualupdaterequest()) {
    clear_UpdateRequestUnion();
    set_has_actualupdaterequest();
    UpdateRequestUnion_.actualupdaterequest_ =
        new ::devmand::channels::cli::plugin::ActualUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
  return UpdateRequestUnion_.actualupdaterequest_;
}
inline ::devmand::channels::cli::plugin::ActualUpdateRequest*
UpdateRequest::release_actualupdaterequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
  if (has_actualupdaterequest()) {
    clear_has_UpdateRequestUnion();
    ::devmand::channels::cli::plugin::ActualUpdateRequest* temp =
        UpdateRequestUnion_.actualupdaterequest_;
    UpdateRequestUnion_.actualupdaterequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UpdateRequest::set_allocated_actualupdaterequest(
    ::devmand::channels::cli::plugin::ActualUpdateRequest*
        actualupdaterequest) {
  clear_UpdateRequestUnion();
  if (actualupdaterequest) {
    set_has_actualupdaterequest();
    UpdateRequestUnion_.actualupdaterequest_ = actualupdaterequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
inline bool UpdateRequest::has_cliresponse() const {
  return UpdateRequestUnion_case() == kCliResponse;
}
inline void UpdateRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
inline void UpdateRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete UpdateRequestUnion_.cliresponse_;
    clear_has_UpdateRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliResponse&
UpdateRequest::cliresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
  return has_cliresponse()
      ? *UpdateRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
inline ::devmand::channels::cli::plugin::CliResponse*
UpdateRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_UpdateRequestUnion();
    set_has_cliresponse();
    UpdateRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
  return UpdateRequestUnion_.cliresponse_;
}
inline ::devmand::channels::cli::plugin::CliResponse*
UpdateRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_UpdateRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        UpdateRequestUnion_.cliresponse_;
    UpdateRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UpdateRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_UpdateRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    UpdateRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
}

inline bool UpdateRequest::has_UpdateRequestUnion() const {
  return UpdateRequestUnion_case() != UPDATEREQUESTUNION_NOT_SET;
}
inline void UpdateRequest::clear_has_UpdateRequestUnion() {
  _oneof_case_[0] = UPDATEREQUESTUNION_NOT_SET;
}
inline UpdateRequest::UpdateRequestUnionCase
UpdateRequest::UpdateRequestUnion_case() const {
  return UpdateRequest::UpdateRequestUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActualUpdateResponse

// -------------------------------------------------------------------

// UpdateResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
inline bool UpdateResponse::has_clirequest() const {
  return UpdateResponseUnion_case() == kCliRequest;
}
inline void UpdateResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
inline void UpdateResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete UpdateResponseUnion_.clirequest_;
    clear_has_UpdateResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliRequest&
UpdateResponse::clirequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
  return has_clirequest()
      ? *UpdateResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
inline ::devmand::channels::cli::plugin::CliRequest*
UpdateResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_UpdateResponseUnion();
    set_has_clirequest();
    UpdateResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
  return UpdateResponseUnion_.clirequest_;
}
inline ::devmand::channels::cli::plugin::CliRequest*
UpdateResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_UpdateResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        UpdateResponseUnion_.clirequest_;
    UpdateResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UpdateResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_UpdateResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    UpdateResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualUpdateResponse
// actualUpdateResponse = 2;
inline bool UpdateResponse::has_actualupdateresponse() const {
  return UpdateResponseUnion_case() == kActualUpdateResponse;
}
inline void UpdateResponse::set_has_actualupdateresponse() {
  _oneof_case_[0] = kActualUpdateResponse;
}
inline void UpdateResponse::clear_actualupdateresponse() {
  if (has_actualupdateresponse()) {
    delete UpdateResponseUnion_.actualupdateresponse_;
    clear_has_UpdateResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualUpdateResponse&
UpdateResponse::actualupdateresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
  return has_actualupdateresponse()
      ? *UpdateResponseUnion_.actualupdateresponse_
      : ::devmand::channels::cli::plugin::ActualUpdateResponse::
            default_instance();
}
inline ::devmand::channels::cli::plugin::ActualUpdateResponse*
UpdateResponse::mutable_actualupdateresponse() {
  if (!has_actualupdateresponse()) {
    clear_UpdateResponseUnion();
    set_has_actualupdateresponse();
    UpdateResponseUnion_.actualupdateresponse_ =
        new ::devmand::channels::cli::plugin::ActualUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
  return UpdateResponseUnion_.actualupdateresponse_;
}
inline ::devmand::channels::cli::plugin::ActualUpdateResponse*
UpdateResponse::release_actualupdateresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
  if (has_actualupdateresponse()) {
    clear_has_UpdateResponseUnion();
    ::devmand::channels::cli::plugin::ActualUpdateResponse* temp =
        UpdateResponseUnion_.actualupdateresponse_;
    UpdateResponseUnion_.actualupdateresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UpdateResponse::set_allocated_actualupdateresponse(
    ::devmand::channels::cli::plugin::ActualUpdateResponse*
        actualupdateresponse) {
  clear_UpdateResponseUnion();
  if (actualupdateresponse) {
    set_has_actualupdateresponse();
    UpdateResponseUnion_.actualupdateresponse_ = actualupdateresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
}

inline bool UpdateResponse::has_UpdateResponseUnion() const {
  return UpdateResponseUnion_case() != UPDATERESPONSEUNION_NOT_SET;
}
inline void UpdateResponse::clear_has_UpdateResponseUnion() {
  _oneof_case_[0] = UPDATERESPONSEUNION_NOT_SET;
}
inline UpdateResponse::UpdateResponseUnionCase
UpdateResponse::UpdateResponseUnion_case() const {
  return UpdateResponse::UpdateResponseUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActualRemoveRequest

// optional string path = 1;
inline void ActualRemoveRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualRemoveRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualRemoveRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualRemoveRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}
inline void ActualRemoveRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}
inline void ActualRemoveRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}
inline ::std::string* ActualRemoveRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualRemoveRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualRemoveRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualRemoveRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualRemoveRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}

// optional string before = 2;
inline void ActualRemoveRequest::clear_before() {
  before_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualRemoveRequest::before() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualRemoveRequest.before)
  return before_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualRemoveRequest::set_before(const ::std::string& value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}
inline void ActualRemoveRequest::set_before(const char* value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}
inline void ActualRemoveRequest::set_before(const char* value, size_t size) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}
inline ::std::string* ActualRemoveRequest::mutable_before() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualRemoveRequest.before)
  return before_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualRemoveRequest::release_before() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualRemoveRequest.before)

  return before_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualRemoveRequest::set_allocated_before(::std::string* before) {
  if (before != NULL) {
  } else {
  }
  before_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), before);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}

// -------------------------------------------------------------------

// RemoveRequest

// optional .devmand.channels.cli.plugin.ActualRemoveRequest actualRemoveRequest
// = 1;
inline bool RemoveRequest::has_actualremoverequest() const {
  return RemoveRequestUnion_case() == kActualRemoveRequest;
}
inline void RemoveRequest::set_has_actualremoverequest() {
  _oneof_case_[0] = kActualRemoveRequest;
}
inline void RemoveRequest::clear_actualremoverequest() {
  if (has_actualremoverequest()) {
    delete RemoveRequestUnion_.actualremoverequest_;
    clear_has_RemoveRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualRemoveRequest&
RemoveRequest::actualremoverequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
  return has_actualremoverequest()
      ? *RemoveRequestUnion_.actualremoverequest_
      : ::devmand::channels::cli::plugin::ActualRemoveRequest::
            default_instance();
}
inline ::devmand::channels::cli::plugin::ActualRemoveRequest*
RemoveRequest::mutable_actualremoverequest() {
  if (!has_actualremoverequest()) {
    clear_RemoveRequestUnion();
    set_has_actualremoverequest();
    RemoveRequestUnion_.actualremoverequest_ =
        new ::devmand::channels::cli::plugin::ActualRemoveRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
  return RemoveRequestUnion_.actualremoverequest_;
}
inline ::devmand::channels::cli::plugin::ActualRemoveRequest*
RemoveRequest::release_actualremoverequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
  if (has_actualremoverequest()) {
    clear_has_RemoveRequestUnion();
    ::devmand::channels::cli::plugin::ActualRemoveRequest* temp =
        RemoveRequestUnion_.actualremoverequest_;
    RemoveRequestUnion_.actualremoverequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RemoveRequest::set_allocated_actualremoverequest(
    ::devmand::channels::cli::plugin::ActualRemoveRequest*
        actualremoverequest) {
  clear_RemoveRequestUnion();
  if (actualremoverequest) {
    set_has_actualremoverequest();
    RemoveRequestUnion_.actualremoverequest_ = actualremoverequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
inline bool RemoveRequest::has_cliresponse() const {
  return RemoveRequestUnion_case() == kCliResponse;
}
inline void RemoveRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
inline void RemoveRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete RemoveRequestUnion_.cliresponse_;
    clear_has_RemoveRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliResponse&
RemoveRequest::cliresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
  return has_cliresponse()
      ? *RemoveRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
inline ::devmand::channels::cli::plugin::CliResponse*
RemoveRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_RemoveRequestUnion();
    set_has_cliresponse();
    RemoveRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
  return RemoveRequestUnion_.cliresponse_;
}
inline ::devmand::channels::cli::plugin::CliResponse*
RemoveRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_RemoveRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        RemoveRequestUnion_.cliresponse_;
    RemoveRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RemoveRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_RemoveRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    RemoveRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
}

inline bool RemoveRequest::has_RemoveRequestUnion() const {
  return RemoveRequestUnion_case() != REMOVEREQUESTUNION_NOT_SET;
}
inline void RemoveRequest::clear_has_RemoveRequestUnion() {
  _oneof_case_[0] = REMOVEREQUESTUNION_NOT_SET;
}
inline RemoveRequest::RemoveRequestUnionCase
RemoveRequest::RemoveRequestUnion_case() const {
  return RemoveRequest::RemoveRequestUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActualRemoveResponse

// -------------------------------------------------------------------

// RemoveResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
inline bool RemoveResponse::has_clirequest() const {
  return RemoveResponseUnion_case() == kCliRequest;
}
inline void RemoveResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
inline void RemoveResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete RemoveResponseUnion_.clirequest_;
    clear_has_RemoveResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliRequest&
RemoveResponse::clirequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
  return has_clirequest()
      ? *RemoveResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
inline ::devmand::channels::cli::plugin::CliRequest*
RemoveResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_RemoveResponseUnion();
    set_has_clirequest();
    RemoveResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
  return RemoveResponseUnion_.clirequest_;
}
inline ::devmand::channels::cli::plugin::CliRequest*
RemoveResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_RemoveResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        RemoveResponseUnion_.clirequest_;
    RemoveResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RemoveResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_RemoveResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    RemoveResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualRemoveResponse
// actualRemoveResponse = 2;
inline bool RemoveResponse::has_actualremoveresponse() const {
  return RemoveResponseUnion_case() == kActualRemoveResponse;
}
inline void RemoveResponse::set_has_actualremoveresponse() {
  _oneof_case_[0] = kActualRemoveResponse;
}
inline void RemoveResponse::clear_actualremoveresponse() {
  if (has_actualremoveresponse()) {
    delete RemoveResponseUnion_.actualremoveresponse_;
    clear_has_RemoveResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualRemoveResponse&
RemoveResponse::actualremoveresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
  return has_actualremoveresponse()
      ? *RemoveResponseUnion_.actualremoveresponse_
      : ::devmand::channels::cli::plugin::ActualRemoveResponse::
            default_instance();
}
inline ::devmand::channels::cli::plugin::ActualRemoveResponse*
RemoveResponse::mutable_actualremoveresponse() {
  if (!has_actualremoveresponse()) {
    clear_RemoveResponseUnion();
    set_has_actualremoveresponse();
    RemoveResponseUnion_.actualremoveresponse_ =
        new ::devmand::channels::cli::plugin::ActualRemoveResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
  return RemoveResponseUnion_.actualremoveresponse_;
}
inline ::devmand::channels::cli::plugin::ActualRemoveResponse*
RemoveResponse::release_actualremoveresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
  if (has_actualremoveresponse()) {
    clear_has_RemoveResponseUnion();
    ::devmand::channels::cli::plugin::ActualRemoveResponse* temp =
        RemoveResponseUnion_.actualremoveresponse_;
    RemoveResponseUnion_.actualremoveresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RemoveResponse::set_allocated_actualremoveresponse(
    ::devmand::channels::cli::plugin::ActualRemoveResponse*
        actualremoveresponse) {
  clear_RemoveResponseUnion();
  if (actualremoveresponse) {
    set_has_actualremoveresponse();
    RemoveResponseUnion_.actualremoveresponse_ = actualremoveresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
}

inline bool RemoveResponse::has_RemoveResponseUnion() const {
  return RemoveResponseUnion_case() != REMOVERESPONSEUNION_NOT_SET;
}
inline void RemoveResponse::clear_has_RemoveResponseUnion() {
  _oneof_case_[0] = REMOVERESPONSEUNION_NOT_SET;
}
inline RemoveResponse::RemoveResponseUnionCase
RemoveResponse::RemoveResponseUnion_case() const {
  return RemoveResponse::RemoveResponseUnionCase(_oneof_case_[0]);
}
#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_WriterPlugin_2eproto__INCLUDED
