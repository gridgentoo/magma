// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReaderPlugin.proto

#ifndef PROTOBUF_ReaderPlugin_2eproto__INCLUDED
#define PROTOBUF_ReaderPlugin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ReaderPlugin_2eproto();
void protobuf_AssignDesc_ReaderPlugin_2eproto();
void protobuf_ShutdownFile_ReaderPlugin_2eproto();

class ActualReadRequest;
class ActualReadResponse;
class ReadRequest;
class ReadResponse;

// ===================================================================

class ActualReadRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualReadRequest)
                   */
{
 public:
  ActualReadRequest();
  virtual ~ActualReadRequest();

  ActualReadRequest(const ActualReadRequest& from);

  inline ActualReadRequest& operator=(const ActualReadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualReadRequest& default_instance();

  void Swap(ActualReadRequest* other);

  // implements Message ----------------------------------------------

  inline ActualReadRequest* New() const {
    return New(NULL);
  }

  ActualReadRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualReadRequest& from);
  void MergeFrom(const ActualReadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualReadRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualReadRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_ReaderPlugin_2eproto();
  friend void protobuf_AssignDesc_ReaderPlugin_2eproto();
  friend void protobuf_ShutdownFile_ReaderPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualReadRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReadRequest
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ReadRequest)
                   */
{
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRequest& default_instance();

  enum ReadRequestUnionCase {
    kActualReadRequest = 1,
    kCliResponse = 2,
    READREQUESTUNION_NOT_SET = 0,
  };

  void Swap(ReadRequest* other);

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const {
    return New(NULL);
  }

  ReadRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.ActualReadRequest actualReadRequest =
  // 1;
  bool has_actualreadrequest() const;
  void clear_actualreadrequest();
  static const int kActualReadRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::ActualReadRequest& actualreadrequest()
      const;
  ::devmand::channels::cli::plugin::ActualReadRequest*
  mutable_actualreadrequest();
  ::devmand::channels::cli::plugin::ActualReadRequest*
  release_actualreadrequest();
  void set_allocated_actualreadrequest(
      ::devmand::channels::cli::plugin::ActualReadRequest* actualreadrequest);

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  bool has_cliresponse() const;
  void clear_cliresponse();
  static const int kCliResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::CliResponse& cliresponse() const;
  ::devmand::channels::cli::plugin::CliResponse* mutable_cliresponse();
  ::devmand::channels::cli::plugin::CliResponse* release_cliresponse();
  void set_allocated_cliresponse(
      ::devmand::channels::cli::plugin::CliResponse* cliresponse);

  ReadRequestUnionCase ReadRequestUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ReadRequest)
 private:
  inline void set_has_actualreadrequest();
  inline void set_has_cliresponse();

  inline bool has_ReadRequestUnion() const;
  void clear_ReadRequestUnion();
  inline void clear_has_ReadRequestUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ReadRequestUnionUnion {
    ReadRequestUnionUnion() {}
    ::devmand::channels::cli::plugin::ActualReadRequest* actualreadrequest_;
    ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
  } ReadRequestUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_ReaderPlugin_2eproto();
  friend void protobuf_AssignDesc_ReaderPlugin_2eproto();
  friend void protobuf_ShutdownFile_ReaderPlugin_2eproto();

  void InitAsDefaultInstance();
  static ReadRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActualReadResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ActualReadResponse)
                   */
{
 public:
  ActualReadResponse();
  virtual ~ActualReadResponse();

  ActualReadResponse(const ActualReadResponse& from);

  inline ActualReadResponse& operator=(const ActualReadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActualReadResponse& default_instance();

  void Swap(ActualReadResponse* other);

  // implements Message ----------------------------------------------

  inline ActualReadResponse* New() const {
    return New(NULL);
  }

  ActualReadResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActualReadResponse& from);
  void MergeFrom(const ActualReadResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActualReadResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ActualReadResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_ReaderPlugin_2eproto();
  friend void protobuf_AssignDesc_ReaderPlugin_2eproto();
  friend void protobuf_ShutdownFile_ReaderPlugin_2eproto();

  void InitAsDefaultInstance();
  static ActualReadResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReadResponse
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ReadResponse)
                   */
{
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResponse& default_instance();

  enum ReadResponseUnionCase {
    kCliRequest = 1,
    kActualReadResponse = 2,
    READRESPONSEUNION_NOT_SET = 0,
  };

  void Swap(ReadResponse* other);

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const {
    return New(NULL);
  }

  ReadResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  bool has_clirequest() const;
  void clear_clirequest();
  static const int kCliRequestFieldNumber = 1;
  const ::devmand::channels::cli::plugin::CliRequest& clirequest() const;
  ::devmand::channels::cli::plugin::CliRequest* mutable_clirequest();
  ::devmand::channels::cli::plugin::CliRequest* release_clirequest();
  void set_allocated_clirequest(
      ::devmand::channels::cli::plugin::CliRequest* clirequest);

  // optional .devmand.channels.cli.plugin.ActualReadResponse actualReadResponse
  // = 2;
  bool has_actualreadresponse() const;
  void clear_actualreadresponse();
  static const int kActualReadResponseFieldNumber = 2;
  const ::devmand::channels::cli::plugin::ActualReadResponse&
  actualreadresponse() const;
  ::devmand::channels::cli::plugin::ActualReadResponse*
  mutable_actualreadresponse();
  ::devmand::channels::cli::plugin::ActualReadResponse*
  release_actualreadresponse();
  void set_allocated_actualreadresponse(
      ::devmand::channels::cli::plugin::ActualReadResponse* actualreadresponse);

  ReadResponseUnionCase ReadResponseUnion_case() const;
  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ReadResponse)
 private:
  inline void set_has_clirequest();
  inline void set_has_actualreadresponse();

  inline bool has_ReadResponseUnion() const;
  void clear_ReadResponseUnion();
  inline void clear_has_ReadResponseUnion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ReadResponseUnionUnion {
    ReadResponseUnionUnion() {}
    ::devmand::channels::cli::plugin::CliRequest* clirequest_;
    ::devmand::channels::cli::plugin::ActualReadResponse* actualreadresponse_;
  } ReadResponseUnion_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void protobuf_AddDesc_ReaderPlugin_2eproto();
  friend void protobuf_AssignDesc_ReaderPlugin_2eproto();
  friend void protobuf_ShutdownFile_ReaderPlugin_2eproto();

  void InitAsDefaultInstance();
  static ReadResponse* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualReadRequest

// optional string path = 1;
inline void ActualReadRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualReadRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualReadRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualReadRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualReadRequest.path)
}
inline void ActualReadRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualReadRequest.path)
}
inline void ActualReadRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualReadRequest.path)
}
inline ::std::string* ActualReadRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualReadRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualReadRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualReadRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualReadRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualReadRequest.path)
}

// -------------------------------------------------------------------

// ReadRequest

// optional .devmand.channels.cli.plugin.ActualReadRequest actualReadRequest =
// 1;
inline bool ReadRequest::has_actualreadrequest() const {
  return ReadRequestUnion_case() == kActualReadRequest;
}
inline void ReadRequest::set_has_actualreadrequest() {
  _oneof_case_[0] = kActualReadRequest;
}
inline void ReadRequest::clear_actualreadrequest() {
  if (has_actualreadrequest()) {
    delete ReadRequestUnion_.actualreadrequest_;
    clear_has_ReadRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualReadRequest&
ReadRequest::actualreadrequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
  return has_actualreadrequest()
      ? *ReadRequestUnion_.actualreadrequest_
      : ::devmand::channels::cli::plugin::ActualReadRequest::default_instance();
}
inline ::devmand::channels::cli::plugin::ActualReadRequest*
ReadRequest::mutable_actualreadrequest() {
  if (!has_actualreadrequest()) {
    clear_ReadRequestUnion();
    set_has_actualreadrequest();
    ReadRequestUnion_.actualreadrequest_ =
        new ::devmand::channels::cli::plugin::ActualReadRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
  return ReadRequestUnion_.actualreadrequest_;
}
inline ::devmand::channels::cli::plugin::ActualReadRequest*
ReadRequest::release_actualreadrequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
  if (has_actualreadrequest()) {
    clear_has_ReadRequestUnion();
    ::devmand::channels::cli::plugin::ActualReadRequest* temp =
        ReadRequestUnion_.actualreadrequest_;
    ReadRequestUnion_.actualreadrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadRequest::set_allocated_actualreadrequest(
    ::devmand::channels::cli::plugin::ActualReadRequest* actualreadrequest) {
  clear_ReadRequestUnion();
  if (actualreadrequest) {
    set_has_actualreadrequest();
    ReadRequestUnion_.actualreadrequest_ = actualreadrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadRequest.actualReadRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
inline bool ReadRequest::has_cliresponse() const {
  return ReadRequestUnion_case() == kCliResponse;
}
inline void ReadRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
inline void ReadRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete ReadRequestUnion_.cliresponse_;
    clear_has_ReadRequestUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliResponse&
ReadRequest::cliresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadRequest.cliResponse)
  return has_cliresponse()
      ? *ReadRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
inline ::devmand::channels::cli::plugin::CliResponse*
ReadRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_ReadRequestUnion();
    set_has_cliresponse();
    ReadRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadRequest.cliResponse)
  return ReadRequestUnion_.cliresponse_;
}
inline ::devmand::channels::cli::plugin::CliResponse*
ReadRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_ReadRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        ReadRequestUnion_.cliresponse_;
    ReadRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_ReadRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    ReadRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadRequest.cliResponse)
}

inline bool ReadRequest::has_ReadRequestUnion() const {
  return ReadRequestUnion_case() != READREQUESTUNION_NOT_SET;
}
inline void ReadRequest::clear_has_ReadRequestUnion() {
  _oneof_case_[0] = READREQUESTUNION_NOT_SET;
}
inline ReadRequest::ReadRequestUnionCase ReadRequest::ReadRequestUnion_case()
    const {
  return ReadRequest::ReadRequestUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActualReadResponse

// optional string json = 1;
inline void ActualReadResponse::clear_json() {
  json_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActualReadResponse::json() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualReadResponse.json)
  return json_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualReadResponse::set_json(const ::std::string& value) {
  json_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualReadResponse.json)
}
inline void ActualReadResponse::set_json(const char* value) {
  json_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualReadResponse.json)
}
inline void ActualReadResponse::set_json(const char* value, size_t size) {
  json_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualReadResponse.json)
}
inline ::std::string* ActualReadResponse::mutable_json() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualReadResponse.json)
  return json_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActualReadResponse::release_json() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualReadResponse.json)

  return json_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActualReadResponse::set_allocated_json(::std::string* json) {
  if (json != NULL) {
  } else {
  }
  json_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualReadResponse.json)
}

// -------------------------------------------------------------------

// ReadResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
inline bool ReadResponse::has_clirequest() const {
  return ReadResponseUnion_case() == kCliRequest;
}
inline void ReadResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
inline void ReadResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete ReadResponseUnion_.clirequest_;
    clear_has_ReadResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::CliRequest&
ReadResponse::clirequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadResponse.cliRequest)
  return has_clirequest()
      ? *ReadResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
inline ::devmand::channels::cli::plugin::CliRequest*
ReadResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_ReadResponseUnion();
    set_has_clirequest();
    ReadResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadResponse.cliRequest)
  return ReadResponseUnion_.clirequest_;
}
inline ::devmand::channels::cli::plugin::CliRequest*
ReadResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_ReadResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        ReadResponseUnion_.clirequest_;
    ReadResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_ReadResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    ReadResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualReadResponse actualReadResponse =
// 2;
inline bool ReadResponse::has_actualreadresponse() const {
  return ReadResponseUnion_case() == kActualReadResponse;
}
inline void ReadResponse::set_has_actualreadresponse() {
  _oneof_case_[0] = kActualReadResponse;
}
inline void ReadResponse::clear_actualreadresponse() {
  if (has_actualreadresponse()) {
    delete ReadResponseUnion_.actualreadresponse_;
    clear_has_ReadResponseUnion();
  }
}
inline const ::devmand::channels::cli::plugin::ActualReadResponse&
ReadResponse::actualreadresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
  return has_actualreadresponse() ? *ReadResponseUnion_.actualreadresponse_
                                  : ::devmand::channels::cli::plugin::
                                        ActualReadResponse::default_instance();
}
inline ::devmand::channels::cli::plugin::ActualReadResponse*
ReadResponse::mutable_actualreadresponse() {
  if (!has_actualreadresponse()) {
    clear_ReadResponseUnion();
    set_has_actualreadresponse();
    ReadResponseUnion_.actualreadresponse_ =
        new ::devmand::channels::cli::plugin::ActualReadResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
  return ReadResponseUnion_.actualreadresponse_;
}
inline ::devmand::channels::cli::plugin::ActualReadResponse*
ReadResponse::release_actualreadresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
  if (has_actualreadresponse()) {
    clear_has_ReadResponseUnion();
    ::devmand::channels::cli::plugin::ActualReadResponse* temp =
        ReadResponseUnion_.actualreadresponse_;
    ReadResponseUnion_.actualreadresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadResponse::set_allocated_actualreadresponse(
    ::devmand::channels::cli::plugin::ActualReadResponse* actualreadresponse) {
  clear_ReadResponseUnion();
  if (actualreadresponse) {
    set_has_actualreadresponse();
    ReadResponseUnion_.actualreadresponse_ = actualreadresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReadResponse.actualReadResponse)
}

inline bool ReadResponse::has_ReadResponseUnion() const {
  return ReadResponseUnion_case() != READRESPONSEUNION_NOT_SET;
}
inline void ReadResponse::clear_has_ReadResponseUnion() {
  _oneof_case_[0] = READRESPONSEUNION_NOT_SET;
}
inline ReadResponse::ReadResponseUnionCase
ReadResponse::ReadResponseUnion_case() const {
  return ReadResponse::ReadResponseUnionCase(_oneof_case_[0]);
}
#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_ReaderPlugin_2eproto__INCLUDED
