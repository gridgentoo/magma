// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WriterPlugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#endif
#include "WriterPlugin.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

namespace {

const ::google::protobuf::Descriptor* ActualCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CreateRequest_reflection_ = NULL;
struct CreateRequestOneofInstance {
  const ::devmand::channels::cli::plugin::ActualCreateRequest*
      actualcreaterequest_;
  const ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
}* CreateRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActualCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualCreateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CreateResponse_reflection_ = NULL;
struct CreateResponseOneofInstance {
  const ::devmand::channels::cli::plugin::CliRequest* clirequest_;
  const ::devmand::channels::cli::plugin::ActualCreateResponse*
      actualcreateresponse_;
}* CreateResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActualUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    UpdateRequest_reflection_ = NULL;
struct UpdateRequestOneofInstance {
  const ::devmand::channels::cli::plugin::ActualUpdateRequest*
      actualupdaterequest_;
  const ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
}* UpdateRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActualUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualUpdateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    UpdateResponse_reflection_ = NULL;
struct UpdateResponseOneofInstance {
  const ::devmand::channels::cli::plugin::CliRequest* clirequest_;
  const ::devmand::channels::cli::plugin::ActualUpdateResponse*
      actualupdateresponse_;
}* UpdateResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActualRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    RemoveRequest_reflection_ = NULL;
struct RemoveRequestOneofInstance {
  const ::devmand::channels::cli::plugin::ActualRemoveRequest*
      actualremoverequest_;
  const ::devmand::channels::cli::plugin::CliResponse* cliresponse_;
}* RemoveRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActualRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ActualRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    RemoveResponse_reflection_ = NULL;
struct RemoveResponseOneofInstance {
  const ::devmand::channels::cli::plugin::CliRequest* clirequest_;
  const ::devmand::channels::cli::plugin::ActualRemoveResponse*
      actualremoveresponse_;
}* RemoveResponse_default_oneof_instance_ = NULL;

} // namespace

void protobuf_AssignDesc_WriterPlugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_WriterPlugin_2eproto() {
  protobuf_AddDesc_WriterPlugin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "WriterPlugin.proto");
  GOOGLE_CHECK(file != NULL);
  ActualCreateRequest_descriptor_ = file->message_type(0);
  static const int ActualCreateRequest_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ActualCreateRequest, path_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActualCreateRequest, cfg_),
  };
  ActualCreateRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualCreateRequest_descriptor_,
          ActualCreateRequest::default_instance_,
          ActualCreateRequest_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualCreateRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualCreateRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualCreateRequest, _is_default_instance_));
  CreateRequest_descriptor_ = file->message_type(1);
  static const int CreateRequest_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          CreateRequest_default_oneof_instance_, actualcreaterequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          CreateRequest_default_oneof_instance_, cliresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CreateRequest, CreateRequestUnion_),
  };
  CreateRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CreateRequest_descriptor_,
          CreateRequest::default_instance_,
          CreateRequest_offsets_,
          -1,
          -1,
          -1,
          CreateRequest_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CreateRequest, _oneof_case_[0]),
          sizeof(CreateRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CreateRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CreateRequest, _is_default_instance_));
  ActualCreateResponse_descriptor_ = file->message_type(2);
  static const int ActualCreateResponse_offsets_[1] = {};
  ActualCreateResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualCreateResponse_descriptor_,
          ActualCreateResponse::default_instance_,
          ActualCreateResponse_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualCreateResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualCreateResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualCreateResponse, _is_default_instance_));
  CreateResponse_descriptor_ = file->message_type(3);
  static const int CreateResponse_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          CreateResponse_default_oneof_instance_, clirequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          CreateResponse_default_oneof_instance_, actualcreateresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CreateResponse, CreateResponseUnion_),
  };
  CreateResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CreateResponse_descriptor_,
          CreateResponse::default_instance_,
          CreateResponse_offsets_,
          -1,
          -1,
          -1,
          CreateResponse_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CreateResponse, _oneof_case_[0]),
          sizeof(CreateResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CreateResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CreateResponse, _is_default_instance_));
  ActualUpdateRequest_descriptor_ = file->message_type(4);
  static const int ActualUpdateRequest_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ActualUpdateRequest, path_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ActualUpdateRequest, before_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ActualUpdateRequest, after_),
  };
  ActualUpdateRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualUpdateRequest_descriptor_,
          ActualUpdateRequest::default_instance_,
          ActualUpdateRequest_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualUpdateRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualUpdateRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualUpdateRequest, _is_default_instance_));
  UpdateRequest_descriptor_ = file->message_type(5);
  static const int UpdateRequest_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          UpdateRequest_default_oneof_instance_, actualupdaterequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          UpdateRequest_default_oneof_instance_, cliresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          UpdateRequest, UpdateRequestUnion_),
  };
  UpdateRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          UpdateRequest_descriptor_,
          UpdateRequest::default_instance_,
          UpdateRequest_offsets_,
          -1,
          -1,
          -1,
          UpdateRequest_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              UpdateRequest, _oneof_case_[0]),
          sizeof(UpdateRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              UpdateRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              UpdateRequest, _is_default_instance_));
  ActualUpdateResponse_descriptor_ = file->message_type(6);
  static const int ActualUpdateResponse_offsets_[1] = {};
  ActualUpdateResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualUpdateResponse_descriptor_,
          ActualUpdateResponse::default_instance_,
          ActualUpdateResponse_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualUpdateResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualUpdateResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualUpdateResponse, _is_default_instance_));
  UpdateResponse_descriptor_ = file->message_type(7);
  static const int UpdateResponse_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          UpdateResponse_default_oneof_instance_, clirequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          UpdateResponse_default_oneof_instance_, actualupdateresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          UpdateResponse, UpdateResponseUnion_),
  };
  UpdateResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          UpdateResponse_descriptor_,
          UpdateResponse::default_instance_,
          UpdateResponse_offsets_,
          -1,
          -1,
          -1,
          UpdateResponse_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              UpdateResponse, _oneof_case_[0]),
          sizeof(UpdateResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              UpdateResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              UpdateResponse, _is_default_instance_));
  ActualRemoveRequest_descriptor_ = file->message_type(8);
  static const int ActualRemoveRequest_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ActualRemoveRequest, path_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ActualRemoveRequest, before_),
  };
  ActualRemoveRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualRemoveRequest_descriptor_,
          ActualRemoveRequest::default_instance_,
          ActualRemoveRequest_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualRemoveRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualRemoveRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualRemoveRequest, _is_default_instance_));
  RemoveRequest_descriptor_ = file->message_type(9);
  static const int RemoveRequest_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          RemoveRequest_default_oneof_instance_, actualremoverequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          RemoveRequest_default_oneof_instance_, cliresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          RemoveRequest, RemoveRequestUnion_),
  };
  RemoveRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          RemoveRequest_descriptor_,
          RemoveRequest::default_instance_,
          RemoveRequest_offsets_,
          -1,
          -1,
          -1,
          RemoveRequest_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              RemoveRequest, _oneof_case_[0]),
          sizeof(RemoveRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              RemoveRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              RemoveRequest, _is_default_instance_));
  ActualRemoveResponse_descriptor_ = file->message_type(10);
  static const int ActualRemoveResponse_offsets_[1] = {};
  ActualRemoveResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          ActualRemoveResponse_descriptor_,
          ActualRemoveResponse::default_instance_,
          ActualRemoveResponse_offsets_,
          -1,
          -1,
          -1,
          sizeof(ActualRemoveResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualRemoveResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              ActualRemoveResponse, _is_default_instance_));
  RemoveResponse_descriptor_ = file->message_type(11);
  static const int RemoveResponse_offsets_[3] = {
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          RemoveResponse_default_oneof_instance_, clirequest_),
      PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(
          RemoveResponse_default_oneof_instance_, actualremoveresponse_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          RemoveResponse, RemoveResponseUnion_),
  };
  RemoveResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          RemoveResponse_descriptor_,
          RemoveResponse::default_instance_,
          RemoveResponse_offsets_,
          -1,
          -1,
          -1,
          RemoveResponse_default_oneof_instance_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              RemoveResponse, _oneof_case_[0]),
          sizeof(RemoveResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              RemoveResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              RemoveResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(
      &protobuf_AssignDescriptors_once_,
      &protobuf_AssignDesc_WriterPlugin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualCreateRequest_descriptor_,
      &ActualCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateRequest_descriptor_, &CreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualCreateResponse_descriptor_,
      &ActualCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateResponse_descriptor_, &CreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualUpdateRequest_descriptor_,
      &ActualUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateRequest_descriptor_, &UpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualUpdateResponse_descriptor_,
      &ActualUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateResponse_descriptor_, &UpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualRemoveRequest_descriptor_,
      &ActualRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoveRequest_descriptor_, &RemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActualRemoveResponse_descriptor_,
      &ActualRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoveResponse_descriptor_, &RemoveResponse::default_instance());
}

} // namespace

void protobuf_ShutdownFile_WriterPlugin_2eproto() {
  delete ActualCreateRequest::default_instance_;
  delete ActualCreateRequest_reflection_;
  delete CreateRequest::default_instance_;
  delete CreateRequest_default_oneof_instance_;
  delete CreateRequest_reflection_;
  delete ActualCreateResponse::default_instance_;
  delete ActualCreateResponse_reflection_;
  delete CreateResponse::default_instance_;
  delete CreateResponse_default_oneof_instance_;
  delete CreateResponse_reflection_;
  delete ActualUpdateRequest::default_instance_;
  delete ActualUpdateRequest_reflection_;
  delete UpdateRequest::default_instance_;
  delete UpdateRequest_default_oneof_instance_;
  delete UpdateRequest_reflection_;
  delete ActualUpdateResponse::default_instance_;
  delete ActualUpdateResponse_reflection_;
  delete UpdateResponse::default_instance_;
  delete UpdateResponse_default_oneof_instance_;
  delete UpdateResponse_reflection_;
  delete ActualRemoveRequest::default_instance_;
  delete ActualRemoveRequest_reflection_;
  delete RemoveRequest::default_instance_;
  delete RemoveRequest_default_oneof_instance_;
  delete RemoveRequest_reflection_;
  delete ActualRemoveResponse::default_instance_;
  delete ActualRemoveResponse_reflection_;
  delete RemoveResponse::default_instance_;
  delete RemoveResponse_default_oneof_instance_;
  delete RemoveResponse_reflection_;
}

void protobuf_AddDesc_WriterPlugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_WriterPlugin_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::devmand::channels::cli::plugin::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\022WriterPlugin.proto\022\033devmand.channels.c"
      "li.plugin\032\014Common.proto\"0\n\023ActualCreateR"
      "equest\022\014\n\004path\030\001 \001(\t\022\013\n\003cfg\030\002 \001(\t\"\267\001\n\rCr"
      "eateRequest\022O\n\023actualCreateRequest\030\001 \001(\013"
      "20.devmand.channels.cli.plugin.ActualCre"
      "ateRequestH\000\022\?\n\013cliResponse\030\002 \001(\0132(.devm"
      "and.channels.cli.plugin.CliResponseH\000B\024\n"
      "\022CreateRequestUnion\"\026\n\024ActualCreateRespo"
      "nse\"\271\001\n\016CreateResponse\022=\n\ncliRequest\030\001 \001"
      "(\0132\'.devmand.channels.cli.plugin.CliRequ"
      "estH\000\022Q\n\024actualCreateResponse\030\002 \001(\01321.de"
      "vmand.channels.cli.plugin.ActualCreateRe"
      "sponseH\000B\025\n\023CreateResponseUnion\"B\n\023Actua"
      "lUpdateRequest\022\014\n\004path\030\001 \001(\t\022\016\n\006before\030\002"
      " \001(\t\022\r\n\005after\030\003 \001(\t\"\267\001\n\rUpdateRequest\022O\n"
      "\023actualUpdateRequest\030\001 \001(\01320.devmand.cha"
      "nnels.cli.plugin.ActualUpdateRequestH\000\022\?"
      "\n\013cliResponse\030\002 \001(\0132(.devmand.channels.c"
      "li.plugin.CliResponseH\000B\024\n\022UpdateRequest"
      "Union\"\026\n\024ActualUpdateResponse\"\271\001\n\016Update"
      "Response\022=\n\ncliRequest\030\001 \001(\0132\'.devmand.c"
      "hannels.cli.plugin.CliRequestH\000\022Q\n\024actua"
      "lUpdateResponse\030\002 \001(\01321.devmand.channels"
      ".cli.plugin.ActualUpdateResponseH\000B\025\n\023Up"
      "dateResponseUnion\"3\n\023ActualRemoveRequest"
      "\022\014\n\004path\030\001 \001(\t\022\016\n\006before\030\002 \001(\t\"\267\001\n\rRemov"
      "eRequest\022O\n\023actualRemoveRequest\030\001 \001(\01320."
      "devmand.channels.cli.plugin.ActualRemove"
      "RequestH\000\022\?\n\013cliResponse\030\002 \001(\0132(.devmand"
      ".channels.cli.plugin.CliResponseH\000B\024\n\022Re"
      "moveRequestUnion\"\026\n\024ActualRemoveResponse"
      "\"\271\001\n\016RemoveResponse\022=\n\ncliRequest\030\001 \001(\0132"
      "\'.devmand.channels.cli.plugin.CliRequest"
      "H\000\022Q\n\024actualRemoveResponse\030\002 \001(\01321.devma"
      "nd.channels.cli.plugin.ActualRemoveRespo"
      "nseH\000B\025\n\023RemoveResponseUnion2\311\002\n\014WriterP"
      "lugin\022g\n\006Create\022*.devmand.channels.cli.p"
      "lugin.CreateRequest\032+.devmand.channels.c"
      "li.plugin.CreateResponse\"\000(\0010\001\022g\n\006Update"
      "\022*.devmand.channels.cli.plugin.UpdateReq"
      "uest\032+.devmand.channels.cli.plugin.Updat"
      "eResponse\"\000(\0010\001\022g\n\006Remove\022*.devmand.chan"
      "nels.cli.plugin.RemoveRequest\032+.devmand."
      "channels.cli.plugin.RemoveResponse\"\000(\0010\001"
      "b\006proto3",
      1768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "WriterPlugin.proto", &protobuf_RegisterTypes);
  ActualCreateRequest::default_instance_ = new ActualCreateRequest();
  CreateRequest::default_instance_ = new CreateRequest();
  CreateRequest_default_oneof_instance_ = new CreateRequestOneofInstance();
  ActualCreateResponse::default_instance_ = new ActualCreateResponse();
  CreateResponse::default_instance_ = new CreateResponse();
  CreateResponse_default_oneof_instance_ = new CreateResponseOneofInstance();
  ActualUpdateRequest::default_instance_ = new ActualUpdateRequest();
  UpdateRequest::default_instance_ = new UpdateRequest();
  UpdateRequest_default_oneof_instance_ = new UpdateRequestOneofInstance();
  ActualUpdateResponse::default_instance_ = new ActualUpdateResponse();
  UpdateResponse::default_instance_ = new UpdateResponse();
  UpdateResponse_default_oneof_instance_ = new UpdateResponseOneofInstance();
  ActualRemoveRequest::default_instance_ = new ActualRemoveRequest();
  RemoveRequest::default_instance_ = new RemoveRequest();
  RemoveRequest_default_oneof_instance_ = new RemoveRequestOneofInstance();
  ActualRemoveResponse::default_instance_ = new ActualRemoveResponse();
  RemoveResponse::default_instance_ = new RemoveResponse();
  RemoveResponse_default_oneof_instance_ = new RemoveResponseOneofInstance();
  ActualCreateRequest::default_instance_->InitAsDefaultInstance();
  CreateRequest::default_instance_->InitAsDefaultInstance();
  ActualCreateResponse::default_instance_->InitAsDefaultInstance();
  CreateResponse::default_instance_->InitAsDefaultInstance();
  ActualUpdateRequest::default_instance_->InitAsDefaultInstance();
  UpdateRequest::default_instance_->InitAsDefaultInstance();
  ActualUpdateResponse::default_instance_->InitAsDefaultInstance();
  UpdateResponse::default_instance_->InitAsDefaultInstance();
  ActualRemoveRequest::default_instance_->InitAsDefaultInstance();
  RemoveRequest::default_instance_->InitAsDefaultInstance();
  ActualRemoveResponse::default_instance_->InitAsDefaultInstance();
  RemoveResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_WriterPlugin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WriterPlugin_2eproto {
  StaticDescriptorInitializer_WriterPlugin_2eproto() {
    protobuf_AddDesc_WriterPlugin_2eproto();
  }
} static_descriptor_initializer_WriterPlugin_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActualCreateRequest::kPathFieldNumber;
const int ActualCreateRequest::kCfgFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualCreateRequest::ActualCreateRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualCreateRequest)
}

void ActualCreateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualCreateRequest::ActualCreateRequest(const ActualCreateRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualCreateRequest)
}

void ActualCreateRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfg_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActualCreateRequest::~ActualCreateRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualCreateRequest)
  SharedDtor();
}

void ActualCreateRequest::SharedDtor() {
  path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfg_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ActualCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualCreateRequest_descriptor_;
}

const ActualCreateRequest& ActualCreateRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

ActualCreateRequest* ActualCreateRequest::default_instance_ = NULL;

ActualCreateRequest* ActualCreateRequest::New(
    ::google::protobuf::Arena* arena) const {
  ActualCreateRequest* n = new ActualCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualCreateRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualCreateRequest)
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfg_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ActualCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->path().data(),
              (int)this->path().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualCreateRequest.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_cfg;
        break;
      }

      // optional string cfg = 2;
      case 2: {
        if (tag == 18) {
        parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_cfg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->cfg().data(),
              (int)this->cfg().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualCreateRequest.cfg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualCreateRequest)
  return false;
#undef DO_
}

void ActualCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualCreateRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualCreateRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->path(), output);
  }

  // optional string cfg = 2;
  if (this->cfg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->cfg().data(),
        (int)this->cfg().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualCreateRequest.cfg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->cfg(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualCreateRequest)
}

::google::protobuf::uint8*
ActualCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualCreateRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualCreateRequest.path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string cfg = 2;
  if (this->cfg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->cfg().data(),
        (int)this->cfg().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualCreateRequest.cfg");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cfg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualCreateRequest)
  return target;
}

int ActualCreateRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualCreateRequest)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->path());
  }

  // optional string cfg = 2;
  if (this->cfg().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->cfg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualCreateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualCreateRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualCreateRequest)
    MergeFrom(*source);
  }
}

void ActualCreateRequest::MergeFrom(const ActualCreateRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualCreateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.path().size() > 0) {
    path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  if (from.cfg().size() > 0) {
    cfg_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.cfg_);
  }
}

void ActualCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualCreateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualCreateRequest::CopyFrom(const ActualCreateRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualCreateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualCreateRequest::IsInitialized() const {
  return true;
}

void ActualCreateRequest::Swap(ActualCreateRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualCreateRequest::InternalSwap(ActualCreateRequest* other) {
  path_.Swap(&other->path_);
  cfg_.Swap(&other->cfg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualCreateRequest_descriptor_;
  metadata.reflection = ActualCreateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualCreateRequest

// optional string path = 1;
void ActualCreateRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualCreateRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualCreateRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualCreateRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualCreateRequest.path)
}
void ActualCreateRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualCreateRequest.path)
}
void ActualCreateRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualCreateRequest.path)
}
::std::string* ActualCreateRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualCreateRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualCreateRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualCreateRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualCreateRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualCreateRequest.path)
}

// optional string cfg = 2;
void ActualCreateRequest::clear_cfg() {
  cfg_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualCreateRequest::cfg() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
  return cfg_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualCreateRequest::set_cfg(const ::std::string& value) {
  cfg_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}
void ActualCreateRequest::set_cfg(const char* value) {
  cfg_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}
void ActualCreateRequest::set_cfg(const char* value, size_t size) {
  cfg_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}
::std::string* ActualCreateRequest::mutable_cfg() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
  return cfg_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualCreateRequest::release_cfg() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualCreateRequest.cfg)

  return cfg_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualCreateRequest::set_allocated_cfg(::std::string* cfg) {
  if (cfg != NULL) {
  } else {
  }
  cfg_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfg);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualCreateRequest.cfg)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRequest::kActualCreateRequestFieldNumber;
const int CreateRequest::kCliResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRequest::CreateRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.CreateRequest)
}

void CreateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  CreateRequest_default_oneof_instance_->actualcreaterequest_ =
      const_cast<::devmand::channels::cli::plugin::ActualCreateRequest*>(
          &::devmand::channels::cli::plugin::ActualCreateRequest::
              default_instance());
  CreateRequest_default_oneof_instance_->cliresponse_ =
      const_cast<::devmand::channels::cli::plugin::CliResponse*>(
          &::devmand::channels::cli::plugin::CliResponse::default_instance());
}

CreateRequest::CreateRequest(const CreateRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.CreateRequest)
}

void CreateRequest::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_CreateRequestUnion();
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.CreateRequest)
  SharedDtor();
}

void CreateRequest::SharedDtor() {
  if (has_CreateRequestUnion()) {
    clear_CreateRequestUnion();
  }
  if (this != default_instance_) {
  }
}

void CreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRequest_descriptor_;
}

const CreateRequest& CreateRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

CreateRequest* CreateRequest::default_instance_ = NULL;

CreateRequest* CreateRequest::New(::google::protobuf::Arena* arena) const {
  CreateRequest* n = new CreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRequest::clear_CreateRequestUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.CreateRequest)
  switch (CreateRequestUnion_case()) {
    case kActualCreateRequest: {
      delete CreateRequestUnion_.actualcreaterequest_;
      break;
    }
    case kCliResponse: {
      delete CreateRequestUnion_.cliresponse_;
      break;
    }
    case CREATEREQUESTUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CREATEREQUESTUNION_NOT_SET;
}

void CreateRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.CreateRequest)
  clear_CreateRequestUnion();
}

bool CreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.CreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.ActualCreateRequest
      // actualCreateRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualcreaterequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_cliResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_cliResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_cliresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.CreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.CreateRequest)
  return false;
#undef DO_
}

void CreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.CreateRequest)
  // optional .devmand.channels.cli.plugin.ActualCreateRequest
  // actualCreateRequest = 1;
  if (has_actualcreaterequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *CreateRequestUnion_.actualcreaterequest_, output);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *CreateRequestUnion_.cliresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.CreateRequest)
}

::google::protobuf::uint8*
CreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.CreateRequest)
  // optional .devmand.channels.cli.plugin.ActualCreateRequest
  // actualCreateRequest = 1;
  if (has_actualcreaterequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *CreateRequestUnion_.actualcreaterequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *CreateRequestUnion_.cliresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.CreateRequest)
  return target;
}

int CreateRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.CreateRequest)
  int total_size = 0;

  switch (CreateRequestUnion_case()) {
    // optional .devmand.channels.cli.plugin.ActualCreateRequest
    // actualCreateRequest = 1;
    case kActualCreateRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *CreateRequestUnion_.actualcreaterequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
    case kCliResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *CreateRequestUnion_.cliresponse_);
      break;
    }
    case CREATEREQUESTUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.CreateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRequest>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.CreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.CreateRequest)
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.CreateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.CreateRequestUnion_case()) {
    case kActualCreateRequest: {
      mutable_actualcreaterequest()
          ->::devmand::channels::cli::plugin::ActualCreateRequest::MergeFrom(
              from.actualcreaterequest());
      break;
    }
    case kCliResponse: {
      mutable_cliresponse()
          ->::devmand::channels::cli::plugin::CliResponse::MergeFrom(
              from.cliresponse());
      break;
    }
    case CREATEREQUESTUNION_NOT_SET: {
      break;
    }
  }
}

void CreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.CreateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.CreateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::Swap(CreateRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CreateRequest::InternalSwap(CreateRequest* other) {
  std::swap(CreateRequestUnion_, other->CreateRequestUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRequest_descriptor_;
  metadata.reflection = CreateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRequest

// optional .devmand.channels.cli.plugin.ActualCreateRequest actualCreateRequest
// = 1;
bool CreateRequest::has_actualcreaterequest() const {
  return CreateRequestUnion_case() == kActualCreateRequest;
}
void CreateRequest::set_has_actualcreaterequest() {
  _oneof_case_[0] = kActualCreateRequest;
}
void CreateRequest::clear_actualcreaterequest() {
  if (has_actualcreaterequest()) {
    delete CreateRequestUnion_.actualcreaterequest_;
    clear_has_CreateRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualCreateRequest&
CreateRequest::actualcreaterequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
  return has_actualcreaterequest()
      ? *CreateRequestUnion_.actualcreaterequest_
      : ::devmand::channels::cli::plugin::ActualCreateRequest::
            default_instance();
}
::devmand::channels::cli::plugin::ActualCreateRequest*
CreateRequest::mutable_actualcreaterequest() {
  if (!has_actualcreaterequest()) {
    clear_CreateRequestUnion();
    set_has_actualcreaterequest();
    CreateRequestUnion_.actualcreaterequest_ =
        new ::devmand::channels::cli::plugin::ActualCreateRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
  return CreateRequestUnion_.actualcreaterequest_;
}
::devmand::channels::cli::plugin::ActualCreateRequest*
CreateRequest::release_actualcreaterequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
  if (has_actualcreaterequest()) {
    clear_has_CreateRequestUnion();
    ::devmand::channels::cli::plugin::ActualCreateRequest* temp =
        CreateRequestUnion_.actualcreaterequest_;
    CreateRequestUnion_.actualcreaterequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateRequest::set_allocated_actualcreaterequest(
    ::devmand::channels::cli::plugin::ActualCreateRequest*
        actualcreaterequest) {
  clear_CreateRequestUnion();
  if (actualcreaterequest) {
    set_has_actualcreaterequest();
    CreateRequestUnion_.actualcreaterequest_ = actualcreaterequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateRequest.actualCreateRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
bool CreateRequest::has_cliresponse() const {
  return CreateRequestUnion_case() == kCliResponse;
}
void CreateRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
void CreateRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete CreateRequestUnion_.cliresponse_;
    clear_has_CreateRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::CliResponse&
CreateRequest::cliresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateRequest.cliResponse)
  return has_cliresponse()
      ? *CreateRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
::devmand::channels::cli::plugin::CliResponse*
CreateRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_CreateRequestUnion();
    set_has_cliresponse();
    CreateRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateRequest.cliResponse)
  return CreateRequestUnion_.cliresponse_;
}
::devmand::channels::cli::plugin::CliResponse*
CreateRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_CreateRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        CreateRequestUnion_.cliresponse_;
    CreateRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_CreateRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    CreateRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateRequest.cliResponse)
}

bool CreateRequest::has_CreateRequestUnion() const {
  return CreateRequestUnion_case() != CREATEREQUESTUNION_NOT_SET;
}
void CreateRequest::clear_has_CreateRequestUnion() {
  _oneof_case_[0] = CREATEREQUESTUNION_NOT_SET;
}
CreateRequest::CreateRequestUnionCase CreateRequest::CreateRequestUnion_case()
    const {
  return CreateRequest::CreateRequestUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualCreateResponse::ActualCreateResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualCreateResponse)
}

void ActualCreateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualCreateResponse::ActualCreateResponse(const ActualCreateResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualCreateResponse)
}

void ActualCreateResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
}

ActualCreateResponse::~ActualCreateResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualCreateResponse)
  SharedDtor();
}

void ActualCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActualCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualCreateResponse_descriptor_;
}

const ActualCreateResponse& ActualCreateResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

ActualCreateResponse* ActualCreateResponse::default_instance_ = NULL;

ActualCreateResponse* ActualCreateResponse::New(
    ::google::protobuf::Arena* arena) const {
  ActualCreateResponse* n = new ActualCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualCreateResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualCreateResponse)
}

bool ActualCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualCreateResponse)
  return false;
#undef DO_
}

void ActualCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualCreateResponse)
  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualCreateResponse)
}

::google::protobuf::uint8*
ActualCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualCreateResponse)
  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualCreateResponse)
  return target;
}

int ActualCreateResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualCreateResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualCreateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualCreateResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualCreateResponse)
    MergeFrom(*source);
  }
}

void ActualCreateResponse::MergeFrom(const ActualCreateResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualCreateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ActualCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualCreateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualCreateResponse::CopyFrom(const ActualCreateResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualCreateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualCreateResponse::IsInitialized() const {
  return true;
}

void ActualCreateResponse::Swap(ActualCreateResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualCreateResponse::InternalSwap(ActualCreateResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualCreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualCreateResponse_descriptor_;
  metadata.reflection = ActualCreateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualCreateResponse

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateResponse::kCliRequestFieldNumber;
const int CreateResponse::kActualCreateResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateResponse::CreateResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.CreateResponse)
}

void CreateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  CreateResponse_default_oneof_instance_->clirequest_ =
      const_cast<::devmand::channels::cli::plugin::CliRequest*>(
          &::devmand::channels::cli::plugin::CliRequest::default_instance());
  CreateResponse_default_oneof_instance_->actualcreateresponse_ =
      const_cast<::devmand::channels::cli::plugin::ActualCreateResponse*>(
          &::devmand::channels::cli::plugin::ActualCreateResponse::
              default_instance());
}

CreateResponse::CreateResponse(const CreateResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.CreateResponse)
}

void CreateResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_CreateResponseUnion();
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.CreateResponse)
  SharedDtor();
}

void CreateResponse::SharedDtor() {
  if (has_CreateResponseUnion()) {
    clear_CreateResponseUnion();
  }
  if (this != default_instance_) {
  }
}

void CreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateResponse_descriptor_;
}

const CreateResponse& CreateResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

CreateResponse* CreateResponse::default_instance_ = NULL;

CreateResponse* CreateResponse::New(::google::protobuf::Arena* arena) const {
  CreateResponse* n = new CreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateResponse::clear_CreateResponseUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.CreateResponse)
  switch (CreateResponseUnion_case()) {
    case kCliRequest: {
      delete CreateResponseUnion_.clirequest_;
      break;
    }
    case kActualCreateResponse: {
      delete CreateResponseUnion_.actualcreateresponse_;
      break;
    }
    case CREATERESPONSEUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CREATERESPONSEUNION_NOT_SET;
}

void CreateResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.CreateResponse)
  clear_CreateResponseUnion();
}

bool CreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.CreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_clirequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_actualCreateResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.ActualCreateResponse
      // actualCreateResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_actualCreateResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualcreateresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.CreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.CreateResponse)
  return false;
#undef DO_
}

void CreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.CreateResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *CreateResponseUnion_.clirequest_, output);
  }

  // optional .devmand.channels.cli.plugin.ActualCreateResponse
  // actualCreateResponse = 2;
  if (has_actualcreateresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *CreateResponseUnion_.actualcreateresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.CreateResponse)
}

::google::protobuf::uint8*
CreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.CreateResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *CreateResponseUnion_.clirequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.ActualCreateResponse
  // actualCreateResponse = 2;
  if (has_actualcreateresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *CreateResponseUnion_.actualcreateresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.CreateResponse)
  return target;
}

int CreateResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.CreateResponse)
  int total_size = 0;

  switch (CreateResponseUnion_case()) {
    // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
    case kCliRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *CreateResponseUnion_.clirequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.ActualCreateResponse
    // actualCreateResponse = 2;
    case kActualCreateResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *CreateResponseUnion_.actualcreateresponse_);
      break;
    }
    case CREATERESPONSEUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.CreateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const CreateResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.CreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.CreateResponse)
    MergeFrom(*source);
  }
}

void CreateResponse::MergeFrom(const CreateResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.CreateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.CreateResponseUnion_case()) {
    case kCliRequest: {
      mutable_clirequest()
          ->::devmand::channels::cli::plugin::CliRequest::MergeFrom(
              from.clirequest());
      break;
    }
    case kActualCreateResponse: {
      mutable_actualcreateresponse()
          ->::devmand::channels::cli::plugin::ActualCreateResponse::MergeFrom(
              from.actualcreateresponse());
      break;
    }
    case CREATERESPONSEUNION_NOT_SET: {
      break;
    }
  }
}

void CreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.CreateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.CreateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::Swap(CreateResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CreateResponse::InternalSwap(CreateResponse* other) {
  std::swap(CreateResponseUnion_, other->CreateResponseUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateResponse_descriptor_;
  metadata.reflection = CreateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
bool CreateResponse::has_clirequest() const {
  return CreateResponseUnion_case() == kCliRequest;
}
void CreateResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
void CreateResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete CreateResponseUnion_.clirequest_;
    clear_has_CreateResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::CliRequest& CreateResponse::clirequest()
    const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateResponse.cliRequest)
  return has_clirequest()
      ? *CreateResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
::devmand::channels::cli::plugin::CliRequest*
CreateResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_CreateResponseUnion();
    set_has_clirequest();
    CreateResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateResponse.cliRequest)
  return CreateResponseUnion_.clirequest_;
}
::devmand::channels::cli::plugin::CliRequest*
CreateResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_CreateResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        CreateResponseUnion_.clirequest_;
    CreateResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_CreateResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    CreateResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualCreateResponse
// actualCreateResponse = 2;
bool CreateResponse::has_actualcreateresponse() const {
  return CreateResponseUnion_case() == kActualCreateResponse;
}
void CreateResponse::set_has_actualcreateresponse() {
  _oneof_case_[0] = kActualCreateResponse;
}
void CreateResponse::clear_actualcreateresponse() {
  if (has_actualcreateresponse()) {
    delete CreateResponseUnion_.actualcreateresponse_;
    clear_has_CreateResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualCreateResponse&
CreateResponse::actualcreateresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
  return has_actualcreateresponse()
      ? *CreateResponseUnion_.actualcreateresponse_
      : ::devmand::channels::cli::plugin::ActualCreateResponse::
            default_instance();
}
::devmand::channels::cli::plugin::ActualCreateResponse*
CreateResponse::mutable_actualcreateresponse() {
  if (!has_actualcreateresponse()) {
    clear_CreateResponseUnion();
    set_has_actualcreateresponse();
    CreateResponseUnion_.actualcreateresponse_ =
        new ::devmand::channels::cli::plugin::ActualCreateResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
  return CreateResponseUnion_.actualcreateresponse_;
}
::devmand::channels::cli::plugin::ActualCreateResponse*
CreateResponse::release_actualcreateresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
  if (has_actualcreateresponse()) {
    clear_has_CreateResponseUnion();
    ::devmand::channels::cli::plugin::ActualCreateResponse* temp =
        CreateResponseUnion_.actualcreateresponse_;
    CreateResponseUnion_.actualcreateresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateResponse::set_allocated_actualcreateresponse(
    ::devmand::channels::cli::plugin::ActualCreateResponse*
        actualcreateresponse) {
  clear_CreateResponseUnion();
  if (actualcreateresponse) {
    set_has_actualcreateresponse();
    CreateResponseUnion_.actualcreateresponse_ = actualcreateresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CreateResponse.actualCreateResponse)
}

bool CreateResponse::has_CreateResponseUnion() const {
  return CreateResponseUnion_case() != CREATERESPONSEUNION_NOT_SET;
}
void CreateResponse::clear_has_CreateResponseUnion() {
  _oneof_case_[0] = CREATERESPONSEUNION_NOT_SET;
}
CreateResponse::CreateResponseUnionCase
CreateResponse::CreateResponseUnion_case() const {
  return CreateResponse::CreateResponseUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActualUpdateRequest::kPathFieldNumber;
const int ActualUpdateRequest::kBeforeFieldNumber;
const int ActualUpdateRequest::kAfterFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualUpdateRequest::ActualUpdateRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualUpdateRequest)
}

void ActualUpdateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualUpdateRequest::ActualUpdateRequest(const ActualUpdateRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualUpdateRequest)
}

void ActualUpdateRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  before_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  after_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActualUpdateRequest::~ActualUpdateRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualUpdateRequest)
  SharedDtor();
}

void ActualUpdateRequest::SharedDtor() {
  path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  before_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  after_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ActualUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualUpdateRequest_descriptor_;
}

const ActualUpdateRequest& ActualUpdateRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

ActualUpdateRequest* ActualUpdateRequest::default_instance_ = NULL;

ActualUpdateRequest* ActualUpdateRequest::New(
    ::google::protobuf::Arena* arena) const {
  ActualUpdateRequest* n = new ActualUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualUpdateRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  before_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  after_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ActualUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->path().data(),
              (int)this->path().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualUpdateRequest.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_before;
        break;
      }

      // optional string before = 2;
      case 2: {
        if (tag == 18) {
        parse_before:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_before()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->before().data(),
              (int)this->before().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualUpdateRequest.before"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_after;
        break;
      }

      // optional string after = 3;
      case 3: {
        if (tag == 26) {
        parse_after:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_after()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->after().data(),
              (int)this->after().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualUpdateRequest.after"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualUpdateRequest)
  return false;
#undef DO_
}

void ActualUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualUpdateRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->path(), output);
  }

  // optional string before = 2;
  if (this->before().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->before().data(),
        (int)this->before().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualUpdateRequest.before");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->before(), output);
  }

  // optional string after = 3;
  if (this->after().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->after().data(),
        (int)this->after().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualUpdateRequest.after");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->after(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualUpdateRequest)
}

::google::protobuf::uint8*
ActualUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualUpdateRequest.path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string before = 2;
  if (this->before().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->before().data(),
        (int)this->before().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualUpdateRequest.before");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->before(), target);
  }

  // optional string after = 3;
  if (this->after().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->after().data(),
        (int)this->after().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualUpdateRequest.after");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->after(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualUpdateRequest)
  return target;
}

int ActualUpdateRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->path());
  }

  // optional string before = 2;
  if (this->before().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->before());
  }

  // optional string after = 3;
  if (this->after().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->after());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualUpdateRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualUpdateRequest)
    MergeFrom(*source);
  }
}

void ActualUpdateRequest::MergeFrom(const ActualUpdateRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.path().size() > 0) {
    path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  if (from.before().size() > 0) {
    before_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.before_);
  }
  if (from.after().size() > 0) {
    after_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.after_);
  }
}

void ActualUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualUpdateRequest::CopyFrom(const ActualUpdateRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualUpdateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualUpdateRequest::IsInitialized() const {
  return true;
}

void ActualUpdateRequest::Swap(ActualUpdateRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualUpdateRequest::InternalSwap(ActualUpdateRequest* other) {
  path_.Swap(&other->path_);
  before_.Swap(&other->before_);
  after_.Swap(&other->after_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualUpdateRequest_descriptor_;
  metadata.reflection = ActualUpdateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualUpdateRequest

// optional string path = 1;
void ActualUpdateRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualUpdateRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualUpdateRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualUpdateRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}
void ActualUpdateRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}
void ActualUpdateRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}
::std::string* ActualUpdateRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualUpdateRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualUpdateRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualUpdateRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualUpdateRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualUpdateRequest.path)
}

// optional string before = 2;
void ActualUpdateRequest::clear_before() {
  before_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualUpdateRequest::before() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualUpdateRequest.before)
  return before_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualUpdateRequest::set_before(const ::std::string& value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}
void ActualUpdateRequest::set_before(const char* value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}
void ActualUpdateRequest::set_before(const char* value, size_t size) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}
::std::string* ActualUpdateRequest::mutable_before() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualUpdateRequest.before)
  return before_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualUpdateRequest::release_before() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualUpdateRequest.before)

  return before_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualUpdateRequest::set_allocated_before(::std::string* before) {
  if (before != NULL) {
  } else {
  }
  before_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), before);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualUpdateRequest.before)
}

// optional string after = 3;
void ActualUpdateRequest::clear_after() {
  after_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualUpdateRequest::after() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualUpdateRequest.after)
  return after_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualUpdateRequest::set_after(const ::std::string& value) {
  after_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}
void ActualUpdateRequest::set_after(const char* value) {
  after_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}
void ActualUpdateRequest::set_after(const char* value, size_t size) {
  after_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}
::std::string* ActualUpdateRequest::mutable_after() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualUpdateRequest.after)
  return after_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualUpdateRequest::release_after() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualUpdateRequest.after)

  return after_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualUpdateRequest::set_allocated_after(::std::string* after) {
  if (after != NULL) {
  } else {
  }
  after_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), after);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualUpdateRequest.after)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRequest::kActualUpdateRequestFieldNumber;
const int UpdateRequest::kCliResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRequest::UpdateRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.UpdateRequest)
}

void UpdateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  UpdateRequest_default_oneof_instance_->actualupdaterequest_ =
      const_cast<::devmand::channels::cli::plugin::ActualUpdateRequest*>(
          &::devmand::channels::cli::plugin::ActualUpdateRequest::
              default_instance());
  UpdateRequest_default_oneof_instance_->cliresponse_ =
      const_cast<::devmand::channels::cli::plugin::CliResponse*>(
          &::devmand::channels::cli::plugin::CliResponse::default_instance());
}

UpdateRequest::UpdateRequest(const UpdateRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_UpdateRequestUnion();
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.UpdateRequest)
  SharedDtor();
}

void UpdateRequest::SharedDtor() {
  if (has_UpdateRequestUnion()) {
    clear_UpdateRequestUnion();
  }
  if (this != default_instance_) {
  }
}

void UpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRequest_descriptor_;
}

const UpdateRequest& UpdateRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

UpdateRequest* UpdateRequest::default_instance_ = NULL;

UpdateRequest* UpdateRequest::New(::google::protobuf::Arena* arena) const {
  UpdateRequest* n = new UpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRequest::clear_UpdateRequestUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.UpdateRequest)
  switch (UpdateRequestUnion_case()) {
    case kActualUpdateRequest: {
      delete UpdateRequestUnion_.actualupdaterequest_;
      break;
    }
    case kCliResponse: {
      delete UpdateRequestUnion_.cliresponse_;
      break;
    }
    case UPDATEREQUESTUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATEREQUESTUNION_NOT_SET;
}

void UpdateRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.UpdateRequest)
  clear_UpdateRequestUnion();
}

bool UpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.UpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.ActualUpdateRequest
      // actualUpdateRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualupdaterequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_cliResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_cliResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_cliresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.UpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.UpdateRequest)
  return false;
#undef DO_
}

void UpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.UpdateRequest)
  // optional .devmand.channels.cli.plugin.ActualUpdateRequest
  // actualUpdateRequest = 1;
  if (has_actualupdaterequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *UpdateRequestUnion_.actualupdaterequest_, output);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *UpdateRequestUnion_.cliresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.UpdateRequest)
}

::google::protobuf::uint8*
UpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.UpdateRequest)
  // optional .devmand.channels.cli.plugin.ActualUpdateRequest
  // actualUpdateRequest = 1;
  if (has_actualupdaterequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *UpdateRequestUnion_.actualupdaterequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *UpdateRequestUnion_.cliresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.UpdateRequest)
  return target;
}

int UpdateRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.UpdateRequest)
  int total_size = 0;

  switch (UpdateRequestUnion_case()) {
    // optional .devmand.channels.cli.plugin.ActualUpdateRequest
    // actualUpdateRequest = 1;
    case kActualUpdateRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *UpdateRequestUnion_.actualupdaterequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
    case kCliResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *UpdateRequestUnion_.cliresponse_);
      break;
    }
    case UPDATEREQUESTUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.UpdateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRequest>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.UpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.UpdateRequest)
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.UpdateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.UpdateRequestUnion_case()) {
    case kActualUpdateRequest: {
      mutable_actualupdaterequest()
          ->::devmand::channels::cli::plugin::ActualUpdateRequest::MergeFrom(
              from.actualupdaterequest());
      break;
    }
    case kCliResponse: {
      mutable_cliresponse()
          ->::devmand::channels::cli::plugin::CliResponse::MergeFrom(
              from.cliresponse());
      break;
    }
    case UPDATEREQUESTUNION_NOT_SET: {
      break;
    }
  }
}

void UpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.UpdateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.UpdateRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::Swap(UpdateRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void UpdateRequest::InternalSwap(UpdateRequest* other) {
  std::swap(UpdateRequestUnion_, other->UpdateRequestUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRequest_descriptor_;
  metadata.reflection = UpdateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRequest

// optional .devmand.channels.cli.plugin.ActualUpdateRequest actualUpdateRequest
// = 1;
bool UpdateRequest::has_actualupdaterequest() const {
  return UpdateRequestUnion_case() == kActualUpdateRequest;
}
void UpdateRequest::set_has_actualupdaterequest() {
  _oneof_case_[0] = kActualUpdateRequest;
}
void UpdateRequest::clear_actualupdaterequest() {
  if (has_actualupdaterequest()) {
    delete UpdateRequestUnion_.actualupdaterequest_;
    clear_has_UpdateRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualUpdateRequest&
UpdateRequest::actualupdaterequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
  return has_actualupdaterequest()
      ? *UpdateRequestUnion_.actualupdaterequest_
      : ::devmand::channels::cli::plugin::ActualUpdateRequest::
            default_instance();
}
::devmand::channels::cli::plugin::ActualUpdateRequest*
UpdateRequest::mutable_actualupdaterequest() {
  if (!has_actualupdaterequest()) {
    clear_UpdateRequestUnion();
    set_has_actualupdaterequest();
    UpdateRequestUnion_.actualupdaterequest_ =
        new ::devmand::channels::cli::plugin::ActualUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
  return UpdateRequestUnion_.actualupdaterequest_;
}
::devmand::channels::cli::plugin::ActualUpdateRequest*
UpdateRequest::release_actualupdaterequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
  if (has_actualupdaterequest()) {
    clear_has_UpdateRequestUnion();
    ::devmand::channels::cli::plugin::ActualUpdateRequest* temp =
        UpdateRequestUnion_.actualupdaterequest_;
    UpdateRequestUnion_.actualupdaterequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UpdateRequest::set_allocated_actualupdaterequest(
    ::devmand::channels::cli::plugin::ActualUpdateRequest*
        actualupdaterequest) {
  clear_UpdateRequestUnion();
  if (actualupdaterequest) {
    set_has_actualupdaterequest();
    UpdateRequestUnion_.actualupdaterequest_ = actualupdaterequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateRequest.actualUpdateRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
bool UpdateRequest::has_cliresponse() const {
  return UpdateRequestUnion_case() == kCliResponse;
}
void UpdateRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
void UpdateRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete UpdateRequestUnion_.cliresponse_;
    clear_has_UpdateRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::CliResponse&
UpdateRequest::cliresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
  return has_cliresponse()
      ? *UpdateRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
::devmand::channels::cli::plugin::CliResponse*
UpdateRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_UpdateRequestUnion();
    set_has_cliresponse();
    UpdateRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
  return UpdateRequestUnion_.cliresponse_;
}
::devmand::channels::cli::plugin::CliResponse*
UpdateRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_UpdateRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        UpdateRequestUnion_.cliresponse_;
    UpdateRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UpdateRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_UpdateRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    UpdateRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateRequest.cliResponse)
}

bool UpdateRequest::has_UpdateRequestUnion() const {
  return UpdateRequestUnion_case() != UPDATEREQUESTUNION_NOT_SET;
}
void UpdateRequest::clear_has_UpdateRequestUnion() {
  _oneof_case_[0] = UPDATEREQUESTUNION_NOT_SET;
}
UpdateRequest::UpdateRequestUnionCase UpdateRequest::UpdateRequestUnion_case()
    const {
  return UpdateRequest::UpdateRequestUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualUpdateResponse::ActualUpdateResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualUpdateResponse)
}

void ActualUpdateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualUpdateResponse::ActualUpdateResponse(const ActualUpdateResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualUpdateResponse)
}

void ActualUpdateResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
}

ActualUpdateResponse::~ActualUpdateResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualUpdateResponse)
  SharedDtor();
}

void ActualUpdateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActualUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualUpdateResponse_descriptor_;
}

const ActualUpdateResponse& ActualUpdateResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

ActualUpdateResponse* ActualUpdateResponse::default_instance_ = NULL;

ActualUpdateResponse* ActualUpdateResponse::New(
    ::google::protobuf::Arena* arena) const {
  ActualUpdateResponse* n = new ActualUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualUpdateResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualUpdateResponse)
}

bool ActualUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualUpdateResponse)
  return false;
#undef DO_
}

void ActualUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualUpdateResponse)
}

::google::protobuf::uint8*
ActualUpdateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualUpdateResponse)
  return target;
}

int ActualUpdateResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualUpdateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualUpdateResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualUpdateResponse)
    MergeFrom(*source);
  }
}

void ActualUpdateResponse::MergeFrom(const ActualUpdateResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ActualUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualUpdateResponse::CopyFrom(const ActualUpdateResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualUpdateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualUpdateResponse::IsInitialized() const {
  return true;
}

void ActualUpdateResponse::Swap(ActualUpdateResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualUpdateResponse::InternalSwap(ActualUpdateResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualUpdateResponse_descriptor_;
  metadata.reflection = ActualUpdateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualUpdateResponse

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateResponse::kCliRequestFieldNumber;
const int UpdateResponse::kActualUpdateResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateResponse::UpdateResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.UpdateResponse)
}

void UpdateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  UpdateResponse_default_oneof_instance_->clirequest_ =
      const_cast<::devmand::channels::cli::plugin::CliRequest*>(
          &::devmand::channels::cli::plugin::CliRequest::default_instance());
  UpdateResponse_default_oneof_instance_->actualupdateresponse_ =
      const_cast<::devmand::channels::cli::plugin::ActualUpdateResponse*>(
          &::devmand::channels::cli::plugin::ActualUpdateResponse::
              default_instance());
}

UpdateResponse::UpdateResponse(const UpdateResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.UpdateResponse)
}

void UpdateResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_UpdateResponseUnion();
}

UpdateResponse::~UpdateResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.UpdateResponse)
  SharedDtor();
}

void UpdateResponse::SharedDtor() {
  if (has_UpdateResponseUnion()) {
    clear_UpdateResponseUnion();
  }
  if (this != default_instance_) {
  }
}

void UpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateResponse_descriptor_;
}

const UpdateResponse& UpdateResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

UpdateResponse* UpdateResponse::default_instance_ = NULL;

UpdateResponse* UpdateResponse::New(::google::protobuf::Arena* arena) const {
  UpdateResponse* n = new UpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateResponse::clear_UpdateResponseUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.UpdateResponse)
  switch (UpdateResponseUnion_case()) {
    case kCliRequest: {
      delete UpdateResponseUnion_.clirequest_;
      break;
    }
    case kActualUpdateResponse: {
      delete UpdateResponseUnion_.actualupdateresponse_;
      break;
    }
    case UPDATERESPONSEUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATERESPONSEUNION_NOT_SET;
}

void UpdateResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.UpdateResponse)
  clear_UpdateResponseUnion();
}

bool UpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.UpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_clirequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_actualUpdateResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.ActualUpdateResponse
      // actualUpdateResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_actualUpdateResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualupdateresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.UpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.UpdateResponse)
  return false;
#undef DO_
}

void UpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.UpdateResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *UpdateResponseUnion_.clirequest_, output);
  }

  // optional .devmand.channels.cli.plugin.ActualUpdateResponse
  // actualUpdateResponse = 2;
  if (has_actualupdateresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *UpdateResponseUnion_.actualupdateresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.UpdateResponse)
}

::google::protobuf::uint8*
UpdateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.UpdateResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *UpdateResponseUnion_.clirequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.ActualUpdateResponse
  // actualUpdateResponse = 2;
  if (has_actualupdateresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *UpdateResponseUnion_.actualupdateresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.UpdateResponse)
  return target;
}

int UpdateResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.UpdateResponse)
  int total_size = 0;

  switch (UpdateResponseUnion_case()) {
    // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
    case kCliRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *UpdateResponseUnion_.clirequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.ActualUpdateResponse
    // actualUpdateResponse = 2;
    case kActualUpdateResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *UpdateResponseUnion_.actualupdateresponse_);
      break;
    }
    case UPDATERESPONSEUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.UpdateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const UpdateResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.UpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.UpdateResponse)
    MergeFrom(*source);
  }
}

void UpdateResponse::MergeFrom(const UpdateResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.UpdateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.UpdateResponseUnion_case()) {
    case kCliRequest: {
      mutable_clirequest()
          ->::devmand::channels::cli::plugin::CliRequest::MergeFrom(
              from.clirequest());
      break;
    }
    case kActualUpdateResponse: {
      mutable_actualupdateresponse()
          ->::devmand::channels::cli::plugin::ActualUpdateResponse::MergeFrom(
              from.actualupdateresponse());
      break;
    }
    case UPDATERESPONSEUNION_NOT_SET: {
      break;
    }
  }
}

void UpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.UpdateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.UpdateResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool UpdateResponse::IsInitialized() const {
  return true;
}

void UpdateResponse::Swap(UpdateResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void UpdateResponse::InternalSwap(UpdateResponse* other) {
  std::swap(UpdateResponseUnion_, other->UpdateResponseUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateResponse_descriptor_;
  metadata.reflection = UpdateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
bool UpdateResponse::has_clirequest() const {
  return UpdateResponseUnion_case() == kCliRequest;
}
void UpdateResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
void UpdateResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete UpdateResponseUnion_.clirequest_;
    clear_has_UpdateResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::CliRequest& UpdateResponse::clirequest()
    const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
  return has_clirequest()
      ? *UpdateResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
::devmand::channels::cli::plugin::CliRequest*
UpdateResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_UpdateResponseUnion();
    set_has_clirequest();
    UpdateResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
  return UpdateResponseUnion_.clirequest_;
}
::devmand::channels::cli::plugin::CliRequest*
UpdateResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_UpdateResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        UpdateResponseUnion_.clirequest_;
    UpdateResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UpdateResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_UpdateResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    UpdateResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualUpdateResponse
// actualUpdateResponse = 2;
bool UpdateResponse::has_actualupdateresponse() const {
  return UpdateResponseUnion_case() == kActualUpdateResponse;
}
void UpdateResponse::set_has_actualupdateresponse() {
  _oneof_case_[0] = kActualUpdateResponse;
}
void UpdateResponse::clear_actualupdateresponse() {
  if (has_actualupdateresponse()) {
    delete UpdateResponseUnion_.actualupdateresponse_;
    clear_has_UpdateResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualUpdateResponse&
UpdateResponse::actualupdateresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
  return has_actualupdateresponse()
      ? *UpdateResponseUnion_.actualupdateresponse_
      : ::devmand::channels::cli::plugin::ActualUpdateResponse::
            default_instance();
}
::devmand::channels::cli::plugin::ActualUpdateResponse*
UpdateResponse::mutable_actualupdateresponse() {
  if (!has_actualupdateresponse()) {
    clear_UpdateResponseUnion();
    set_has_actualupdateresponse();
    UpdateResponseUnion_.actualupdateresponse_ =
        new ::devmand::channels::cli::plugin::ActualUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
  return UpdateResponseUnion_.actualupdateresponse_;
}
::devmand::channels::cli::plugin::ActualUpdateResponse*
UpdateResponse::release_actualupdateresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
  if (has_actualupdateresponse()) {
    clear_has_UpdateResponseUnion();
    ::devmand::channels::cli::plugin::ActualUpdateResponse* temp =
        UpdateResponseUnion_.actualupdateresponse_;
    UpdateResponseUnion_.actualupdateresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UpdateResponse::set_allocated_actualupdateresponse(
    ::devmand::channels::cli::plugin::ActualUpdateResponse*
        actualupdateresponse) {
  clear_UpdateResponseUnion();
  if (actualupdateresponse) {
    set_has_actualupdateresponse();
    UpdateResponseUnion_.actualupdateresponse_ = actualupdateresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.UpdateResponse.actualUpdateResponse)
}

bool UpdateResponse::has_UpdateResponseUnion() const {
  return UpdateResponseUnion_case() != UPDATERESPONSEUNION_NOT_SET;
}
void UpdateResponse::clear_has_UpdateResponseUnion() {
  _oneof_case_[0] = UPDATERESPONSEUNION_NOT_SET;
}
UpdateResponse::UpdateResponseUnionCase
UpdateResponse::UpdateResponseUnion_case() const {
  return UpdateResponse::UpdateResponseUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActualRemoveRequest::kPathFieldNumber;
const int ActualRemoveRequest::kBeforeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualRemoveRequest::ActualRemoveRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualRemoveRequest)
}

void ActualRemoveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualRemoveRequest::ActualRemoveRequest(const ActualRemoveRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualRemoveRequest)
}

void ActualRemoveRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  before_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActualRemoveRequest::~ActualRemoveRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualRemoveRequest)
  SharedDtor();
}

void ActualRemoveRequest::SharedDtor() {
  path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  before_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ActualRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualRemoveRequest_descriptor_;
}

const ActualRemoveRequest& ActualRemoveRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

ActualRemoveRequest* ActualRemoveRequest::default_instance_ = NULL;

ActualRemoveRequest* ActualRemoveRequest::New(
    ::google::protobuf::Arena* arena) const {
  ActualRemoveRequest* n = new ActualRemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualRemoveRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  before_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ActualRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->path().data(),
              (int)this->path().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualRemoveRequest.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_before;
        break;
      }

      // optional string before = 2;
      case 2: {
        if (tag == 18) {
        parse_before:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_before()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->before().data(),
              (int)this->before().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.ActualRemoveRequest.before"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualRemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualRemoveRequest)
  return false;
#undef DO_
}

void ActualRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualRemoveRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->path(), output);
  }

  // optional string before = 2;
  if (this->before().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->before().data(),
        (int)this->before().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualRemoveRequest.before");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->before(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualRemoveRequest)
}

::google::protobuf::uint8*
ActualRemoveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->path().data(),
        (int)this->path().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualRemoveRequest.path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string before = 2;
  if (this->before().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->before().data(),
        (int)this->before().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.ActualRemoveRequest.before");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->before(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualRemoveRequest)
  return target;
}

int ActualRemoveRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(this->path());
  }

  // optional string before = 2;
  if (this->before().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->before());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualRemoveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualRemoveRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualRemoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualRemoveRequest)
    MergeFrom(*source);
  }
}

void ActualRemoveRequest::MergeFrom(const ActualRemoveRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.path().size() > 0) {
    path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  if (from.before().size() > 0) {
    before_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.before_);
  }
}

void ActualRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualRemoveRequest::CopyFrom(const ActualRemoveRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualRemoveRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualRemoveRequest::IsInitialized() const {
  return true;
}

void ActualRemoveRequest::Swap(ActualRemoveRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualRemoveRequest::InternalSwap(ActualRemoveRequest* other) {
  path_.Swap(&other->path_);
  before_.Swap(&other->before_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualRemoveRequest_descriptor_;
  metadata.reflection = ActualRemoveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualRemoveRequest

// optional string path = 1;
void ActualRemoveRequest::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualRemoveRequest::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualRemoveRequest.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualRemoveRequest::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}
void ActualRemoveRequest::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}
void ActualRemoveRequest::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}
::std::string* ActualRemoveRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualRemoveRequest.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualRemoveRequest::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualRemoveRequest.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualRemoveRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualRemoveRequest.path)
}

// optional string before = 2;
void ActualRemoveRequest::clear_before() {
  before_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActualRemoveRequest::before() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ActualRemoveRequest.before)
  return before_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualRemoveRequest::set_before(const ::std::string& value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}
void ActualRemoveRequest::set_before(const char* value) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}
void ActualRemoveRequest::set_before(const char* value, size_t size) {
  before_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}
::std::string* ActualRemoveRequest::mutable_before() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ActualRemoveRequest.before)
  return before_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActualRemoveRequest::release_before() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ActualRemoveRequest.before)

  return before_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActualRemoveRequest::set_allocated_before(::std::string* before) {
  if (before != NULL) {
  } else {
  }
  before_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), before);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ActualRemoveRequest.before)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveRequest::kActualRemoveRequestFieldNumber;
const int RemoveRequest::kCliResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveRequest::RemoveRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.RemoveRequest)
}

void RemoveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  RemoveRequest_default_oneof_instance_->actualremoverequest_ =
      const_cast<::devmand::channels::cli::plugin::ActualRemoveRequest*>(
          &::devmand::channels::cli::plugin::ActualRemoveRequest::
              default_instance());
  RemoveRequest_default_oneof_instance_->cliresponse_ =
      const_cast<::devmand::channels::cli::plugin::CliResponse*>(
          &::devmand::channels::cli::plugin::CliResponse::default_instance());
}

RemoveRequest::RemoveRequest(const RemoveRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.RemoveRequest)
}

void RemoveRequest::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_RemoveRequestUnion();
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.RemoveRequest)
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  if (has_RemoveRequestUnion()) {
    clear_RemoveRequestUnion();
  }
  if (this != default_instance_) {
  }
}

void RemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRequest_descriptor_;
}

const RemoveRequest& RemoveRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

RemoveRequest* RemoveRequest::default_instance_ = NULL;

RemoveRequest* RemoveRequest::New(::google::protobuf::Arena* arena) const {
  RemoveRequest* n = new RemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveRequest::clear_RemoveRequestUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.RemoveRequest)
  switch (RemoveRequestUnion_case()) {
    case kActualRemoveRequest: {
      delete RemoveRequestUnion_.actualremoverequest_;
      break;
    }
    case kCliResponse: {
      delete RemoveRequestUnion_.cliresponse_;
      break;
    }
    case REMOVEREQUESTUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REMOVEREQUESTUNION_NOT_SET;
}

void RemoveRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.RemoveRequest)
  clear_RemoveRequestUnion();
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.RemoveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.ActualRemoveRequest
      // actualRemoveRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualremoverequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_cliResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_cliResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_cliresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.RemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.RemoveRequest)
  return false;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.RemoveRequest)
  // optional .devmand.channels.cli.plugin.ActualRemoveRequest
  // actualRemoveRequest = 1;
  if (has_actualremoverequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *RemoveRequestUnion_.actualremoverequest_, output);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *RemoveRequestUnion_.cliresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.RemoveRequest)
}

::google::protobuf::uint8*
RemoveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.RemoveRequest)
  // optional .devmand.channels.cli.plugin.ActualRemoveRequest
  // actualRemoveRequest = 1;
  if (has_actualremoverequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *RemoveRequestUnion_.actualremoverequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
  if (has_cliresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *RemoveRequestUnion_.cliresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.RemoveRequest)
  return target;
}

int RemoveRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.RemoveRequest)
  int total_size = 0;

  switch (RemoveRequestUnion_case()) {
    // optional .devmand.channels.cli.plugin.ActualRemoveRequest
    // actualRemoveRequest = 1;
    case kActualRemoveRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *RemoveRequestUnion_.actualremoverequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
    case kCliResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *RemoveRequestUnion_.cliresponse_);
      break;
    }
    case REMOVEREQUESTUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.RemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RemoveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveRequest>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.RemoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.RemoveRequest)
    MergeFrom(*source);
  }
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.RemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.RemoveRequestUnion_case()) {
    case kActualRemoveRequest: {
      mutable_actualremoverequest()
          ->::devmand::channels::cli::plugin::ActualRemoveRequest::MergeFrom(
              from.actualremoverequest());
      break;
    }
    case kCliResponse: {
      mutable_cliresponse()
          ->::devmand::channels::cli::plugin::CliResponse::MergeFrom(
              from.cliresponse());
      break;
    }
    case REMOVEREQUESTUNION_NOT_SET: {
      break;
    }
  }
}

void RemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.RemoveRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.RemoveRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void RemoveRequest::InternalSwap(RemoveRequest* other) {
  std::swap(RemoveRequestUnion_, other->RemoveRequestUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRequest_descriptor_;
  metadata.reflection = RemoveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveRequest

// optional .devmand.channels.cli.plugin.ActualRemoveRequest actualRemoveRequest
// = 1;
bool RemoveRequest::has_actualremoverequest() const {
  return RemoveRequestUnion_case() == kActualRemoveRequest;
}
void RemoveRequest::set_has_actualremoverequest() {
  _oneof_case_[0] = kActualRemoveRequest;
}
void RemoveRequest::clear_actualremoverequest() {
  if (has_actualremoverequest()) {
    delete RemoveRequestUnion_.actualremoverequest_;
    clear_has_RemoveRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualRemoveRequest&
RemoveRequest::actualremoverequest() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
  return has_actualremoverequest()
      ? *RemoveRequestUnion_.actualremoverequest_
      : ::devmand::channels::cli::plugin::ActualRemoveRequest::
            default_instance();
}
::devmand::channels::cli::plugin::ActualRemoveRequest*
RemoveRequest::mutable_actualremoverequest() {
  if (!has_actualremoverequest()) {
    clear_RemoveRequestUnion();
    set_has_actualremoverequest();
    RemoveRequestUnion_.actualremoverequest_ =
        new ::devmand::channels::cli::plugin::ActualRemoveRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
  return RemoveRequestUnion_.actualremoverequest_;
}
::devmand::channels::cli::plugin::ActualRemoveRequest*
RemoveRequest::release_actualremoverequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
  if (has_actualremoverequest()) {
    clear_has_RemoveRequestUnion();
    ::devmand::channels::cli::plugin::ActualRemoveRequest* temp =
        RemoveRequestUnion_.actualremoverequest_;
    RemoveRequestUnion_.actualremoverequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoveRequest::set_allocated_actualremoverequest(
    ::devmand::channels::cli::plugin::ActualRemoveRequest*
        actualremoverequest) {
  clear_RemoveRequestUnion();
  if (actualremoverequest) {
    set_has_actualremoverequest();
    RemoveRequestUnion_.actualremoverequest_ = actualremoverequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveRequest.actualRemoveRequest)
}

// optional .devmand.channels.cli.plugin.CliResponse cliResponse = 2;
bool RemoveRequest::has_cliresponse() const {
  return RemoveRequestUnion_case() == kCliResponse;
}
void RemoveRequest::set_has_cliresponse() {
  _oneof_case_[0] = kCliResponse;
}
void RemoveRequest::clear_cliresponse() {
  if (has_cliresponse()) {
    delete RemoveRequestUnion_.cliresponse_;
    clear_has_RemoveRequestUnion();
  }
}
const ::devmand::channels::cli::plugin::CliResponse&
RemoveRequest::cliresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
  return has_cliresponse()
      ? *RemoveRequestUnion_.cliresponse_
      : ::devmand::channels::cli::plugin::CliResponse::default_instance();
}
::devmand::channels::cli::plugin::CliResponse*
RemoveRequest::mutable_cliresponse() {
  if (!has_cliresponse()) {
    clear_RemoveRequestUnion();
    set_has_cliresponse();
    RemoveRequestUnion_.cliresponse_ =
        new ::devmand::channels::cli::plugin::CliResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
  return RemoveRequestUnion_.cliresponse_;
}
::devmand::channels::cli::plugin::CliResponse*
RemoveRequest::release_cliresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
  if (has_cliresponse()) {
    clear_has_RemoveRequestUnion();
    ::devmand::channels::cli::plugin::CliResponse* temp =
        RemoveRequestUnion_.cliresponse_;
    RemoveRequestUnion_.cliresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoveRequest::set_allocated_cliresponse(
    ::devmand::channels::cli::plugin::CliResponse* cliresponse) {
  clear_RemoveRequestUnion();
  if (cliresponse) {
    set_has_cliresponse();
    RemoveRequestUnion_.cliresponse_ = cliresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveRequest.cliResponse)
}

bool RemoveRequest::has_RemoveRequestUnion() const {
  return RemoveRequestUnion_case() != REMOVEREQUESTUNION_NOT_SET;
}
void RemoveRequest::clear_has_RemoveRequestUnion() {
  _oneof_case_[0] = REMOVEREQUESTUNION_NOT_SET;
}
RemoveRequest::RemoveRequestUnionCase RemoveRequest::RemoveRequestUnion_case()
    const {
  return RemoveRequest::RemoveRequestUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActualRemoveResponse::ActualRemoveResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.ActualRemoveResponse)
}

void ActualRemoveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActualRemoveResponse::ActualRemoveResponse(const ActualRemoveResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.ActualRemoveResponse)
}

void ActualRemoveResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
}

ActualRemoveResponse::~ActualRemoveResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.ActualRemoveResponse)
  SharedDtor();
}

void ActualRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActualRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualRemoveResponse_descriptor_;
}

const ActualRemoveResponse& ActualRemoveResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

ActualRemoveResponse* ActualRemoveResponse::default_instance_ = NULL;

ActualRemoveResponse* ActualRemoveResponse::New(
    ::google::protobuf::Arena* arena) const {
  ActualRemoveResponse* n = new ActualRemoveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActualRemoveResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.ActualRemoveResponse)
}

bool ActualRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.ActualRemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.ActualRemoveResponse)
  return false;
#undef DO_
}

void ActualRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.ActualRemoveResponse)
}

::google::protobuf::uint8*
ActualRemoveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.ActualRemoveResponse)
  return target;
}

int ActualRemoveResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActualRemoveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ActualRemoveResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.ActualRemoveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.ActualRemoveResponse)
    MergeFrom(*source);
  }
}

void ActualRemoveResponse::MergeFrom(const ActualRemoveResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ActualRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ActualRemoveResponse::CopyFrom(const ActualRemoveResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.ActualRemoveResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ActualRemoveResponse::IsInitialized() const {
  return true;
}

void ActualRemoveResponse::Swap(ActualRemoveResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ActualRemoveResponse::InternalSwap(ActualRemoveResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActualRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualRemoveResponse_descriptor_;
  metadata.reflection = ActualRemoveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActualRemoveResponse

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveResponse::kCliRequestFieldNumber;
const int RemoveResponse::kActualRemoveResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveResponse::RemoveResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.RemoveResponse)
}

void RemoveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  RemoveResponse_default_oneof_instance_->clirequest_ =
      const_cast<::devmand::channels::cli::plugin::CliRequest*>(
          &::devmand::channels::cli::plugin::CliRequest::default_instance());
  RemoveResponse_default_oneof_instance_->actualremoveresponse_ =
      const_cast<::devmand::channels::cli::plugin::ActualRemoveResponse*>(
          &::devmand::channels::cli::plugin::ActualRemoveResponse::
              default_instance());
}

RemoveResponse::RemoveResponse(const RemoveResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.RemoveResponse)
}

void RemoveResponse::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_RemoveResponseUnion();
}

RemoveResponse::~RemoveResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.RemoveResponse)
  SharedDtor();
}

void RemoveResponse::SharedDtor() {
  if (has_RemoveResponseUnion()) {
    clear_RemoveResponseUnion();
  }
  if (this != default_instance_) {
  }
}

void RemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveResponse_descriptor_;
}

const RemoveResponse& RemoveResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_WriterPlugin_2eproto();
  return *default_instance_;
}

RemoveResponse* RemoveResponse::default_instance_ = NULL;

RemoveResponse* RemoveResponse::New(::google::protobuf::Arena* arena) const {
  RemoveResponse* n = new RemoveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveResponse::clear_RemoveResponseUnion() {
  // @@protoc_insertion_point(one_of_clear_start:devmand.channels.cli.plugin.RemoveResponse)
  switch (RemoveResponseUnion_case()) {
    case kCliRequest: {
      delete RemoveResponseUnion_.clirequest_;
      break;
    }
    case kActualRemoveResponse: {
      delete RemoveResponseUnion_.actualremoveresponse_;
      break;
    }
    case REMOVERESPONSEUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REMOVERESPONSEUNION_NOT_SET;
}

void RemoveResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.RemoveResponse)
  clear_RemoveResponseUnion();
}

bool RemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.RemoveResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_clirequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_actualRemoveResponse;
        break;
      }

      // optional .devmand.channels.cli.plugin.ActualRemoveResponse
      // actualRemoveResponse = 2;
      case 2: {
        if (tag == 18) {
        parse_actualRemoveResponse:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_actualremoveresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.RemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.RemoveResponse)
  return false;
#undef DO_
}

void RemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.RemoveResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *RemoveResponseUnion_.clirequest_, output);
  }

  // optional .devmand.channels.cli.plugin.ActualRemoveResponse
  // actualRemoveResponse = 2;
  if (has_actualremoveresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *RemoveResponseUnion_.actualremoveresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.RemoveResponse)
}

::google::protobuf::uint8*
RemoveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.RemoveResponse)
  // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
  if (has_clirequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            1, *RemoveResponseUnion_.clirequest_, false, target);
  }

  // optional .devmand.channels.cli.plugin.ActualRemoveResponse
  // actualRemoveResponse = 2;
  if (has_actualremoveresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
            2, *RemoveResponseUnion_.actualremoveresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.RemoveResponse)
  return target;
}

int RemoveResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.RemoveResponse)
  int total_size = 0;

  switch (RemoveResponseUnion_case()) {
    // optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
    case kCliRequest: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *RemoveResponseUnion_.clirequest_);
      break;
    }
    // optional .devmand.channels.cli.plugin.ActualRemoveResponse
    // actualRemoveResponse = 2;
    case kActualRemoveResponse: {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        *RemoveResponseUnion_.actualremoveresponse_);
      break;
    }
    case REMOVERESPONSEUNION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.RemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RemoveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const RemoveResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.RemoveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.RemoveResponse)
    MergeFrom(*source);
  }
}

void RemoveResponse::MergeFrom(const RemoveResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.RemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.RemoveResponseUnion_case()) {
    case kCliRequest: {
      mutable_clirequest()
          ->::devmand::channels::cli::plugin::CliRequest::MergeFrom(
              from.clirequest());
      break;
    }
    case kActualRemoveResponse: {
      mutable_actualremoveresponse()
          ->::devmand::channels::cli::plugin::ActualRemoveResponse::MergeFrom(
              from.actualremoveresponse());
      break;
    }
    case REMOVERESPONSEUNION_NOT_SET: {
      break;
    }
  }
}

void RemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.RemoveResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RemoveResponse::CopyFrom(const RemoveResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.RemoveResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool RemoveResponse::IsInitialized() const {
  return true;
}

void RemoveResponse::Swap(RemoveResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void RemoveResponse::InternalSwap(RemoveResponse* other) {
  std::swap(RemoveResponseUnion_, other->RemoveResponseUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveResponse_descriptor_;
  metadata.reflection = RemoveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveResponse

// optional .devmand.channels.cli.plugin.CliRequest cliRequest = 1;
bool RemoveResponse::has_clirequest() const {
  return RemoveResponseUnion_case() == kCliRequest;
}
void RemoveResponse::set_has_clirequest() {
  _oneof_case_[0] = kCliRequest;
}
void RemoveResponse::clear_clirequest() {
  if (has_clirequest()) {
    delete RemoveResponseUnion_.clirequest_;
    clear_has_RemoveResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::CliRequest& RemoveResponse::clirequest()
    const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
  return has_clirequest()
      ? *RemoveResponseUnion_.clirequest_
      : ::devmand::channels::cli::plugin::CliRequest::default_instance();
}
::devmand::channels::cli::plugin::CliRequest*
RemoveResponse::mutable_clirequest() {
  if (!has_clirequest()) {
    clear_RemoveResponseUnion();
    set_has_clirequest();
    RemoveResponseUnion_.clirequest_ =
        new ::devmand::channels::cli::plugin::CliRequest;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
  return RemoveResponseUnion_.clirequest_;
}
::devmand::channels::cli::plugin::CliRequest*
RemoveResponse::release_clirequest() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
  if (has_clirequest()) {
    clear_has_RemoveResponseUnion();
    ::devmand::channels::cli::plugin::CliRequest* temp =
        RemoveResponseUnion_.clirequest_;
    RemoveResponseUnion_.clirequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoveResponse::set_allocated_clirequest(
    ::devmand::channels::cli::plugin::CliRequest* clirequest) {
  clear_RemoveResponseUnion();
  if (clirequest) {
    set_has_clirequest();
    RemoveResponseUnion_.clirequest_ = clirequest;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveResponse.cliRequest)
}

// optional .devmand.channels.cli.plugin.ActualRemoveResponse
// actualRemoveResponse = 2;
bool RemoveResponse::has_actualremoveresponse() const {
  return RemoveResponseUnion_case() == kActualRemoveResponse;
}
void RemoveResponse::set_has_actualremoveresponse() {
  _oneof_case_[0] = kActualRemoveResponse;
}
void RemoveResponse::clear_actualremoveresponse() {
  if (has_actualremoveresponse()) {
    delete RemoveResponseUnion_.actualremoveresponse_;
    clear_has_RemoveResponseUnion();
  }
}
const ::devmand::channels::cli::plugin::ActualRemoveResponse&
RemoveResponse::actualremoveresponse() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
  return has_actualremoveresponse()
      ? *RemoveResponseUnion_.actualremoveresponse_
      : ::devmand::channels::cli::plugin::ActualRemoveResponse::
            default_instance();
}
::devmand::channels::cli::plugin::ActualRemoveResponse*
RemoveResponse::mutable_actualremoveresponse() {
  if (!has_actualremoveresponse()) {
    clear_RemoveResponseUnion();
    set_has_actualremoveresponse();
    RemoveResponseUnion_.actualremoveresponse_ =
        new ::devmand::channels::cli::plugin::ActualRemoveResponse;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
  return RemoveResponseUnion_.actualremoveresponse_;
}
::devmand::channels::cli::plugin::ActualRemoveResponse*
RemoveResponse::release_actualremoveresponse() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
  if (has_actualremoveresponse()) {
    clear_has_RemoveResponseUnion();
    ::devmand::channels::cli::plugin::ActualRemoveResponse* temp =
        RemoveResponseUnion_.actualremoveresponse_;
    RemoveResponseUnion_.actualremoveresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoveResponse::set_allocated_actualremoveresponse(
    ::devmand::channels::cli::plugin::ActualRemoveResponse*
        actualremoveresponse) {
  clear_RemoveResponseUnion();
  if (actualremoveresponse) {
    set_has_actualremoveresponse();
    RemoveResponseUnion_.actualremoveresponse_ = actualremoveresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.RemoveResponse.actualRemoveResponse)
}

bool RemoveResponse::has_RemoveResponseUnion() const {
  return RemoveResponseUnion_case() != REMOVERESPONSEUNION_NOT_SET;
}
void RemoveResponse::clear_has_RemoveResponseUnion() {
  _oneof_case_[0] = REMOVERESPONSEUNION_NOT_SET;
}
RemoveResponse::RemoveResponseUnionCase
RemoveResponse::RemoveResponseUnion_case() const {
  return RemoveResponse::RemoveResponseUnionCase(_oneof_case_[0]);
}
#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)
