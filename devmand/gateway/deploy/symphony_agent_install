#!/bin/bash
# This script is meant to be executed with curl for easy installations of
# symphony agent on any box with a standard Unix shell environment. E.g if you
# support LSB, GNU core utils or BusyBox you should be find as long as you have
# bash installed. It will walk you through the instalation process. To install
# execute:
#   source <(curl -sL https://raw.githubusercontent.com/facebookincubator/magma/devmand/gateway/deploy/symphony_agent_install)

set -e

RESET="[0m"
BLUE="[0;30;34m"
GREEN="[0;30;32m"
RED="[0;30;31m"

symphony_registry="facebookconnectivity-southpoll-dev-docker.jfrog.io"
symphony_repo="https://raw.githubusercontent.com/facebookincubator/magma"
symphony_cloud="controller.magma.etagecom.io"
symphony_cloud_bootstrap="bootstrapper-controller.magma.etagecom.io"
symphony_agent_compose="${symphony_repo}/master/devmand/gateway/docker/docker-compose.yml"

###############################################################################
cat <<\EOF


SYMPHONY AGENT


EOF

if [ "${1}" == "--upgrade" ] ; then
  docker login "${symphony_registry}"
  docker pull "${symphony_registry}/symphony-agent"
  docker logout "${symphony_registry}/symphony-agent"
  exit
fi

echo "${BLUE}Installing Symphony Agent...${RESET}"

###############################################################################
if ! type docker-compose > /dev/null 2>&1 ; then
  echo "${GREEN}I need to install docker and docker-compose on your system.${RESET}"
  read -t 60 -p "${GREEN}Is it ok to install these?${RESET} " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
    exit 1
  fi
fi

###############################################################################
echo "${BLUE}Determining OS distribution...${RESET}"
if type lsb_release > /dev/null 2>&1 ; then
  dist=$(lsb_release -a | grep "Distributor ID" | awk '{print tolower($3)}')
fi

if [ -z "${dist+x}" ] && [ -f /etc/redhat-release ] ; then
  if grep -q Fedora /etc/redhat-release; then
    dist=fedora
  fi

  if grep -q CentOS /etc/redhat-release; then
    dist=centos
  fi
fi

if [ -z "${dist+x}" ] && [ -f /etc/debian_version ] ; then
  dist=debian
fi

if [ -z "${dist+x}" ] && [ -f /etc/os-release ] ; then
  dist="unknown"
fi

if [ -z "${dist+x}" ] ; then
  dist=$(uname -a)
fi

###############################################################################
echo "${BLUE}The OS distribution you are running is ${dist}.${RESET}"
case "$dist" in
  *centos*)
    if ! type docker-compose > /dev/null 2>&1 ; then
      sudo yum install -q -y docker
      sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      sudo chmod +x /usr/local/bin/docker-compose
      sudo systemctl enable docker
      sudo systemctl start docker
    fi

    for eth in /sys/class/net/ens*/address ; do
      uid="$(sed 's/://g' "${eth}")"
      break
    done
    ;;
  *redhat*)
    echo "${RED}This is an untested distro!${RESET}"
    # redhat?
    # https://computingforgeeks.com/install-docker-and-docker-compose-on-rhel-8-centos-8/
    sudo yum install -q -y docker-compose
    ;;
  *fedora*)
    if ! type docker-compose > /dev/null 2>&1 ; then
      version=$(sed -rn 's/VERSION_ID=(.*)/\1/p' /etc/os-release | sed 's/"//g')
      if [ "$version" -ge "22" ]; then
        sudo dnf install -q -y docker-compose
      fi
    fi

    for eth in /sys/class/net/enp*s*/address ; do
      uid="$(sed 's/://g' "${eth}")"
      break
    done
    ;;
  *Darwin*)
    echo "${RED}This is an untested distro!${RESET}"
    if ! type docker-compose > /dev/null 2>&1 ; then
      sudo brew install -q -y docker-compose
    fi
    uid=$(system_profiler SPHardwareDataType | \
      awk '/Hardware UUID: / {print tolower($3)}'| tail -c 13)
    ;;
  *debian*|*ubuntu*)
    # NOTE: docker and docker-compose need to be installed directly from docker - the "apt" package
    # is broken for now. Once it's fixed, we can remove this warning. Link to the issues:
    # https://bugs.launchpad.net/ubuntu/+source/golang-github-docker-docker-credential-helpers/+bug/1794307
    # https://github.com/docker/compose/issues/6023

    docker_links="\n\tdocker: https://docs.docker.com/install/linux/docker-ce/ubuntu/"
    docker_links+="\n\tdocker-compose: https://docs.docker.com/compose/install/"

    # they don't have docker or docker-compose installed
    if ! type docker-compose > /dev/null 2>&1 || ! type docker > /dev/null 2>&1 ; then
      echo -e "${RED}docker and docker-compose must be installed via docker's official" \
        "instructions.${docker_links} ${RESET} "
      exit 1
    fi

    # make sure they installed docker via the official instructions (not apt)
    # use || true to avoid exit because of `set -e`
    docker_ce_count=$(dpkg -l | grep -c "docker-ce") || true
    if [[ $docker_ce_count -eq 0 ]] ; then
      echo -e "${RED}You have docker and docker-compose but installed via apt-get."\
        "\nThe apt package currently does not work."\
        "\nPlease uninstall them and re-install from the official docker instructions at:"\
        "${docker_links} ${RESET}"
      exit 1
    fi
    
    # generate a UID
    if [ "$dist" == "debian" ] ; then
      mac_addr_file="/sys/class/net/eth*/address"
    else
      mac_addr_file="/sys/class/net/ens*/address"
    fi

    for eth in $mac_addr_file ; do
      uid="$(sed 's/://g' "${eth}")"
      break
    done
    ;;
  *)
    if ! type docker-compose > /dev/null 2>&1 ; then
      echo "${RED}I don't know this distribution and you don't have docker-compose installed!${RESET}"
      exit 1
    else
      echo "${RED}I don't know this distribution but you have docker-compose installed!"
      echo "I'm going to assume this works.${RESET}"
      uid="0bad0badbeef"
    fi
    ;;
esac

###############################################################################
echo -n "${GREEN}Do you want to connect your symphony agent to the symphony cloud? (y/n)${RESET} "
read -t 60 -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
  echo -n "${GREEN}To what cloud address do you want to connect your symphony agent to?${RESET} "
  read -t 60 -r
  CLOUD_ADDRESS="$REPLY"

  echo -n "${GREEN}To what bootstrap cloud address do you want to connect your symphony agent to?${RESET} "
  read -t 60 -r
  BOOTSTRAP_CLOUD_ADDRESS="$REPLY"
else
  CLOUD_ADDRESS="${symphony_cloud}"
  BOOTSTRAP_CLOUD_ADDRESS="${symphony_cloud_bootstrap}"
fi

###############################################################################

echo "${GREEN}I need a unique id which will identify your device in the cloud.${RESET}"
read -t 60 -p "${GREEN}Do you want to auto-generated one? (y/n)${RESET} " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]] ; then
  SNOWFLAKE="faceb00c-face-b00c-face-${uid}"
else
  echo "${GREEN}Please provide a UID in the format:${RESET}"
  echo -e "${GREEN}\t0000000-0000-0000-0000-000000000000${RESET}"
  echo -n "${GREEN}These zeros may be any hex character:${RESET} "
  read -t 60 -r
  SNOWFLAKE="$REPLY"
  if [[ ! "${SNOWFLAKE}" =~ ^[0-9a-fA-F]{7}+-[0-9a-fA-F]{4}+-[0-9a-fA-F]{4}+-[0-9a-fA-F]{4}+-[0-9a-fA-F]{12}+$ ]] ; then
    echo "${RED}The UID provided was not in the correct format.${RESET}"
    exit 1
  fi
fi

###############################################################################
# TODO make this a cmd line arg
HOST_PUBLIC_ADDRESS=$(curl -s -4 h.facebook.com/diagnostics | \
    grep HTTP_TFB_ORIG_CLIENT_IP | cut -d " " -f2)

###############################################################################
cat << EOF > docker-compose.override.yml
version: '3.7'
services:
  symphony-agent:
    volumes:
      - $PWD/rootCA.pem:/var/opt/magma/certs/rootCA.pem:ro
    environment:
      - SNOWFLAKE=${SNOWFLAKE}
      - CLOUD_ADDRESS=${CLOUD_ADDRESS}
      - BOOTSTRAP_CLOUD_ADDRESS=${BOOTSTRAP_CLOUD_ADDRESS}
      - LOG_CLOUD_ADDRESS=${LOG_CLOUD_ADDRESS}
      - LOG_CLOUD_PORT=${LOG_CLOUD_PORT}
      - DEVICE_CONFIG_FILE=/var/opt/magma/configs/gateway.mconfig
      - HOST_PUBLIC_ADDRESS=${HOST_PUBLIC_ADDRESS}
EOF

###############################################################################
if type curl > /dev/null 2>&1 ; then
  curl -sL ${symphony_agent_compose} -o docker-compose.yml
elif type wget > /dev/null 2>&1 ; then
  wget -O docker-compose.yml -q -N --timeout=10 --tries=3 --no-check-certificate ${symphony_agent_compose}
else
  echo "${RED}Either wget or curl needs to be installed as I can't download the symphony agent compose file.${RESET}"
  exit 1
fi

if [ ! -f rootCA.pem ] ; then
  echo "${RED}Please copy a rootCA.pem file for the cloud to this directory.${RESET}"
  exit 1
fi

###############################################################################
echo "${GREEN}Please enter your provided symphony docker registry username and password:${RESET}"
docker login "${symphony_registry}"
docker pull "${symphony_registry}/symphony-agent"
docker logout "${symphony_registry}/symphony-agent"

###############################################################################
echo "${GREEN}Your symphony agent is now installed!${RESET}"
echo "${GREEN}Run 'docker-compose up -d' from this directory to start it.${RESET}"
echo "${GREEN}And ensure you register it with the cloud!${RESET}"
echo "${GREEN}TCP ports 443, 9442, 9443, and 9444 must be open to both cloud addresses.${RESET}"
