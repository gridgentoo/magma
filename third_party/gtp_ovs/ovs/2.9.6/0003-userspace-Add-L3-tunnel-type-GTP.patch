From ed3035b1e49cdc336f4089e7e2838c7b1401bd12 Mon Sep 17 00:00:00 2001
From: Pravin B Shelar <pbshelar@fb.com>
Date: Thu, 30 Jan 2020 06:18:02 +0000
Subject: [PATCH 3/4] userspace: Add L3 tunnel type GTP

Userspace support for L3 vport type OVS_VPORT_TYPE_GTP

Signed-off-by: Jiannan Ouyang <ouyangj@fb.com>
Signed-off-by: Pravin B Shelar <pbshelar@fb.com>
---
 lib/dpif-netlink-rtnl.c      |  7 +++++++
 lib/dpif-netlink.c           |  5 +++++
 lib/netdev-vport.c           | 14 ++++++++++++--
 ofproto/ofproto-dpif-ipfix.c |  6 ++++++
 ofproto/ofproto-dpif-sflow.c |  6 +++++-
 ofproto/ofproto-dpif-xlate.c |  1 +
 vswitchd/vswitch.xml         | 16 ++++++++++++++++
 7 files changed, 52 insertions(+), 3 deletions(-)

diff --git a/lib/dpif-netlink-rtnl.c b/lib/dpif-netlink-rtnl.c
index 40c456951..e3c3f3048 100644
--- a/lib/dpif-netlink-rtnl.c
+++ b/lib/dpif-netlink-rtnl.c
@@ -99,6 +99,8 @@ vport_type_to_kind(enum ovs_vport_type type,
         }
     case OVS_VPORT_TYPE_GENEVE:
         return "geneve";
+    case OVS_VPORT_TYPE_GTP:
+        return "gtp";
     case OVS_VPORT_TYPE_NETDEV:
     case OVS_VPORT_TYPE_INTERNAL:
     case OVS_VPORT_TYPE_LISP:
@@ -258,6 +260,9 @@ dpif_netlink_rtnl_verify(const struct netdev_tunnel_config *tnl_cfg,
     case OVS_VPORT_TYPE_GENEVE:
         err = dpif_netlink_rtnl_geneve_verify(tnl_cfg, kind, reply);
         break;
+    case OVS_VPORT_TYPE_GTP:
+        err = EOPNOTSUPP;
+        break;
     case OVS_VPORT_TYPE_NETDEV:
     case OVS_VPORT_TYPE_INTERNAL:
     case OVS_VPORT_TYPE_LISP:
@@ -328,6 +333,7 @@ dpif_netlink_rtnl_create(const struct netdev_tunnel_config *tnl_cfg,
     case OVS_VPORT_TYPE_LISP:
     case OVS_VPORT_TYPE_STT:
     case OVS_VPORT_TYPE_UNSPEC:
+    case OVS_VPORT_TYPE_GTP:
     case __OVS_VPORT_TYPE_MAX:
     default:
         err = EOPNOTSUPP;
@@ -434,6 +440,7 @@ dpif_netlink_rtnl_port_destroy(const char *name, const char *type)
     case OVS_VPORT_TYPE_GRE:
     case OVS_VPORT_TYPE_GENEVE:
         return dpif_netlink_rtnl_destroy(name);
+    case OVS_VPORT_TYPE_GTP:
     case OVS_VPORT_TYPE_NETDEV:
     case OVS_VPORT_TYPE_INTERNAL:
     case OVS_VPORT_TYPE_LISP:
diff --git a/lib/dpif-netlink.c b/lib/dpif-netlink.c
index ab0448260..356a4e259 100644
--- a/lib/dpif-netlink.c
+++ b/lib/dpif-netlink.c
@@ -677,6 +677,9 @@ get_vport_type(const struct dpif_netlink_vport *vport)
     case OVS_VPORT_TYPE_GRE:
         return "gre";
 
+    case OVS_VPORT_TYPE_GTP:
+        return "gtp";
+
     case OVS_VPORT_TYPE_VXLAN:
         return "vxlan";
 
@@ -709,6 +712,8 @@ netdev_to_ovs_vport_type(const char *type)
         return OVS_VPORT_TYPE_GENEVE;
     } else if (strstr(type, "gre")) {
         return OVS_VPORT_TYPE_GRE;
+    } else if (strstr(type, "gtp")) {
+        return OVS_VPORT_TYPE_GTP;
     } else if (!strcmp(type, "vxlan")) {
         return OVS_VPORT_TYPE_VXLAN;
     } else if (!strcmp(type, "lisp")) {
diff --git a/lib/netdev-vport.c b/lib/netdev-vport.c
index 52aa12d79..caab50e94 100644
--- a/lib/netdev-vport.c
+++ b/lib/netdev-vport.c
@@ -55,6 +55,7 @@ VLOG_DEFINE_THIS_MODULE(netdev_vport);
 
 #define GENEVE_DST_PORT 6081
 #define VXLAN_DST_PORT 4789
+#define GTP_DST_PORT 2152
 #define LISP_DST_PORT 4341
 #define STT_DST_PORT 7471
 
@@ -107,7 +108,8 @@ netdev_vport_needs_dst_port(const struct netdev *dev)
 
     return (class->get_config == get_tunnel_config &&
             (!strcmp("geneve", type) || !strcmp("vxlan", type) ||
-             !strcmp("lisp", type) || !strcmp("stt", type)) );
+             !strcmp("gtp", type) || !strcmp("lisp", type) ||
+             !strcmp("stt", type)) );
 }
 
 const char *
@@ -195,6 +197,8 @@ netdev_vport_construct(struct netdev *netdev_)
         dev->tnl_cfg.dst_port = htons(GENEVE_DST_PORT);
     } else if (!strcmp(type, "vxlan")) {
         dev->tnl_cfg.dst_port = htons(VXLAN_DST_PORT);
+    } else if (!strcmp(type, "gtp")) {
+        dev->tnl_cfg.dst_port = htons(GTP_DST_PORT);
     } else if (!strcmp(type, "lisp")) {
         dev->tnl_cfg.dst_port = htons(LISP_DST_PORT);
     } else if (!strcmp(type, "stt")) {
@@ -404,7 +408,7 @@ static enum tunnel_layers
 tunnel_supported_layers(const char *type,
                         const struct netdev_tunnel_config *tnl_cfg)
 {
-    if (!strcmp(type, "lisp")) {
+    if (!strcmp(type, "lisp") || !strcmp(type, "gtp")) {
         return TNL_L3;
     } else if (!strcmp(type, "gre")) {
         return TNL_L2 | TNL_L3;
@@ -447,6 +451,10 @@ set_tunnel_config(struct netdev *dev_, const struct smap *args, char **errp)
         tnl_cfg.dst_port = htons(VXLAN_DST_PORT);
     }
 
+    if (!strcmp(type, "gtp")) {
+        tnl_cfg.dst_port = htons(GTP_DST_PORT);
+    }
+
     if (!strcmp(type, "lisp")) {
         tnl_cfg.dst_port = htons(LISP_DST_PORT);
     }
@@ -699,6 +707,7 @@ get_tunnel_config(const struct netdev *dev, struct smap *args)
 
         if ((!strcmp("geneve", type) && dst_port != GENEVE_DST_PORT) ||
             (!strcmp("vxlan", type) && dst_port != VXLAN_DST_PORT) ||
+            (!strcmp("gtp", type) && dst_port != GTP_DST_PORT) ||
             (!strcmp("lisp", type) && dst_port != LISP_DST_PORT) ||
             (!strcmp("stt", type) && dst_port != STT_DST_PORT)) {
             smap_add_format(args, "dst_port", "%d", dst_port);
@@ -977,6 +986,7 @@ netdev_vport_tunnel_register(void)
                                            netdev_tnl_push_udp_header,
                                            netdev_vxlan_pop_header,
                                            NETDEV_VPORT_GET_IFINDEX),
+        TUNNEL_CLASS("gtp", "gtp_sys", NULL, NULL, NULL, NULL),
         TUNNEL_CLASS("lisp", "lisp_sys", NULL, NULL, NULL, NULL),
         TUNNEL_CLASS("stt", "stt_sys", NULL, NULL, NULL, NULL),
     };
diff --git a/ofproto/ofproto-dpif-ipfix.c b/ofproto/ofproto-dpif-ipfix.c
index b00223d9a..c9a1fffe3 100644
--- a/ofproto/ofproto-dpif-ipfix.c
+++ b/ofproto/ofproto-dpif-ipfix.c
@@ -87,6 +87,7 @@ enum dpif_ipfix_tunnel_type {
     DPIF_IPFIX_TUNNEL_LISP = 0x03,
     DPIF_IPFIX_TUNNEL_STT = 0x04,
     DPIF_IPFIX_TUNNEL_GENEVE = 0x07,
+    DPIF_IPFIX_TUNNEL_GTP = 0x08,
     NUM_DPIF_IPFIX_TUNNEL
 };
 
@@ -388,6 +389,7 @@ static uint8_t tunnel_protocol[NUM_DPIF_IPFIX_TUNNEL] = {
     IPPROTO_TCP,    /* DPIF_IPFIX_TUNNEL_STT*/
     0          ,    /* reserved */
     IPPROTO_UDP,    /* DPIF_IPFIX_TUNNEL_GENEVE*/
+    IPPROTO_UDP,    /* DPIF_IPFIX_TUNNEL_GTP*/
 };
 
 OVS_PACKED(
@@ -508,6 +510,7 @@ BUILD_ASSERT_DECL(sizeof(struct ipfix_data_record_aggregated_tcp) == 48);
  * support tunnel key for:
  * VxLAN: 24-bit VIN,
  * GRE: 32-bit key,
+ * GTP: 32-bit key,
  * LISP: 24-bit instance ID
  * STT: 64-bit key
  */
@@ -806,6 +809,8 @@ dpif_ipfix_tunnel_type(const struct ofport *ofport)
         return DPIF_IPFIX_TUNNEL_VXLAN;
     } else if (strcmp(type, "lisp") == 0) {
         return DPIF_IPFIX_TUNNEL_LISP;
+    } else if (strcmp(type, "gtp") == 0) {
+        return DPIF_IPFIX_TUNNEL_GTP;
     } else if (strcmp(type, "geneve") == 0) {
         return DPIF_IPFIX_TUNNEL_GENEVE;
     } else if (strcmp(type, "stt") == 0) {
@@ -821,6 +826,7 @@ dpif_ipfix_tunnel_key_length(enum dpif_ipfix_tunnel_type tunnel_type)
 
     switch (tunnel_type) {
         case DPIF_IPFIX_TUNNEL_GRE:
+	case DPIF_IPFIX_TUNNEL_GTP:
             /* 32-bit key gre */
             return 4;
         case DPIF_IPFIX_TUNNEL_VXLAN:
diff --git a/ofproto/ofproto-dpif-sflow.c b/ofproto/ofproto-dpif-sflow.c
index 5d8c0e19f..9061b008c 100644
--- a/ofproto/ofproto-dpif-sflow.c
+++ b/ofproto/ofproto-dpif-sflow.c
@@ -61,7 +61,8 @@ enum dpif_sflow_tunnel_type {
     DPIF_SFLOW_TUNNEL_VXLAN,
     DPIF_SFLOW_TUNNEL_GRE,
     DPIF_SFLOW_TUNNEL_LISP,
-    DPIF_SFLOW_TUNNEL_GENEVE
+    DPIF_SFLOW_TUNNEL_GENEVE,
+    DPIF_SFLOW_TUNNEL_GTP
 };
 
 struct dpif_sflow_port {
@@ -610,6 +611,8 @@ dpif_sflow_tunnel_type(struct ofport *ofport) {
 	    return DPIF_SFLOW_TUNNEL_VXLAN;
 	} else if (strcmp(type, "lisp") == 0) {
 	    return DPIF_SFLOW_TUNNEL_LISP;
+	} else if (strcmp(type, "gtp") == 0) {
+	    return DPIF_SFLOW_TUNNEL_GTP;
 	} else if (strcmp(type, "geneve") == 0) {
 	    return DPIF_SFLOW_TUNNEL_GENEVE;
 	}
@@ -630,6 +633,7 @@ dpif_sflow_tunnel_proto(enum dpif_sflow_tunnel_type tunnel_type)
 
     case DPIF_SFLOW_TUNNEL_VXLAN:
     case DPIF_SFLOW_TUNNEL_LISP:
+    case DPIF_SFLOW_TUNNEL_GTP:
     case DPIF_SFLOW_TUNNEL_GENEVE:
         ipproto = IPPROTO_UDP;
 
diff --git a/ofproto/ofproto-dpif-xlate.c b/ofproto/ofproto-dpif-xlate.c
index e1b9bf613..ab05e0384 100644
--- a/ofproto/ofproto-dpif-xlate.c
+++ b/ofproto/ofproto-dpif-xlate.c
@@ -3348,6 +3348,7 @@ propagate_tunnel_data_to_flow(struct xlate_ctx *ctx, struct eth_addr dmac,
         break;
     case OVS_VPORT_TYPE_VXLAN:
     case OVS_VPORT_TYPE_GENEVE:
+    case OVS_VPORT_TYPE_GTP:
         nw_proto = IPPROTO_UDP;
         break;
     case OVS_VPORT_TYPE_LISP:
diff --git a/vswitchd/vswitch.xml b/vswitchd/vswitch.xml
index ce3df334b..4bd505430 100644
--- a/vswitchd/vswitch.xml
+++ b/vswitchd/vswitch.xml
@@ -2255,6 +2255,22 @@
             </p>
           </dd>
 
+          <dt><code>gtp</code></dt>
+          <dd>
+              GPRS Tunneling Protocol (GTP) is a group of IP-based communications
+              protocols used to carry general packet radio service (GPRS) within GSM,
+              UMTS and LTE networks. GTP-U is used for carrying user data within the GPRS
+              core network and between the radio access network and the core network.
+              The user data transported can be packets in any of IPv4, IPv6, or PPP
+              formats.
+
+              The protocol is documented at http://www.3gpp.org/DynaReport/29281.htm
+
+              Open vSwitch uses UDP destination port 2152. The source port used for
+              GTP traffic varies on a per-flow basis and is in the ephemeral port
+              range.
+          </dd>
+
           <dt><code>stt</code></dt>
           <dd>
             The Stateless TCP Tunnel (STT) is particularly useful when tunnel
-- 
2.17.1

