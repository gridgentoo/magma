From d477f2f1d0add11e6fccec607454d0716a20c655 Mon Sep 17 00:00:00 2001
From: magma <magma@debian>
Date: Fri, 12 Jul 2019 23:08:47 +0000
Subject: [PATCH 4/4] Linux compat fixes

---
 acinclude.m4                               |  4 ++
 datapath/linux/compat/nf_conntrack_reasm.c | 86 +++++++++++++++++++++++++++---
 2 files changed, 84 insertions(+), 6 deletions(-)

diff --git a/acinclude.m4 b/acinclude.m4
index 103e73003..2f8525626 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -765,6 +765,10 @@ AC_DEFUN([OVS_CHECK_LINUX_COMPAT], [
                         [OVS_DEFINE([HAVE_NEEDS_FREE_NETDEV])])
   OVS_FIND_FIELD_IFELSE([$KSRC/include/net/vxlan.h], [vxlan_dev], [cfg],
                         [OVS_DEFINE([HAVE_VXLAN_DEV_CFG])])
+  OVS_GREP_IFELSE([$KSRC/include/net/ipv6_frag.h], [IP6_DEFRAG_CONNTRACK_IN],
+                  [OVS_DEFINE([HAVE_IPV6_FRAG_H])])
+  OVS_FIND_FIELD_IFELSE([$KSRC/include/net/inet_frag.h], [inet_frags],
+                        [rnd], [OVS_DEFINE([HAVE_INET_FRAGS_RND])])
   OVS_GREP_IFELSE([$KSRC/include/net/netfilter/nf_conntrack_helper.h],
                   [nf_conntrack_helper_put],
                   [OVS_DEFINE(HAVE_NF_CONNTRACK_HELPER_PUT)])
diff --git a/datapath/linux/compat/nf_conntrack_reasm.c b/datapath/linux/compat/nf_conntrack_reasm.c
index ea153c3c5..e837f4a23 100644
--- a/datapath/linux/compat/nf_conntrack_reasm.c
+++ b/datapath/linux/compat/nf_conntrack_reasm.c
@@ -99,12 +99,13 @@ static inline u8 ip6_frag_ecn(const struct ipv6hdr *ipv6h)
 	return 1 << (ipv6_get_dsfield(ipv6h) & INET_ECN_MASK);
 }
 
+#ifdef HAVE_INET_FRAGS_RND
 static unsigned int nf_hash_frag(__be32 id, const struct in6_addr *saddr,
-				 const struct in6_addr *daddr)
+		const struct in6_addr *daddr)
 {
 	net_get_random_once(&nf_frags.rnd, sizeof(nf_frags.rnd));
 	return jhash_3words(ipv6_addr_hash(saddr), ipv6_addr_hash(daddr),
-			    (__force u32)id, nf_frags.rnd);
+			(__force u32)id, nf_frags.rnd);
 }
 /* fb3cfe6e75b9 ("inet: frag: remove hash size assumptions from callers")
  * shifted this logic into inet_fragment, but prior kernels still need this.
@@ -125,6 +126,8 @@ static unsigned int nf_hashfn(struct inet_frag_queue *q)
 	return nf_hash_frag(nq->id, &nq->saddr, &nq->daddr);
 }
 
+#endif /* HAVE_INET_FRAGS_RND */
+
 static void nf_ct_frag6_expire(unsigned long data)
 {
 	struct frag_queue *fq;
@@ -132,10 +135,18 @@ static void nf_ct_frag6_expire(unsigned long data)
 
 	fq = container_of((struct inet_frag_queue *)data, struct frag_queue, q);
 	net = get_net_from_netns_frags6(fq->q.net);
-
+#ifdef HAVE_INET_FRAGS_RND
 	ip6_expire_frag_queue(net, fq, &nf_frags);
+#else
+#ifdef HAVE_IPV6_FRAG_H
+	ip6frag_expire_frag_queue(net, fq);
+#else
+	ip6_expire_frag_queue(net, fq);
+#endif
+#endif
 }
 
+#ifdef HAVE_INET_FRAGS_RND
 /* Creation primitives. */
 static inline struct frag_queue *fq_find(struct net *net, __be32 id,
 					 u32 user, struct in6_addr *src,
@@ -168,6 +179,29 @@ static inline struct frag_queue *fq_find(struct net *net, __be32 id,
 	}
 	return container_of(q, struct frag_queue, q);
 }
+#else
+
+static struct frag_queue *fq_find(struct net *net, __be32 id, u32 user,
+		const struct ipv6hdr *hdr, int iif)
+{
+	struct frag_v6_compare_key key = {
+		.id = id,
+		.saddr = hdr->saddr,
+		.daddr = hdr->daddr,
+		.user = user,
+		.iif = iif,
+	};
+	struct inet_frag_queue *q;
+
+	q = inet_frag_find(&net->nf_frag.frags, &key);
+	if (!q)
+		return NULL;
+
+	return container_of(q, struct frag_queue, q);
+}
+
+#endif  /* HAVE_INET_FRAGS_RND */
+
 
 
 static int nf_ct_frag6_queue(struct frag_queue *fq, struct sk_buff *skb,
@@ -317,7 +351,11 @@ found:
 	return 0;
 
 discard_fq:
+#ifdef HAVE_INET_FRAGS_RND
 	inet_frag_kill(&fq->q, &nf_frags);
+#else
+	inet_frag_kill(&fq->q);
+#endif
 err:
 	return -1;
 }
@@ -339,7 +377,11 @@ nf_ct_frag6_reasm(struct frag_queue *fq, struct sk_buff *prev,  struct net_devic
 	int    payload_len;
 	u8 ecn;
 
+#ifdef HAVE_INET_FRAGS_RND
 	inet_frag_kill(&fq->q, &nf_frags);
+#else
+	inet_frag_kill(&fq->q);
+#endif
 
 	WARN_ON(head == NULL);
 	WARN_ON(NFCT_FRAG6_CB(head)->offset != 0);
@@ -561,8 +603,13 @@ int rpl_nf_ct_frag6_gather(struct net *net, struct sk_buff *skb, u32 user)
 #endif
 
 	skb_orphan(skb);
+#ifdef HAVE_INET_FRAGS_RND
 	fq = fq_find(net, fhdr->identification, user, &hdr->saddr, &hdr->daddr,
-		     ip6_frag_ecn(hdr));
+			ip6_frag_ecn(hdr));
+#else
+	fq = fq_find(net, fhdr->identification, user, hdr,
+			skb->dev ? skb->dev->ifindex : 0);
+#endif
 	if (fq == NULL)
 		return -ENOMEM;
 
@@ -584,7 +631,11 @@ int rpl_nf_ct_frag6_gather(struct net *net, struct sk_buff *skb, u32 user)
 
 out_unlock:
 	spin_unlock_bh(&fq->q.lock);
+#ifdef HAVE_INET_FRAGS_RND
 	inet_frag_put(&fq->q, &nf_frags);
+#else
+	inet_frag_put(&fq->q);
+#endif
 	return ret;
 }
 
@@ -614,10 +665,12 @@ void ovs_netns_frags6_init(struct net *net)
 
 void ovs_netns_frags6_exit(struct net *net)
 {
+#ifdef HAVE_INET_FRAGS_RND
 	struct netns_frags *frags;
 
 	frags = get_netns_frags6_from_net(net);
 	inet_frags_exit_net(frags, &nf_frags);
+#endif
 }
 
 static struct pernet_operations nf_ct_net_ops = {
@@ -627,20 +680,41 @@ static struct pernet_operations nf_ct_net_ops = {
 	.exit = nf_ct_net_exit,
 };
 
+#ifdef HAVE_IPV6_FRAG_H
+static const struct rhashtable_params nfct_rhash_params = {
+	.head_offset        = offsetof(struct inet_frag_queue, node),
+	.hashfn            = ip6frag_key_hashfn,
+	.obj_hashfn        = ip6frag_obj_hashfn,
+	.obj_cmpfn        = ip6frag_obj_cmpfn,
+	.automatic_shrinking    = true,
+};
+#endif
 int rpl_nf_ct_frag6_init(void)
 {
 	int ret = 0;
 
+
 #ifndef HAVE_DEFRAG_ENABLE_TAKES_NET
 	nf_defrag_ipv6_enable();
 #endif
+#ifdef HAVE_INET_FRAGS_RND
 	nf_frags.hashfn = nf_hashfn;
+	nf_frags.match = ip6_frag_match;
 	nf_frags.constructor = ip6_frag_init;
+#else
+#ifdef HAVE_IPV6_FRAG_H
+	nf_frags.rhash_params = nfct_rhash_params;
+	nf_frags.constructor = ip6frag_init;
+#else
+	nf_frags.rhash_params = ip6_rhash_params;
+	nf_frags.constructor = ip6_frag_init;
+#endif
+#endif /* HAVE_INET_FRAGS_RND */
+
 	nf_frags.destructor = NULL;
 	nf_frags.qsize = sizeof(struct frag_queue);
-	nf_frags.match = ip6_frag_match;
 	nf_frags.frag_expire = nf_ct_frag6_expire;
-#ifdef HAVE_INET_FRAGS_WITH_FRAGS_WORK
+#ifdef defined(HAVE_INET_FRAGS_WITH_FRAGS_WORK) || !defined(HAVE_INET_FRAGS_RND)
 	nf_frags.frags_cache_name = nf_frags_cache_name;
 #endif
 	ret = inet_frags_init(&nf_frags);
-- 
2.11.0

