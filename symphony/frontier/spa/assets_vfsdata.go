// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by vfsgen; DO NOT EDIT.

package spa

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 17, 18, 13, 9, 774940706, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 10, 17, 18, 13, 9, 775080371, time.UTC),
			uncompressedSize: 838,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x5d\x6f\xd3\x3c\x14\xbe\xcf\xaf\x78\xe6\xab\xf7\x95\x48\x33\x10\x17\x08\xe2\x4a\xa3\xdb\xd0\x24\xd8\x26\x0d\x90\xb8\x74\xed\x93\xe4\x68\x8e\x1d\xec\xd3\x8c\x68\xea\x7f\x47\x69\x35\xba\x0d\x96\xab\x1c\x3f\x9f\x96\xed\xfa\xe8\xf4\x6a\xf5\xf5\xc7\xf5\x19\x3a\xe9\xfd\xb2\xa8\x8f\xca\xb2\xc0\x2a\x0e\x53\xe2\xb6\x13\xfc\x67\xff\xc7\x9b\xe3\xe3\xb7\xe5\x90\x28\x53\x10\x9c\x1b\x4b\xeb\x18\x6f\x71\xe2\x3d\x76\x9c\x8c\x19\x4a\x23\xb9\x45\x81\x6f\x99\x10\x1b\x48\xc7\x19\x39\x6e\x92\x25\xd8\xe8\x08\x9c\xd1\xc6\x91\x52\x20\x87\xf5\x04\x83\x8f\x37\xa7\x65\x96\xc9\x53\x01\xcf\x96\x42\x26\x48\x67\x04\xd6\x04\xac\x09\x4d\xdc\x04\x07\x0e\x90\x8e\xf0\xf9\x62\x75\x76\x79\x73\x86\x86\x3d\x2d\x8a\xb2\x5c\x16\x45\x3d\xd7\x85\x37\xa1\xd5\x8a\x82\x5a\x16\x00\x50\x77\x64\xdc\xfe\x77\x37\x0a\x8b\xa7\xe5\xcd\xd4\x0f\x5d\x0c\x53\x5d\xed\xe7\x03\xde\x93\x18\xd8\xce\xa4\x4c\xa2\xd5\x46\x9a\xf2\x9d\x42\xf5\x9c\xd0\x89\x0c\x25\xfd\xdc\xf0\xa8\xd5\xaf\x72\x63\x4a\x1b\xfb\xc1\x08\xaf\x3d\x29\xd8\x18\x84\x82\x68\xc5\xa4\xc9\xb5\xf4\x0f\x7d\x30\x3d\x69\xe5\x28\xdb\xc4\x83\x70\x0c\x8f\x54\x0f\xdd\x70\x32\x0c\x9e\xad\xd9\xc3\x2f\x58\x8c\x4c\x77\x43\x4c\xf2\x48\x7f\xc7\x4e\x3a\xed\x68\x64\x4b\xe5\x6e\x78\x05\x0e\x2c\x6c\x7c\x99\xad\xf1\xa4\x5f\x3f\xb5\xf3\x1c\x6e\x91\xc8\x6b\x95\xbb\x98\xc4\x6e\x04\x6c\xe7\x4c\x99\x06\xd2\x8a\x7b\xd3\x52\x35\x84\x56\xa1\x4b\xd4\x68\x55\x85\x3e\x57\x59\x8c\xb0\xad\x76\x60\xae\x1a\x33\xce\x92\xc5\x8e\xf5\xd8\x7b\xbf\x41\xe4\x64\xb5\xba\xbf\xc7\xe2\x3b\x05\x17\xd3\xb5\x91\x0e\xdb\xad\x5a\xd6\xd5\x9e\xf0\x97\xe2\xb0\x30\x7f\x9e\x04\xab\xab\xcb\xf3\x8b\x4f\xd0\x98\x6d\x56\x31\x34\xdc\x62\xbb\xfd\x70\x10\x3e\xb1\xaa\xab\xc3\xb9\xd7\xeb\xe8\x26\xec\x2e\x96\x56\xbd\x49\x2d\x87\xf7\xc7\xea\x21\xa1\x76\x3c\x82\x9d\x56\x29\x46\x99\x1b\x39\x1e\xff\x60\xcf\xeb\x7f\x31\x1c\x5e\x28\x5f\x57\x73\xcc\xb2\x98\xa3\xe7\x67\xf3\x3b\x00\x00\xff\xff\x7c\x02\x0d\x24\x46\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
