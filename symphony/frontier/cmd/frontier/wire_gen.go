// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"errors"
	"github.com/facebookincubator/symphony/frontier/handler"
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/oc"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"go.opencensus.io/stats/view"
	"gocloud.dev/server/health"
)

// Injectors from wire.go:

func NewServer(flags *cliFlags) (*server.Server, func(), error) {
	handlerProxyTarget := proxyTarget(flags)
	handlerStaticTarget := staticTarget(flags)
	config := flags.Log
	logger, cleanup, err := log.Provider(config)
	if err != nil {
		return nil, nil, err
	}
	v := flags.KeyPairs
	v2, err := authKey(v)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	handlerConfig := handler.Config{
		ProxyTarget:  handlerProxyTarget,
		StaticTarget: handlerStaticTarget,
		Logger:       logger,
		AuthKey:      v2,
	}
	router := handler.NewHandler(handlerConfig)
	zapLogger := xserver.NewRequestLogger(logger)
	v3 := _wireValue
	v4 := defaultViews()
	exporter, err := xserver.NewPrometheusExporter(logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	options := flags.Census
	jaegerOptions := oc.JaegerOptions(options)
	traceExporter, cleanup2, err := xserver.NewJaegerExporter(logger, jaegerOptions)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	profilingEnabler := _wireProfilingEnablerValue
	sampler := oc.TraceSampler(options)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	serverOptions := &server.Options{
		RequestLogger:         zapLogger,
		HealthChecks:          v3,
		Views:                 v4,
		ViewExporter:          exporter,
		TraceExporter:         traceExporter,
		EnableProfiling:       profilingEnabler,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(router, serverOptions)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireValue                 = []health.Checker(nil)
	_wireProfilingEnablerValue = server.ProfilingEnabler(true)
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)

// wire.go:

func proxyTarget(flags *cliFlags) handler.ProxyTarget {
	return handler.ProxyTarget(flags.ProxyTarget.URL)
}

func staticTarget(flags *cliFlags) handler.StaticTarget {
	return handler.StaticTarget(flags.InventoryTarget.URL)
}

func authKey(keys []key) ([]byte, error) {
	if len(keys) > 0 {
		return keys[0], nil
	}
	return nil, errors.New("empty key set")
}

func defaultViews() []*view.View {
	return append(xserver.DefaultViews(), handler.Views()...)
}
