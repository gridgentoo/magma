#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import DataClassJsonMixin

from .property_type_fragment import PropertyTypeFragment, QUERY as PropertyTypeFragmentQuery

QUERY: List[str] = PropertyTypeFragmentQuery + ["""
query LocationTypesQuery {
  locationTypes {
    edges {
      node {
        id
        name
        propertyTypes {
          ...PropertyTypeFragment
        }
      }
    }
  }
}

"""]

@dataclass
class LocationTypesQuery(DataClassJsonMixin):
    @dataclass
    class LocationTypesQueryData(DataClassJsonMixin):
        @dataclass
        class LocationTypeConnection(DataClassJsonMixin):
            @dataclass
            class LocationTypeEdge(DataClassJsonMixin):
                @dataclass
                class LocationType(DataClassJsonMixin):
                    @dataclass
                    class PropertyType(PropertyTypeFragment):
                        pass

                    id: str
                    name: str
                    propertyTypes: List[PropertyType]

                node: Optional[LocationType]

            edges: List[LocationTypeEdge]

        locationTypes: Optional[LocationTypeConnection]

    data: LocationTypesQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient) -> LocationTypesQueryData:
        # fmt: off
        variables = {}
        response_text = client.call(''.join(set(QUERY)), variables=variables)
        return cls.from_json(response_text).data
