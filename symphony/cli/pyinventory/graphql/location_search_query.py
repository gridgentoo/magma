#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import DataClassJsonMixin

from .location_fragment import LocationFragment, QUERY as LocationFragmentQuery
from .location_filter_input import LocationFilterInput


QUERY: List[str] = LocationFragmentQuery + ["""
query LocationSearchQuery($filters: [LocationFilterInput!]!, $limit: Int) {
  locationSearch(filters: $filters, limit: $limit) {
    locations {
      ...LocationFragment
    }
    count
  }
}

"""]

@dataclass
class LocationSearchQuery(DataClassJsonMixin):
    @dataclass
    class LocationSearchQueryData(DataClassJsonMixin):
        @dataclass
        class LocationSearchResult(DataClassJsonMixin):
            @dataclass
            class Location(LocationFragment):
                pass

            locations: List[Location]
            count: int

        locationSearch: LocationSearchResult

    data: LocationSearchQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, filters: List[LocationFilterInput] = [], limit: Optional[int] = None) -> LocationSearchQueryData:
        # fmt: off
        variables = {"filters": filters, "limit": limit}
        response_text = client.call(''.join(set(QUERY)), variables=variables)
        return cls.from_json(response_text).data
