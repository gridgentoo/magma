#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import DataClassJsonMixin

from .property_fragment import PropertyFragment, QUERY as PropertyFragmentQuery
from .edit_equipment_port_input import EditEquipmentPortInput


QUERY: List[str] = PropertyFragmentQuery + ["""
mutation EditEquipmentPortMutation($input: EditEquipmentPortInput!) {
  editEquipmentPort(input: $input) {
    id
    properties {
      ...PropertyFragment
    }
    definition {
      id
      name
      portType {
        id
        name
      }
    }
    link {
      id
      services {
        id
      }
    }
  }
}

"""]

@dataclass
class EditEquipmentPortMutation(DataClassJsonMixin):
    @dataclass
    class EditEquipmentPortMutationData(DataClassJsonMixin):
        @dataclass
        class EquipmentPort(DataClassJsonMixin):
            @dataclass
            class Property(PropertyFragment):
                pass

            @dataclass
            class EquipmentPortDefinition(DataClassJsonMixin):
                @dataclass
                class EquipmentPortType(DataClassJsonMixin):
                    id: str
                    name: str

                id: str
                name: str
                portType: Optional[EquipmentPortType]

            @dataclass
            class Link(DataClassJsonMixin):
                @dataclass
                class Service(DataClassJsonMixin):
                    id: str

                id: str
                services: List[Service]

            id: str
            properties: List[Property]
            definition: EquipmentPortDefinition
            link: Optional[Link]

        editEquipmentPort: EquipmentPort

    data: EditEquipmentPortMutationData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, input: EditEquipmentPortInput) -> EditEquipmentPortMutationData:
        # fmt: off
        variables = {"input": input}
        response_text = client.call(''.join(set(QUERY)), variables=variables)
        return cls.from_json(response_text).data
