#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import DataClassJsonMixin

from .equipment_port_type_fragment import EquipmentPortTypeFragment, QUERY as EquipmentPortTypeFragmentQuery

QUERY: List[str] = EquipmentPortTypeFragmentQuery + ["""
query EquipmentPortTypesQuery {
  equipmentPortTypes {
    edges {
      node {
        ...EquipmentPortTypeFragment
      }
    }
  }
}

"""]

@dataclass
class EquipmentPortTypesQuery(DataClassJsonMixin):
    @dataclass
    class EquipmentPortTypesQueryData(DataClassJsonMixin):
        @dataclass
        class EquipmentPortTypeConnection(DataClassJsonMixin):
            @dataclass
            class EquipmentPortTypeEdge(DataClassJsonMixin):
                @dataclass
                class EquipmentPortType(EquipmentPortTypeFragment):
                    pass

                node: Optional[EquipmentPortType]

            edges: List[EquipmentPortTypeEdge]

        equipmentPortTypes: EquipmentPortTypeConnection

    data: EquipmentPortTypesQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient) -> EquipmentPortTypesQueryData:
        # fmt: off
        variables = {}
        response_text = client.call(''.join(set(QUERY)), variables=variables)
        return cls.from_json(response_text).data
