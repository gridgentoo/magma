// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package graphhttp

import (
	"github.com/facebookincubator/symphony/graph/event"
	"github.com/facebookincubator/symphony/graph/viewer"
	"github.com/facebookincubator/symphony/pkg/actions/action/magmarebootnode"
	"github.com/facebookincubator/symphony/pkg/actions/executor"
	"github.com/facebookincubator/symphony/pkg/actions/trigger/magmaalert"
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/mysql"
	"github.com/facebookincubator/symphony/pkg/oc"
	"github.com/facebookincubator/symphony/pkg/orc8r"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"go.opencensus.io/stats/view"
	"gocloud.dev/server/health"
	"net/url"
)

// Injectors from wire.go:

func NewServer(cfg Config) (*server.Server, func(), error) {
	graphhttpRouterConfig, err := newRouterConfig(cfg)
	if err != nil {
		return nil, nil, err
	}
	router, cleanup, err := newRouter(graphhttpRouterConfig)
	if err != nil {
		return nil, nil, err
	}
	logger := cfg.Logger
	zapLogger := xserver.NewRequestLogger(logger)
	v := cfg.HealthChecks
	v2 := provideViews()
	exporter, err := xserver.NewPrometheusExporter(logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	options := cfg.Census
	jaegerOptions := oc.JaegerOptions(options)
	traceExporter, cleanup2, err := xserver.NewJaegerExporter(logger, jaegerOptions)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	profilingEnabler := _wireProfilingEnablerValue
	sampler := oc.TraceSampler(options)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	serverOptions := &server.Options{
		RequestLogger:         zapLogger,
		HealthChecks:          v,
		Views:                 v2,
		ViewExporter:          exporter,
		TraceExporter:         traceExporter,
		EnableProfiling:       profilingEnabler,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(router, serverOptions)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireProfilingEnablerValue = server.ProfilingEnabler(true)
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)

// wire.go:

// Config defines the http server config.
type Config struct {
	Tenancy      viewer.Tenancy
	AuthURL      *url.URL
	Subscriber   event.Subscriber
	Logger       log.Logger
	Census       oc.Options
	HealthChecks []health.Checker
	Orc8r        orc8r.Config
}

func newRouterConfig(config Config) (cfg routerConfig, err error) {
	client, _ := orc8r.NewClient(config.Orc8r)
	registry := executor.NewRegistry()
	if err = registry.RegisterTrigger(magmaalert.New()); err != nil {
		return
	}
	if err = registry.RegisterAction(magmarebootnode.New(client)); err != nil {
		return
	}
	cfg = routerConfig{logger: config.Logger}
	cfg.viewer.tenancy = config.Tenancy
	cfg.viewer.authurl = config.AuthURL.String()
	cfg.events.subscriber = config.Subscriber
	cfg.orc8r.client = client
	cfg.actions.registry = registry
	return cfg, nil
}

func provideViews() []*view.View {
	views := xserver.DefaultViews()
	views = append(views, mysql.DefaultViews...)
	views = append(views, event.DefaultViews...)
	return views
}
