// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

package main

import (
	"bufio"
	"bytes"
	"flag"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/99designs/gqlgen/api"
	"github.com/99designs/gqlgen/codegen/config"
	"github.com/facebookincubator/symphony/graph/graphql/plugin/txgen"
)

func main() {
	verbose := flag.Bool("v", false, "show logs")
	flag.Parse()

	var (
		output bytes.Buffer
		err    error
	)
	defer func() {
		if err != nil {
			io.Copy(os.Stderr, &output)
			os.Exit(1)
		}
	}()
	if !*verbose {
		log.SetOutput(&output)
	}

	var cfg *config.Config
	if cfg, err = config.LoadConfigFromDefaultLocations(); err != nil {
		log.Println("cannot load config file", err)
		return
	}
	if err = api.Generate(cfg, api.AddPlugin(
		txgen.New(config.PackageConfig{}),
	)); err != nil {
		log.Println("cannot generate code", err)
		return
	}
	if err = fixupHeaders(); err != nil {
		log.Println("cannot fixup generated headers", err)
	}
}

func fixupHeaders() error {
	return filepath.Walk(".", func(path string, fi os.FileInfo, err error) error {
		if err != nil || fi.IsDir() || filepath.Ext(fi.Name()) != ".go" {
			return err
		}
		f, err := os.OpenFile(path, os.O_RDWR, 0644)
		if err != nil {
			return err
		}
		defer f.Close()
		var (
			buf bytes.Buffer
			rd  = bufio.NewReader(f)
		)
		const tag = "@" + "generated"
		line, err := rd.ReadString('\n')
		for ; err == nil; line, err = rd.ReadString('\n') {
			if strings.Contains(line, tag) {
				return nil
			}
			var found bool
			if found = strings.HasPrefix(line, "// Code generated by"); found {
				line = strings.Replace(line, "Code generated", "Code generated ("+tag+")", 1)
			}
			buf.WriteString(line)
			if found {
				_, err = io.Copy(&buf, rd)
				break
			}
		}
		if err != nil && err != io.EOF {
			return err
		}
		if err = f.Truncate(0); err == nil {
			_, err = f.WriteAt(buf.Bytes(), 0)
		}
		return err
	})
}
