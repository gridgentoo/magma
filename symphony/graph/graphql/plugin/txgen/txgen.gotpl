{{ reserveImport "context" }}
{{ reserveImport "fmt" }}

{{ reserveImport "github.com/facebookincubator/symphony/graph/graphql/generated" }}

// {{$.Type}} wraps a mutation resolver and executes every mutation under a transaction.
type {{$.Type}} struct {
	generated.MutationResolver
}

func (tr {{$.Type}}) WithTransaction(ctx context.Context, f func(context.Context, generated.MutationResolver) error) error {
	tx, err := ent.FromContext(ctx).Tx(ctx)
	if err != nil {
		return fmt.Errorf("creating transaction: %w", err)
	}
	ctx = ent.NewTxContext(ctx, tx)
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
			panic(r)
		}
	}()
	ctx = ent.NewContext(ctx, tx.Client())
	if err := f(ctx, tr.MutationResolver); err != nil {
		if r := tx.Rollback(); r != nil {
			err = fmt.Errorf("rolling back transaction: %v", r)
		}
		return err
	}
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("committing transaction: %w", err)
	}
	return nil
}

{{ $root := . }}

{{ range $field := $root.Fields -}}
func (tr {{$root.Type}}) {{$field.GoFieldName}}{{$field.ShortResolverDeclaration}} {
	var result, zero {{ResultType $field}}
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.{{$field.GoFieldName}}(ctx,
			{{- if not $root.Root }}obj,{{end -}}
			{{- range $arg := $field.Args}}
				{{- $arg.VarName}},
			{{- end}}
		)
		return
	}); err != nil {
		return zero, err
	}
	{{- if eq "ent" (Package $field) }}
		{{- if $field.TypeReference.IsSlice }}
			for i := range result {
				result[i] = result[i].Unwrap()
			}
		{{- else }}
			if result != nil {
				result = result.Unwrap()
			}
		{{- end }}
	{{- end }}
	return result, nil
}

{{ end }}
