// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/oc"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"github.com/facebookincubator/symphony/store/handler"
	"github.com/facebookincubator/symphony/store/sign/s3"
	"gocloud.dev/server/health"
)

// Injectors from wire.go:

func NewServer(flags *cliFlags) (*server.Server, func(), error) {
	config := flags.Log
	logger, cleanup, err := log.Provider(config)
	if err != nil {
		return nil, nil, err
	}
	s3Config := flags.S3
	signer, err := s3.NewSigner(s3Config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	handlerConfig := handler.Config{
		Logger: logger,
		Signer: signer,
	}
	handlerHandler := handler.New(handlerConfig)
	zapLogger := xserver.NewRequestLogger(logger)
	v := _wireValue
	v2 := xserver.DefaultViews()
	exporter, err := xserver.NewPrometheusExporter(logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	options := flags.Census
	jaegerOptions := oc.JaegerOptions(options)
	traceExporter, cleanup2, err := xserver.NewJaegerExporter(logger, jaegerOptions)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	profilingEnabler := _wireProfilingEnablerValue
	sampler := oc.TraceSampler(options)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	serverOptions := &server.Options{
		RequestLogger:         zapLogger,
		HealthChecks:          v,
		Views:                 v2,
		ViewExporter:          exporter,
		TraceExporter:         traceExporter,
		EnableProfiling:       profilingEnabler,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handlerHandler, serverOptions)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireValue                 = []health.Checker(nil)
	_wireProfilingEnablerValue = server.ProfilingEnabler(true)
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)
