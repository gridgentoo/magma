map $host $minio_host {
  default minio:9000;
}

map $host $inventory_host {
  default inventory:8080;
}

map $host $frontier_host {
  default frontier:80;
}

server {
    resolver 127.0.0.11 valid=30s;
    listen 443 ssl;

    ssl_certificate /etc/nginx/ssl/ssl.crt;
    ssl_certificate_key /etc/nginx/ssl/ssl.key;

    location /healthz {
        access_log off;
        default_type text/plain;
        return 200 "healthy\n";
    }

    location /sockjs-node {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://$inventory_host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location ~ ^/(__webpack_dev_server__|__webpack_hmr|inventory/static/dist) {
        proxy_pass http://$inventory_host;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location / {
        proxy_pass http://$frontier_host;
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# Listen on port 80 so clients that can't handle a self-signed cert
# (e.g. okhttp for React Native) can successfully use http instead of https
# TODO: remove this once the certificate signing code also generates
# a root Certificate Authority which can be loaded onto an Android device.
server {
    resolver 127.0.0.11 valid=30s;
    listen 80;

    location ~ ^/(sockjs-node|__webpack_dev_server__|__webpack_hmr|inventory/static/dist) {
        proxy_pass http://$inventory_host;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location / {
        proxy_pass http://$frontier_host;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    resolver 127.0.0.11 valid=30s;
    listen 9000 ssl;

    ssl_certificate /etc/nginx/ssl/ssl.crt;
    ssl_certificate_key /etc/nginx/ssl/ssl.key;

    location / {
        proxy_pass http://$minio_host;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        client_max_body_size 5M;
    }
}
